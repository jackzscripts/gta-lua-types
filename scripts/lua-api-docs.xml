<html><head>
<title>Lua API Documentation | Stand</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="/halfmoon-variables.min.css" crossorigin="anonymous" rel="stylesheet">
<link href="/halfmoon-config.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/gh/hung1001/font-awesome-pro@4cac1a6/css/all.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/halfmoon@1.1.1/js/halfmoon.min.js" crossorigin="anonymous" defer=""></script>
</head>
<body class="dark-mode">
<div class="page-wrapper with-navbar with-transitions">
<nav class="navbar">
<div class="container-xl">
<a class="navbar-brand" href="/overview">Stand</a>
<ul class="navbar-nav">
<li class="nav-item"><a class="nav-link" href="/">GTA V</a></li>
<li class="nav-item"><a class="nav-link" href="/fh5">FH5</a></li>
<li class="nav-item"><a class="nav-link" href="/vpn/">VPN</a></li>
<li class="nav-item active"><a class="nav-link" href="/help/">Help</a></li>
</ul>
<div class="navbar-content ml-auto d-none d-sm-flex">
<ul class="navbar-nav">
<li class="nav-item"><a class="nav-link" href="/account/">Account</a></li>
</ul>
</div>
<div class="navbar-content ml-auto d-sm-none">
<div class="dropdown">
<button class="btn" data-toggle="dropdown" type="button"><i class="fa fa-bars"></i></button>
<div class="dropdown-menu dropdown-menu-right">
<a href="/" class="dropdown-item">GTA V</a>
<a href="/fh5" class="dropdown-item">FH5</a>
<a href="/vpn/" class="dropdown-item">VPN</a>
<a href="/help/" class="dropdown-item">Help</a>
<a href="/account/" class="dropdown-item">Account</a>
</div>
</div>
</div>
</div>
</nav>
<div class="content-wrapper">
<div class="container-xl">
<div class="content">
<h1>Stand Lua API Documentation</h1>
<h3>Table of Contents</h3>
<ul>
<li><a href="#general">About Developing Stand Luas</a></li>
<li><a href="#types">Types</a></li>
<li><a href="#global-variables">Global Variables</a></li>
<li><a href="#menu-functions">Menu Functions</a></li>
<li><a href="#players-functions">Players Functions</a></li>
<li><a href="#entities-functions">Entities Functions</a></li>
<li><a href="#chat-functions">Chat Functions</a></li>
<li><a href="#directx-functions">DirectX Functions</a></li>
<li><a href="#util-functions">Util Functions</a></li>
<li><a href="#v3-functions">V3 Functions</a></li>
<li><a href="#lang-functions">Lang Functions</a></li>
<li><a href="#filesystem-functions">Filesystem Functions</a></li>
<li><a href="#async-http-functions">Async HTTP Functions</a></li>
<li><a href="#memory-functions">Memory Functions</a></li>
<li><a href="#profiling-functions">Profiling Functions</a></li>
</ul>
<h3><a name="general" href="#general">§</a> About Developing Stand Luas</h3>
<h5>Sandboxing</h5>
<p>Lua scripts in Stand run in a sandboxed environment that will be removed from memory once the script has finished.</p>
<p>This means that for idle background scripts that only register event handlers or menu commands and have no passive tasks to perform, a call to <code>util.keep_running</code> is needed.</p>
<h5>Game Natives</h5>
<p>This Stand Lua API that is described in this document is developed with the game's own scripting features in mind, which are at your fingertips with just a call to <code>util.require_natives(1663599433)</code>.</p>
<p>You can find a nice viewer for the game's native functions at <a href="https://nativedb.dotindustries.dev/natives" target="_blank" rel="noreferrer noopener">nativedb.dotindustries.dev</a>, which is powered by <a href="https://github.com/alloc8or/gta5-nativedb-data" target="_blank" rel="noreferrer noopener">alloc8or's nativedb data</a>.</p>
<h5>Runtime Settings</h5>
<p>We highly recommend using <code>Stand &gt; Lua Scripts &gt; Settings &gt; Presets &gt; Developer</code> and/or reviewing all the Lua runtime settings available to you, as they can help you write more polished and less buggy code.</p>
<h5>Language</h5>
<p>Stand uses <a href="https://plutolang.github.io/docs/Introduction" target="_blank">Pluto</a> which adds new features, improvements, and optimisations while being compatible with existing Lua code.</p>
<p>Note that for compatibility reasons, Pluto's <code>switch</code> and <code>default</code> keywords are <code>pluto_switch</code> and <code>pluto_default</code>, respectively.</p>
<h5>Bindings</h5>
<p>Stand also provides <a href="https://github.com/calamity-inc/Soup-Lua-Bindings/blob/main/LUA_API.md#soup-lua-bindings">Soup Lua Bindings</a>.</p>
<h5>External Resources</h5>
<ul>
<li><a href="https://github.com/Keramis/Lua_STANDAPI" target="_blank" rel="noreferrer noopener">Scriptcat's Tutorial</a></li>
</ul>
<h3><a name="types" href="#types">§</a> Types</h3>
<h5><i class="text-success">Label</i></h5>
<p>A string or the return value of <code>lang.register</code>.</p>
<h5><i class="text-success">CommandRef</i></h5>
<p>A reference to a command in Stand. Supports all of CommandUniqPtr's operations as well as:</p>
<ul>
<li><code>:isValid()</code> — shorthand for menu.is_ref_valid</li>
<li><code>:delete()</code> — shorthand for menu.delete</li>
<li><code>:detach()</code> — shorthand for menu.detach</li>
<li><code>:attach(...)</code> — shorthand for menu.attach</li>
<li><code>:attachAfter(...)</code> — shorthand for menu.attach_after</li>
<li><code>:attachBefore(...)</code> — shorthand for menu.attach_before</li>
<li><code>:focus()</code> — shorthand for menu.focus</li>
<li><code>:getApplicablePlayers(...)</code> — shorthand for menu.get_applicable_players</li>
<li><code>.visible</code> — shorthand for menu.get_visible/menu.set_visible</li>
<li><code>.value</code> — shorthand for menu.get_value/menu.set_value</li>
<li><code>.min_value</code> — shorthand for menu.get_min_value/menu.set_min_value</li>
<li><code>.max_value</code> — shorthand for menu.get_max_value/menu.set_max_value</li>
<li><code>.step_size</code> — shorthand for menu.get_step_size/menu.set_step_size</li>
<li><code>:list(...)</code> — shorthand for menu.list</li>
<li><code>:action(...)</code> — shorthand for menu.action</li>
<li><code>:toggle(...)</code> — shorthand for menu.toggle</li>
<li><code>:toggle_loop(...)</code> — shorthand for menu.toggle_loop</li>
<li><code>:slider(...)</code> — shorthand for menu.slider</li>
<li><code>:slider_float(...)</code> — shorthand for menu.slider_float</li>
<li><code>:click_slider(...)</code> — shorthand for menu.click_slider</li>
<li><code>:click_slider_float(...)</code> — shorthand for menu.click_slider_float</li>
<li><code>:list_select(...)</code> — shorthand for menu.list_select</li>
<li><code>:list_action(...)</code> — shorthand for menu.list_action</li>
<li><code>:text_input(...)</code> — shorthand for menu.text_input</li>
<li><code>:colour(...)</code> — shorthand for menu.colour</li>
<li><code>:rainbow(...)</code> — shorthand for menu.rainbow</li>
<li><code>:divider(...)</code> — shorthand for menu.divider</li>
<li><code>:readonly(...)</code> — shorthand for menu.readonly</li>
<li><code>:hyperlink(...)</code> — shorthand for menu.hyperlink</li>
<li><code>:action_slider(...)</code> — shorthand for menu.action_slider</li>
<li><code>:slider_text(...)</code> — shorthand for menu.slider_text</li>
</ul>
<h5><i class="text-success">CommandUniqPtr</i></h5>
<p>A detached command. Supports the following operations:</p>
<ul>
<li><code>.menu_name</code> — shorthand for menu.get_menu_name/menu.set_menu_name</li>
<li><code>.command_names</code> — shorthand for menu.get_command_names/menu.set_command_names</li>
<li><code>.help_text</code> — shorthand for menu.get_help_text/menu.set_help_text</li>
</ul>
<p>Detached commands don't exist in the menu in any way, and are not usable via the command box.</p>
<h5><i class="text-success">Vector3</i></h5>
<p>A v3 instance or a table with <code>x</code>, <code>y</code> &amp; <code>z</code> fields of type number.</p>
<h5><i class="text-success">Colour</i></h5>
<p>A table with <code>r</code>, <code>g</code>, <code>b</code> &amp; <code>a</code> fields of type number with values between 0.0 and 1.0.</p>
<p>Functions that take this as a parameter also support 4 floats instead of it, which is more performant.</p>
<h3><a name="global-variables" href="#global-variables">§</a> Global Variables</h3>
<h5 class="text-danger">SCRIPT_NAME</h5>
<p>A <i class="text-success">string</i> containing the name of your script (this excludes <code>.lua</code>).</p>
<h5 class="text-danger">SCRIPT_FILENAME</h5>
<p>A <i class="text-success">string</i> containing the name of your script file.</p>
<h5 class="text-danger">SCRIPT_RELPATH</h5>
<p>A <i class="text-success">string</i> containing the path to your script file from the Lua Scripts folder.</p>
<h5 class="text-danger">SCRIPT_MANUAL_START</h5>
<p>A <i class="text-success">bool</i> indicating if your script was started in direct response to a user action.</p>
<h5 class="text-danger">SCRIPT_SILENT_START</h5>
<p>A <i class="text-success">bool</i> indicating if a silent start of your script is desired.</p>
<h3><a name="menu-functions" href="#menu-functions">§</a> Menu Functions</h3>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">my_root</span>()</h5>
<p>Returns a reference to the list that your script gets when it is started.</p>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">player_root</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Returns a reference to the list that the given player owns.</p>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">shadow_root</span>()</h5>
<p>Using return value of this function to create a command produces a detached commmand (CommandUniqPtr) instead of a CommandRef.</p>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">ref_by_path</span>(<i class="text-success">string</i> <i class="text-warning">path</i>, <i class="text-success">?int</i> <i class="text-warning">tree_version</i> = <span class="text-danger">nil</span>)</h5>
<p>Returns a reference to any command in Stand using a path such as <code>Self&gt;Immortality</code>. Note that the path has to be in English (UK) and using the no-space greater-than separator.</p>
<p>Providing a tree version is optional but highly recommended for future-proofing. You can find this in any tree config file, such as your profile.</p>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">ref_by_rel_path</span>(<i class="text-success">int</i> <i class="text-warning">base</i>, <i class="text-success">string</i> <i class="text-warning">path</i>)</h5>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">ref_by_command_name</span>(<i class="text-success">string</i> <i class="text-warning">command_name</i>)</h5>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">list</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i> = <span class="text-danger">{}</span>, <i class="text-success">Label</i> <i class="text-warning">help_text</i> = <span class="text-danger">""</span>, <i class="text-success">?function</i> <i class="text-warning">on_click</i> = <span class="text-danger">nil</span>, <i class="text-success">?function</i> <i class="text-warning">on_back</i> = <span class="text-danger">nil</span>)</h5>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">action</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">function</i> <i class="text-warning">on_click</i>, <i class="text-success">?function</i> <i class="text-warning">on_command</i> = <span class="text-danger">nil</span>, <i class="text-success">?string</i> <i class="text-warning">syntax</i> = <span class="text-danger">nil</span>, <i class="text-success">int</i> <i class="text-warning">perm</i> = <span class="text-danger">COMMANDPERM_USERONLY</span>)</h5>
<p><code>perm</code> may be any of:</p>
<ul>
<li><span class="text-danger">COMMANDPERM_FRIENDLY</span></li>
<li><span class="text-danger">COMMANDPERM_NEUTRAL</span></li>
<li><span class="text-danger">COMMANDPERM_SPAWN</span></li>
<li><span class="text-danger">COMMANDPERM_RUDE</span></li>
<li><span class="text-danger">COMMANDPERM_AGGRESSIVE</span></li>
<li><span class="text-danger">COMMANDPERM_TOXIC</span></li>
<li><span class="text-danger">COMMANDPERM_USERONLY</span></li>
</ul>
<p>Your <code>on_click</code> function will be called with click_type and effective_issuer. The click type could be any of:</p>
<ul>
<li><span class="text-danger">CLICK_MENU</span></li>
<li><span class="text-danger">CLICK_COMMAND</span></li>
<li><span class="text-danger">CLICK_HOTKEY</span></li>
<li><span class="text-danger">CLICK_BULK</span></li>
<li><span class="text-danger">CLICK_AUTO</span></li>
<li><span class="text-danger">CLICK_SCRIPTED</span></li>
<li><span class="text-danger">CLICK_WEB</span></li>
<li><span class="text-danger">CLICK_WEB_COMMAND</span></li>
<li><span class="text-danger">CLICK_CHAT_ALL</span></li>
<li><span class="text-danger">CLICK_CHAT_TEAM</span></li>
</ul>
<p>And could match any or neither of these bitflags:</p>
<ul>
<li><span class="text-danger">CLICK_FLAG_AUTO</span></li>
<li><span class="text-danger">CLICK_FLAG_CHAT</span></li>
<li><span class="text-danger">CLICK_FLAG_WEB</span></li>
</ul>
<p>Your <code>on_command</code> function will be called with the provided arguments, click_type, and effective_issuer. If <code>on_command</code> is not provided, commands will be redirected to <code>on_click</code>.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">toggle</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">function</i> <i class="text-warning">on_change</i>, <i class="text-success">bool</i> <i class="text-warning">default_on</i> = <span class="text-danger">false</span>)</h5>
<p>Your <code>on_change</code> function will be called with <code>on</code> and <code>click_type</code>.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">toggle_loop</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">function</i> <i class="text-warning">on_tick</i>, <i class="text-success">?function</i> <i class="text-warning">on_stop</i> = <span class="text-danger">nil</span>)</h5>
<p>Your <code>on_tick</code> function will be called every tick that the toggle is checked; you should not call <code>util.yield</code> in this context.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">slider</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">int</i> <i class="text-warning">min_value</i>, <i class="text-success">int</i> <i class="text-warning">max_value</i>, <i class="text-success">int</i> <i class="text-warning">default_value</i>, <i class="text-success">int</i> <i class="text-warning">step_size</i>, <i class="text-success">function</i> <i class="text-warning">on_change</i>)</h5>
<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">slider_float</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">int</i> <i class="text-warning">min_value</i>, <i class="text-success">int</i> <i class="text-warning">max_value</i>, <i class="text-success">int</i> <i class="text-warning">default_value</i>, <i class="text-success">int</i> <i class="text-warning">step_size</i>, <i class="text-success">function</i> <i class="text-warning">on_change</i>)</h5>
<p>Your <code>on_change</code> function will be called with <code>value</code>, <code>prev_value</code> and <code>click_type</code>.</p>
<p>Note that the float variant is practically identical except the last 2 digits are indicated to be numbers after the decimal point.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">click_slider</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">int</i> <i class="text-warning">min_value</i>, <i class="text-success">int</i> <i class="text-warning">max_value</i>, <i class="text-success">int</i> <i class="text-warning">default_value</i>, <i class="text-success">int</i> <i class="text-warning">step_size</i>, <i class="text-success">function</i> <i class="text-warning">on_click</i>)</h5>
<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">click_slider_float</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">int</i> <i class="text-warning">min_value</i>, <i class="text-success">int</i> <i class="text-warning">max_value</i>, <i class="text-success">int</i> <i class="text-warning">default_value</i>, <i class="text-success">int</i> <i class="text-warning">step_size</i>, <i class="text-success">function</i> <i class="text-warning">on_click</i>)</h5>
<p>Your <code>on_click</code> function will be called with <code>value</code> and <code>click_type</code>.</p>
<p>Note that the float variant is practically identical except the last 2 digits are indicated to be numbers after the decimal point.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">list_select</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">table&lt;int, table&gt;</i> <i class="text-warning">options</i>, <i class="text-success">int</i> <i class="text-warning">default_value</i>, <i class="text-success">function</i> <i class="text-warning">on_change</i>)</h5>
<p><code>options</code> must be table of list action item data or Label. List action item data is a table that contains at least a Label (menu_name), and can optionally have command_names and help_text.</p>
<p>Your <code>on_change</code> function will be called with the option's index, the option's menu_name, and previous option's index, and click_type as parameters.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">list_action</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">table&lt;int, table&gt;</i> <i class="text-warning">options</i>, <i class="text-success">function</i> <i class="text-warning">on_item_click</i>)</h5>
<p><code>options</code> must be table of list action item data or Label. List action item data is a table that contains at least a Label (menu_name), and can optionally have command_names and help_text.</p>
<p>Your <code>on_item_click</code> function will be called with the option's index, the option's menu_name, and click_type as parameters.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">text_input</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">function</i> <i class="text-warning">on_change</i>, <i class="text-success">string</i> <i class="text-warning">default_value</i> = <span class="text-danger">""</span>)</h5>
<p>Your <code>on_change</code> function will be called with the string and click type.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">colour</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">Colour</i> <i class="text-warning">default</i>, <i class="text-success">bool</i> <i class="text-warning">transparency</i>, <i class="text-success">function</i> <i class="text-warning">on_change</i>)</h5>
<p>Your <code>on_change</code> function will be called with a Colour as parameter.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">colour</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">number</i> <i class="text-warning">default_r</i>, <i class="text-success">number</i> <i class="text-warning">default_g</i>, <i class="text-success">number</i> <i class="text-warning">default_b</i>, <i class="text-success">number</i> <i class="text-warning">default_a</i>, <i class="text-success">bool</i> <i class="text-warning">transparency</i>, <i class="text-success">function</i> <i class="text-warning">on_change</i>)</h5>
<p>Your <code>on_change</code> function will be called with a Colour as parameter.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">rainbow</span>(<i class="text-success">CommandRef</i> <i class="text-warning">colour_command</i>)</h5>
<p>Creates a rainbow slider for the given colour command. This should be called right after creating the colour command.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">divider</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>)</h5>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">readonly</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">string</i> <i class="text-warning">value</i> = <span class="text-danger">""</span>)</h5>
<p>Pairs well with <code>menu.on_tick_in_viewport</code> and <code>menu.set_value</code>.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">hyperlink</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">string</i> <i class="text-warning">link</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i> = <span class="text-danger">""</span>)</h5>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">action_slider</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">table&lt;int, Label&gt;</i> <i class="text-warning">options</i>, <i class="text-success">function</i> <i class="text-warning">on_click</i>)</h5>
<p>We highly recommend using <code>menu.list_action</code> instead of this, unless the options are really unimportant.</p>
<p>Your <code>on_click</code> function will be called with the option's index, the option's value, and click_type as parameters.</p>

<h5><i class="text-success">CommandRef|CommandUniqPtr</i> menu.<span class="text-primary">slider_text</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>, <i class="text-success">table&lt;int, Label&gt;</i> <i class="text-warning">options</i>, <i class="text-success">function</i> <i class="text-warning">on_click</i>)</h5>
<p>We highly recommend using <code>menu.list_select</code> instead of this, unless the options are really unimportant.</p>
<p>Your <code>on_click</code> function will be called with the option's index, the option's value, and click_type as parameters.</p>

<h5><i class="text-success">void</i> menu.<span class="text-primary">delete</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">replace</span>(<i class="text-success">CommandRef</i> <i class="text-warning">old</i>, <i class="text-success">CommandUniqPtr</i> <i class="text-warning">new</i>)</h5>

<h5><i class="text-success">CommandUniqPtr</i> menu.<span class="text-primary">detach</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">attach</span>(<i class="text-success">CommandRef</i> <i class="text-warning">parent</i>, <i class="text-success">CommandUniqPtr</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">attach_after</span>(<i class="text-success">CommandRef</i> <i class="text-warning">anchor</i>, <i class="text-success">CommandUniqPtr</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">CommandRef</i> menu.<span class="text-primary">attach_before</span>(<i class="text-success">CommandRef</i> <i class="text-warning">anchor</i>, <i class="text-success">CommandUniqPtr</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">is_ref_valid</span>(<i class="text-success">CommandRef</i> <i class="text-warning">ref</i>)</h5>
<p>Returns if the referenced command still exists.</p>

<h5><i class="text-success">void</i> menu.<span class="text-primary">focus</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">table&lt;int, int&gt;</i> menu.<span class="text-primary">get_applicable_players</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">?bool</i> <i class="text-warning">include_user</i> = <span class="text-danger">nil</span>)</h5>

<h5><i class="text-success">int</i> menu.<span class="text-primary">collect_garbage</span>()</h5>
<p>Removes invalidated weakrefs from an internal vector. Stand does this automatically, but if you bulk-delete-or-replace commands, you might want to call this right after.</p>

<h5><i class="text-success">bool</i> menu.<span class="text-primary">is_open</span>()</h5>

<h5><i class="text-success">number, number</i> menu.<span class="text-primary">get_position</span>()</h5>
<p>Returns the menu grid origin x &amp; y.</p>

<h5><i class="text-success">number, number, number, number</i> menu.<span class="text-primary">get_main_view_position_and_size</span>()</h5>
<p>Returns x, y, width, &amp; height for the current main view (active list, warning, etc.).</p>

<h5><i class="text-success">string</i> menu.<span class="text-primary">get_active_list_cursor_text</span>(<i class="text-success">bool</i> <i class="text-warning">even_when_disabled</i> = <span class="text-danger">false</span>, <i class="text-success">bool</i> <i class="text-warning">even_when_inappropriate</i> = <span class="text-danger">false</span>)</h5>

<h5><i class="text-success">bool</i> menu.<span class="text-primary">are_tabs_visible</span>()</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">show_command_box</span>(<i class="text-success">string</i> <i class="text-warning">prefill</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">show_command_box_click_based</span>(<i class="text-success">int</i> <i class="text-warning">click_type</i>, <i class="text-success">string</i> <i class="text-warning">prefill</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">trigger_commands</span>(<i class="text-success">string</i> <i class="text-warning">input</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">trigger_command</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">string</i> <i class="text-warning">arg</i>)</h5>

<h5><i class="text-success">bool</i> menu.<span class="text-primary">command_box_is_open</span>()</h5>

<h5><i class="text-success">number, number, number, number</i> menu.<span class="text-primary">command_box_get_dimensions</span>()</h5>
<p>Returns x, y, width, &amp; height.</p>

<h5><i class="text-success">bool</i> menu.<span class="text-primary">is_in_screenshot_mode</span>()</h5>

<h5><i class="text-success">int</i> menu.<span class="text-primary">on_tick_in_viewport</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">function</i> <i class="text-warning">callback</i>)</h5>

<h5><i class="text-success">int</i> menu.<span class="text-primary">on_focus</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">function</i> <i class="text-warning">callback</i>)</h5>

<h5><i class="text-success">int</i> menu.<span class="text-primary">on_blur</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">function</i> <i class="text-warning">callback</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">remove_handler</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">int</i> <i class="text-warning">handler_id</i>)</h5>

<h5><i class="text-success">Label</i> menu.<span class="text-primary">get_menu_name</span>(<i class="text-success">CommandRef|CommandUniqPtr</i> <i class="text-warning">command</i>)</h5>
<p>You might want to use <code>lang.get_string</code> on the return value.</p>

<h5><i class="text-success">table&lt;int, string&gt;</i> menu.<span class="text-primary">get_command_names</span>(<i class="text-success">CommandRef|CommandUniqPtr</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">Label</i> menu.<span class="text-primary">get_help_text</span>(<i class="text-success">CommandRef|CommandUniqPtr</i> <i class="text-warning">command</i>)</h5>
<p>You might want to use <code>lang.get_string</code> on the return value.</p>

<h5><i class="text-success">bool</i> menu.<span class="text-primary">get_visible</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">int|bool|string</i> menu.<span class="text-primary">get_value</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">int</i> menu.<span class="text-primary">get_min_value</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">int</i> menu.<span class="text-primary">get_max_value</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">int</i> menu.<span class="text-primary">get_step_size</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">string</i> menu.<span class="text-primary">get_state</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">string</i> menu.<span class="text-primary">get_default_state</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_menu_name</span>(<i class="text-success">CommandRef|CommandUniqPtr</i> <i class="text-warning">command</i>, <i class="text-success">Label</i> <i class="text-warning">menu_name</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_command_names</span>(<i class="text-success">CommandRef|CommandUniqPtr</i> <i class="text-warning">command</i>, <i class="text-success">table&lt;any, string&gt;</i> <i class="text-warning">command_names</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_help_text</span>(<i class="text-success">CommandRef|CommandUniqPtr</i> <i class="text-warning">command</i>, <i class="text-success">Label</i> <i class="text-warning">help_text</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_visible</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">bool</i> <i class="text-warning">visible</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_value</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">int|bool|string</i> <i class="text-warning">value</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_min_value</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">int</i> <i class="text-warning">min_value</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_max_value</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">int</i> <i class="text-warning">max_value</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_step_size</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">int</i> <i class="text-warning">step_size</i>)</h5>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_list_action_options</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">table&lt;int, table&gt;</i> <i class="text-warning">options</i>)</h5>
<p>Also works for <code>list_select</code>.</p>

<h5><i class="text-success">void</i> menu.<span class="text-primary">set_action_slider_options</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">table&lt;int, Label&gt;</i> <i class="text-warning">options</i>)</h5>
<p>Also works for <code>slider_text</code>.</p>

<h5><i class="text-success">void</i> menu.<span class="text-primary">show_warning</span>(<i class="text-success">CommandRef</i> <i class="text-warning">command</i>, <i class="text-success">int</i> <i class="text-warning">click_type</i>, <i class="text-success">string</i> <i class="text-warning">message</i>, <i class="text-success">function</i> <i class="text-warning">proceed_callback</i>, <i class="text-success">?function</i> <i class="text-warning">cancel_callback</i> = <span class="text-danger">nil</span>, <i class="text-success">bool</i> <i class="text-warning">skippable</i> = <span class="text-danger">false</span>)</h5>
<p><code>skippable</code> will not have an effect when "Force Me To Read Warnings" is disabled.</p>

<h5><i class="text-success">int</i> menu.<span class="text-primary">get_activation_key_hash</span>()</h5>
<p>Returns a 32-bit integer derived from the user's activation key. 0 if no activation key.</p>

<h5><i class="text-success">int</i> menu.<span class="text-primary">get_edition</span>()</h5>
<p>Returns a value between 0 and 3 depending on the user's edition.</p>
<h3><a name="players-functions" href="#players-functions">§</a> Players Functions</h3>

<h5><i class="text-success">int</i> players.<span class="text-primary">on_join</span>(<i class="text-success">function</i> <i class="text-warning">callback</i>)</h5>
<p>Registers a function to be called when a player joins the session. Your callback will be called with the player id as argument.</p>
<p>Note that although your callback may yield, you should create all player commands in the same tick as you receive the event.</p>

<h5><i class="text-success">int</i> players.<span class="text-primary">on_leave</span>(<i class="text-success">function</i> <i class="text-warning">callback</i>)</h5>
<p>Registers a function to be called when a player leaves the session. Your callback will be called with the player id and name as arguments.</p>

<h5><i class="text-success">void</i> players.<span class="text-primary">dispatch_on_join</span>()</h5>
<p>Calls your join handler(s) for every player that is already in the session.</p>

<h5><i class="text-success">bool</i> players.<span class="text-primary">exists</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Checks if a player with the given id is in session.</p>

<h5><i class="text-success">int</i> players.<span class="text-primary">user</span>()</h5>
<p>Alternative to the <code>PLAYER.PLAYER_ID</code> native.</p>

<h5><i class="text-success">int</i> players.<span class="text-primary">user_ped</span>()</h5>
<p>Alternative to the <code>PLAYER.PLAYER_PED_ID</code> native.</p>

<h5><i class="text-success">table&lt;int, int&gt;</i> players.<span class="text-primary">list</span>(<i class="text-success">bool</i> <i class="text-warning">include_user</i> = <span class="text-danger">true</span>, <i class="text-success">bool</i> <i class="text-warning">include_friends</i> = <span class="text-danger">true</span>, <i class="text-success">bool</i> <i class="text-warning">include_strangers</i> = <span class="text-danger">true</span>)</h5>
<p>Returns an index-based table with all matching player ids.</p>

<h5><i class="text-success">table&lt;int, int&gt;</i> players.<span class="text-primary">list_all_with_excludes</span>(<i class="text-success">bool</i> <i class="text-warning">include_user</i> = <span class="text-danger">false</span>)</h5>
<p>Like players.list but using <code>Players &gt; All Players &gt; Excludes</code>.</p>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_host</span>()</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_script_host</span>()</h5>

<h5><i class="text-success">table&lt;int, int&gt;</i> players.<span class="text-primary">get_focused</span>()</h5>
<p>Returns an index-based table containing the ids of all players focused in the menu.</p>

<h5><i class="text-success">string</i> players.<span class="text-primary">get_name</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_rockstar_id</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>This value might be spoofed by <b>hard</b> RID spoofing.</p>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_rockstar_id_2</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>This value might be spoofed by <b>soft</b> RID spoofing.</p>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_connect_ip</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_connect_port</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_online_ip</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_online_port</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_rank</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_rp</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_money</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_wallet</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_bank</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">number</i> players.<span class="text-primary">get_kd</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_kills</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_deaths</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_language</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Returns the same as the <code>LOCALIZATION.GET_CURRENT_LANGUAGE</code> native.</p>

<h5><i class="text-success">bool</i> players.<span class="text-primary">is_using_controller</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">string</i> players.<span class="text-primary">get_name_with_tags</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">string</i> players.<span class="text-primary">get_tags_string</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">bool</i> players.<span class="text-primary">is_godmode</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">bool</i> players.<span class="text-primary">is_marked_as_modder</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Returns true if the player has the "Modder" tag.</p>

<h5><i class="text-success">bool</i> players.<span class="text-primary">is_marked_as_modder_or_admin</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Returns true if the player has the "Modder or Admin" tag.</p>

<h5><i class="text-success">bool</i> players.<span class="text-primary">is_marked_as_admin</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Returns true if the player has the "Admin" tag.</p>

<h5><i class="text-success">bool</i> players.<span class="text-primary">is_marked_as_attacker</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">bool</i> players.<span class="text-primary">is_otr</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">bool</i> players.<span class="text-primary">is_in_interior</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">string</i> players.<span class="text-primary">get_host_token</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Returns the player's host token as a decimal string.</p>

<h5><i class="text-success">string</i> players.<span class="text-primary">get_host_token_hex</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Returns the player's host token as a 16-character padded hex string.</p>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_boss</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Returns -1 if not applicable.</p>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_org_colour</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Returns -1 if not applicable.</p>

<h5><i class="text-success">string</i> players.<span class="text-primary">clan_get_motto</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">userdata</i> players.<span class="text-primary">get_position</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Works correctly at all distances.</p>

<h5><i class="text-success">int</i> players.<span class="text-primary">get_vehicle_model</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<p>Works at all distances, but best when the user is close to them.</p>

<h5><i class="text-success">void</i> players.<span class="text-primary">send_sms</span>(<i class="text-success">int</i> <i class="text-warning">recipient</i>, <i class="text-success">string</i> <i class="text-warning">text</i>)</h5>
<h5><i class="text-success">void</i> players.<span class="text-primary">send_sms</span>(<i class="text-success">int</i> <i class="text-warning">recipient</i>, <i class="text-success">int</i> <i class="text-warning">sender</i>, <i class="text-success">string</i> <i class="text-warning">text</i>)</h5>

<h5><i class="text-success">Vector3</i> players.<span class="text-primary">get_cam_pos</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>

<h5><i class="text-success">Vector3</i> players.<span class="text-primary">get_cam_rot</span>(<i class="text-success">int</i> <i class="text-warning">player_id</i>)</h5>
<h3><a name="entities-functions" href="#entities-functions">§</a> Entities Functions</h3>

<h5><i class="text-success">int</i> entities.<span class="text-primary">create_ped</span>(<i class="text-success">int</i> <i class="text-warning">type</i>, <i class="text-success">int</i> <i class="text-warning">hash</i>, <i class="text-success">Vector3</i> <i class="text-warning">pos</i>, <i class="text-success">number</i> <i class="text-warning">heading</i>)</h5>
<p>A wrapper for the <code>PED.CREATE_PED</code> native.</p>

<h5><i class="text-success">int</i> entities.<span class="text-primary">create_vehicle</span>(<i class="text-success">int</i> <i class="text-warning">hash</i>, <i class="text-success">Vector3</i> <i class="text-warning">pos</i>, <i class="text-success">number</i> <i class="text-warning">heading</i>)</h5>
<p>A wrapper for the <code>VEHICLE.CREATE_VEHICLE</code> native.</p>

<h5><i class="text-success">int</i> entities.<span class="text-primary">create_object</span>(<i class="text-success">int</i> <i class="text-warning">hash</i>, <i class="text-success">Vector3</i> <i class="text-warning">pos</i>)</h5>
<p>A wrapper for the <code>OBJECT.CREATE_OBJECT_NO_OFFSET</code> native.</p>

<h5><i class="text-success">int</i> entities.<span class="text-primary">get_user_vehicle_as_handle</span>()</h5>
<p>Returns the user's current vehicle, last driven vehicle, or <code>0</code>.</p>
<p>Shorthand for</p>
<pre><code><span class="text-danger">local</span> veh <span class="text-danger">=</span> PED.<span class="text-primary">GET_VEHICLE_PED_IS_IN</span>(PLAYER.<span class="text-primary">PLAYER_PED_ID</span>(), <span class="text-danger">false</span>)
<span class="text-danger">if not</span> ENTITY.<span class="text-primary">IS_ENTITY_A_VEHICLE</span>(veh) <span class="text-danger">then</span>
    veh <span class="text-danger">=</span> PED.<span class="text-primary">GET_VEHICLE_PED_IS_IN</span>(PLAYER.<span class="text-primary">PLAYER_PED_ID</span>(), <span class="text-danger">true</span>)
end
<span class="text-danger">if not</span> ENTITY.<span class="text-primary">IS_ENTITY_A_VEHICLE</span>(veh) <span class="text-danger">then</span>
    veh <span class="text-danger">=</span> 0
<span class="text-danger">end</span></code></pre>

<h5><i class="text-success">int</i> entities.<span class="text-primary">get_user_vehicle_as_pointer</span>()</h5>

<h5><i class="text-success">int</i> entities.<span class="text-primary">get_user_personal_vehicle_as_handle</span>()</h5>

<h5><i class="text-success">int</i> entities.<span class="text-primary">handle_to_pointer</span>(<i class="text-success">int</i> <i class="text-warning">handle</i>)</h5>
<p>Returns the address of the entity with the given script handle.</p>

<h5><i class="text-success">int</i> entities.<span class="text-primary">pointer_to_handle</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>Returns a script handle for the entity with the given address. This will force one to be allocated. Note that script handles are a limited resource.</p>

<h5><i class="text-success">table&lt;int, int&gt;</i> entities.<span class="text-primary">get_all_vehicles_as_handles</span>()</h5>
<p>This will force a script handle to be allocated for all vehicles. Note that script handles are a limited resource.</p>

<h5><i class="text-success">table&lt;int, int&gt;</i> entities.<span class="text-primary">get_all_vehicles_as_pointers</span>()</h5>

<h5><i class="text-success">table&lt;int, int&gt;</i> entities.<span class="text-primary">get_all_peds_as_handles</span>()</h5>
<p>This will force a script handle to be allocated for all peds. Note that script handles are a limited resource.</p>

<h5><i class="text-success">table&lt;int, int&gt;</i> entities.<span class="text-primary">get_all_peds_as_pointers</span>()</h5>

<h5><i class="text-success">table&lt;int, int&gt;</i> entities.<span class="text-primary">get_all_objects_as_handles</span>()</h5>
<p>This will force a script handle to be allocated for all objects. Note that script handles are a limited resource.</p>

<h5><i class="text-success">table&lt;int, int&gt;</i> entities.<span class="text-primary">get_all_objects_as_pointers</span>()</h5>

<h5><i class="text-success">table&lt;int, int&gt;</i> entities.<span class="text-primary">get_all_pickups_as_handles</span>()</h5>
<p>This will force a script handle to be allocated for all pickups. Note that script handles are a limited resource.</p>

<h5><i class="text-success">table&lt;int, int&gt;</i> entities.<span class="text-primary">get_all_pickups_as_pointers</span>()</h5>

<h5><i class="text-success">void</i> entities.<span class="text-primary">delete_by_handle</span>(<i class="text-success">int</i> <i class="text-warning">handle</i>)</h5>

<h5><i class="text-success">void</i> entities.<span class="text-primary">delete_by_pointer</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">int</i> entities.<span class="text-primary">get_model_hash</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">Vector3</i> entities.<span class="text-primary">get_position</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>The result might be less precise than the native counterpart.</p>

<h5><i class="text-success">Vector3</i> entities.<span class="text-primary">get_rotation</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>The result might be less precise than the native counterpart.</p>

<h5><i class="text-success">number</i> entities.<span class="text-primary">get_health</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">int</i> entities.<span class="text-primary">get_current_gear</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>Only applicable to vehicles.</p>

<h5><i class="text-success">void</i> entities.<span class="text-primary">set_current_gear</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>, <i class="text-success">int</i> <i class="text-warning">current_gear</i>)</h5>
<p>Only applicable to vehicles.</p>

<h5><i class="text-success">int</i> entities.<span class="text-primary">get_next_gear</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>Only applicable to vehicles.</p>

<h5><i class="text-success">void</i> entities.<span class="text-primary">set_next_gear</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>, <i class="text-success">int</i> <i class="text-warning">next_gear</i>)</h5>
<p>Only applicable to vehicles.</p>

<h5><i class="text-success">number</i> entities.<span class="text-primary">get_rpm</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>Only applicable to vehicles.</p>

<h5><i class="text-success">number</i> entities.<span class="text-primary">get_gravity</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>Only applicable to vehicles.</p>

<h5><i class="text-success">number</i> entities.<span class="text-primary">set_gravity</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>, <i class="text-success">number</i> <i class="text-warning">gravity</i>)</h5>
<p>Only applicable to vehicles.</p>

<h5><i class="text-success">number</i> entities.<span class="text-primary">set_gravity_multiplier</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>, <i class="text-success">number</i> <i class="text-warning">gravity_multiplier</i>)</h5>
<p>Only applicable to vehicles.</p>

<h5><i class="text-success">number</i> entities.<span class="text-primary">get_boost_charge</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>Only applicable to vehicles. Returns a value between 0.0 and 1.25.</p>

<h5><i class="text-success">int</i> entities.<span class="text-primary">get_draw_handler</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>Returns a pointer or 0.</p>

<h5><i class="text-success">int</i> entities.<span class="text-primary">vehicle_draw_handler_get_pearlecent_colour</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">int</i> entities.<span class="text-primary">vehicle_draw_handler_get_wheel_colour</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">bool</i> entities.<span class="text-primary">get_vehicle_has_been_owned_by_player</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">int</i> entities.<span class="text-primary">get_player_info</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>Only applicable to peds. Returns a pointer or 0.</p>

<h5><i class="text-success">int</i> entities.<span class="text-primary">player_info_get_game_state</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<h3><a name="chat-functions" href="#chat-functions">§</a> Chat Functions</h3>

<h5><i class="text-success">int</i> chat.<span class="text-primary">on_message</span>(<i class="text-success">function</i> <i class="text-warning">callback</i>)</h5>
<p>Registers a function to be called when a chat message is sent:</p>
<pre><code>chat.<span class="text-primary">on_message</span>(<span class="text-danger">function</span>(<span class="text-warning">sender</span>, <span class="text-warning">reserved</span>, <span class="text-warning">text</span>, <span class="text-warning">team_chat</span>, <span class="text-warning">networked</span>, <span class="text-warning">is_auto</span>)
    <span class="text-muted">-- Do stuff...</span>
<span class="text-danger">end</span>)</code></pre>

<h5><i class="text-success">void</i> chat.<span class="text-primary">send_message</span>(<i class="text-success">string</i> <i class="text-warning">text</i>, <i class="text-success">bool</i> <i class="text-warning">team_chat</i>, <i class="text-success">bool</i> <i class="text-warning">add_to_local_history</i>, <i class="text-success">bool</i> <i class="text-warning">networked</i>)</h5>
<p>As you might be aware, messages have a limit of 140 UTF-16 characters. However, that is only true for the normal input, as you can use up to 254 UTF-8 characters over the network, and many more for the local history.</p>

<h5><i class="text-success">void</i> chat.<span class="text-primary">send_targeted_message</span>(<i class="text-success">int</i> <i class="text-warning">recipient</i>, <i class="text-success">int</i> <i class="text-warning">sender</i>, <i class="text-success">string</i> <i class="text-warning">text</i>, <i class="text-success">bool</i> <i class="text-warning">team_chat</i>)</h5>
<p><code>sender</code> will only be respected when <code>recipient == players.user()</code>, otherwise <code>sender</code> will be forced to <code>players.user()</code>.</p>

<h5><i class="text-success">int</i> chat.<span class="text-primary">get_state</span>()</h5>
<p>Possible return values:</p>
<ul>
<li><code>0</code> = Closed</li>
<li><code>1</code> = Writing in team chat</li>
<li><code>2</code> = Writing in all chat</li>
</ul>

<h5><i class="text-success">bool</i> chat.<span class="text-primary">is_open</span>()</h5>

<h5><i class="text-success">void</i> chat.<span class="text-primary">open</span>()</h5>

<h5><i class="text-success">void</i> chat.<span class="text-primary">close</span>()</h5>

<h5><i class="text-success">string</i> chat.<span class="text-primary">get_draft</span>()</h5>
<p>Returns the message that the user is currently drafting or an empty string if not applicable.</p>

<h5><i class="text-success">void</i> chat.<span class="text-primary">ensure_open_with_empty_draft</span>(<i class="text-success">bool</i> <i class="text-warning">team_chat</i>)</h5>

<h5><i class="text-success">void</i> chat.<span class="text-primary">add_to_draft</span>(<i class="text-success">string</i> <i class="text-warning">appendix</i>)</h5>

<h5><i class="text-success">void</i> chat.<span class="text-primary">remove_from_draft</span>(<i class="text-success">int</i> <i class="text-warning">characters</i>)</h5>
<h3><a name="directx-functions" href="#directx-functions">§</a> DirectX Functions</h3>
<p>Any X and Y value must be between 0.0 to 1.0.</p>
<p>The <code>draw</code> functions are in the HUD coordinate space, which is superimposed 1920x1080. You can also append <code>_client</code> to any draw function, e.g. <code>draw_line_client</code> to draw in client coordinate space, which is based on the game window size.</p>

<h5><i class="text-success">int</i> directx.<span class="text-primary">create_texture</span>(<i class="text-success">string</i> <i class="text-warning">path</i>)</h5>
<p>An absolute path is recommended, e.g. by using <code>filesystem.resources_dir()</code>.</p>

<h5><i class="text-success">void</i> directx.<span class="text-primary">draw_texture</span>(<i class="text-success">int</i> <i class="text-warning">id</i>, <i class="text-success">number</i> <i class="text-warning">sizeX</i>, <i class="text-success">number</i> <i class="text-warning">sizeY</i>, <i class="text-success">number</i> <i class="text-warning">centerX</i>, <i class="text-success">number</i> <i class="text-warning">centerY</i>, <i class="text-success">number</i> <i class="text-warning">posX</i>, <i class="text-success">number</i> <i class="text-warning">posY</i>, <i class="text-success">number</i> <i class="text-warning">rotation</i>, <i class="text-success">Colour</i> <i class="text-warning">colour</i>)</h5>

<h5><i class="text-success">void</i> directx.<span class="text-primary">draw_texture</span>(<i class="text-success">int</i> <i class="text-warning">id</i>, <i class="text-success">number</i> <i class="text-warning">sizeX</i>, <i class="text-success">number</i> <i class="text-warning">sizeY</i>, <i class="text-success">number</i> <i class="text-warning">centerX</i>, <i class="text-success">number</i> <i class="text-warning">centerY</i>, <i class="text-success">number</i> <i class="text-warning">posX</i>, <i class="text-success">number</i> <i class="text-warning">posY</i>, <i class="text-success">number</i> <i class="text-warning">rotation</i>, <i class="text-success">number</i> <i class="text-warning">r</i>, <i class="text-success">number</i> <i class="text-warning">g</i>, <i class="text-success">number</i> <i class="text-warning">b</i>, <i class="text-success">number</i> <i class="text-warning">a</i>)</h5>

<h5><i class="text-success">void</i> directx.<span class="text-primary">draw_text</span>(<i class="text-success">number</i> <i class="text-warning">x</i>, <i class="text-success">number</i> <i class="text-warning">y</i>, <i class="text-success">string</i> <i class="text-warning">text</i>, <i class="text-success">int</i> <i class="text-warning">alignment</i>, <i class="text-success">number</i> <i class="text-warning">scale</i>, <i class="text-success">Colour</i> <i class="text-warning">colour</i>, <i class="text-success">bool</i> <i class="text-warning">force_in_bounds</i> = <span class="text-danger">false</span>)</h5>
<p><code>alignment</code> can be any of:</p>
<ul>
<li><code>ALIGN_TOP_LEFT</code></li>
<li><code>ALIGN_TOP_CENTRE</code></li>
<li><code>ALIGN_TOP_RIGHT</code></li>
<li><code>ALIGN_CENTRE_LEFT</code></li>
<li><code>ALIGN_CENTRE</code></li>
<li><code>ALIGN_CENTRE_RIGHT</code></li>
<li><code>ALIGN_BOTTOM_LEFT</code></li>
<li><code>ALIGN_BOTTOM_CENTRE</code></li>
<li><code>ALIGN_BOTTOM_RIGHT</code></li>
</ul>

<h5><i class="text-success">void</i> directx.<span class="text-primary">draw_rect</span>(<i class="text-success">number</i> <i class="text-warning">x</i>, <i class="text-success">number</i> <i class="text-warning">y</i>, <i class="text-success">number</i> <i class="text-warning">width</i>, <i class="text-success">number</i> <i class="text-warning">height</i>, <i class="text-success">Colour</i> <i class="text-warning">colour</i>)</h5>

<h5><i class="text-success">void</i> directx.<span class="text-primary">draw_line</span>(<i class="text-success">number</i> <i class="text-warning">x1</i>, <i class="text-success">number</i> <i class="text-warning">y1</i>, <i class="text-success">number</i> <i class="text-warning">x2</i>, <i class="text-success">number</i> <i class="text-warning">y2</i>, <i class="text-success">Colour</i> <i class="text-warning">colour</i>)</h5>

<h5><i class="text-success">void</i> directx.<span class="text-primary">draw_line</span>(<i class="text-success">number</i> <i class="text-warning">x1</i>, <i class="text-success">number</i> <i class="text-warning">y1</i>, <i class="text-success">number</i> <i class="text-warning">x2</i>, <i class="text-success">number</i> <i class="text-warning">y2</i>, <i class="text-success">Colour</i> <i class="text-warning">colour1</i>, <i class="text-success">Colour</i> <i class="text-warning">colour2</i>)</h5>

<h5><i class="text-success">void</i> directx.<span class="text-primary">draw_triangle</span>(<i class="text-success">number</i> <i class="text-warning">x1</i>, <i class="text-success">number</i> <i class="text-warning">y1</i>, <i class="text-success">number</i> <i class="text-warning">x2</i>, <i class="text-success">number</i> <i class="text-warning">y2</i>, <i class="text-success">number</i> <i class="text-warning">x3</i>, <i class="text-success">number</i> <i class="text-warning">y3</i>, <i class="text-success">Colour</i> <i class="text-warning">colour</i>)</h5>

<h5><i class="text-success">number, number</i> directx.<span class="text-primary">get_client_size</span>()</h5>

<h5><i class="text-success">number, number</i> directx.<span class="text-primary">get_text_size</span>(<i class="text-success">string</i> <i class="text-warning">text</i>, <i class="text-success">number</i> <i class="text-warning">scale</i> = <span class="text-danger">1.0</span>)</h5>
<p>Returns width and height.</p>

<h5><i class="text-success">number, number</i> directx.<span class="text-primary">pos_hud_to_client</span>(<i class="text-success">number</i> <i class="text-warning">x</i>, <i class="text-success">number</i> <i class="text-warning">y</i>)</h5>

<h5><i class="text-success">number, number</i> directx.<span class="text-primary">size_hud_to_client</span>(<i class="text-success">number</i> <i class="text-warning">x</i>, <i class="text-success">number</i> <i class="text-warning">y</i>)</h5>

<h5><i class="text-success">number, number</i> directx.<span class="text-primary">pos_client_to_hud</span>(<i class="text-success">number</i> <i class="text-warning">x</i>, <i class="text-success">number</i> <i class="text-warning">y</i>)</h5>

<h5><i class="text-success">number, number</i> directx.<span class="text-primary">size_client_to_hud</span>(<i class="text-success">number</i> <i class="text-warning">x</i>, <i class="text-success">number</i> <i class="text-warning">y</i>)</h5>

<h5><i class="text-success">int</i> directx.<span class="text-primary">blurrect_new</span>()</h5>

<h5><i class="text-success">void</i> directx.<span class="text-primary">blurrect_free</span>(<i class="text-success">int</i> <i class="text-warning">instance</i>)</h5>
<p>Frees an instance. This is automatically done for all instances your script has allocated but not freed once it finishes.</p>

<h5><i class="text-success">void</i> directx.<span class="text-primary">blurrect_draw</span>(<i class="text-success">int</i> <i class="text-warning">instance</i>, <i class="text-success">number</i> <i class="text-warning">x</i>, <i class="text-success">number</i> <i class="text-warning">y</i>, <i class="text-success">number</i> <i class="text-warning">width</i>, <i class="text-success">number</i> <i class="text-warning">height</i>, <i class="text-success">int</i> <i class="text-warning">strength</i>)</h5>
<p>Prefer to use 1 instance per region, as any draw with a different size requires the buffers to be reallocated.</p>
<p><code>strength</code> should be around 4 and can't exceed 255.</p>
<h3><a name="util-functions" href="#util-functions">§</a> Util Functions</h3>

<h5><i class="text-success">void</i> util.<span class="text-primary">require_natives</span>(<i class="text-success">int|string</i> <i class="text-warning">version</i>)</h5>
<p>Loads the natives lib with the provided version, installing it from the repository if needed.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">execute_in_os_thread</span>(<i class="text-success">function</i> <i class="text-warning">func</i>)</h5>
<p>Executes the given function in an OS thread to avoid holding up the game for expensive tasks like using require on a big file, creating lots of commands, or performing expensive calculations. Note that this will hold up your entire script, and calling natives or certain api functions in this context may lead to instabilities.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">require_no_lag</span>(<i class="text-success">string</i> <i class="text-warning">file</i>)</h5>
<p>Like <code>require</code>, but in an OS thread, to avoid holding up the game. Might not work for every library.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">create_tick_handler</span>(<i class="text-success">function</i> <i class="text-warning">func</i>)</h5>
<p>Registers the parameter-function to be called every tick until it returns <code>false</code>.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">try_run</span>(<i class="text-success">function</i> <i class="text-warning">func</i>)</h5>

<h5><i class="text-success">void</i> util.<span class="text-primary">keep_running</span>()</h5>
<p>Prevents Stand's idle script cleanup.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">yield</span>(<i class="text-success">?int</i> <i class="text-warning">wake_in_ms</i> = <span class="text-danger">nil</span>)</h5>
<p>Pauses the execution of the calling thread until the next tick or in <code>wake_in_ms</code> milliseconds.</p>
<p>If you're gonna create a "neverending" loop, don't forget to yield:</p>
<pre><code><span class="text-danger">while</span> <span class="text-primary">true</span> <span class="text-danger">do</span>
    <span class="text-muted">-- Code that runs every tick...</span>
    util.<span class="text-primary">yield</span>()
<span class="text-danger">end</span></code></pre>
<p>For simple loops, you should prefer <code>util.create_tick_handler</code>.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">create_thread</span>(<i class="text-success">function</i> <i class="text-warning">thread_func</i>, <i class="text-warning">...</i>)</h5>
<p>Creates the kind of thread that your script gets when it is created, or one of your callbacks is invoked, which is just another coroutine that gets resumed every tick and is expected to yield or return.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">stop_thread</span>()</h5>
<p>Stops the calling thread.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">restart_script</span>()</h5>

<h5><i class="text-success">void</i> util.<span class="text-primary">stop_script</span>()</h5>

<h5><i class="text-success">void</i> util.<span class="text-primary">on_stop</span>(<i class="text-success">function</i> <i class="text-warning">func</i>)</h5>
<p>Called in the final tick of your script. Yielding or creating threads in that context is undefined behaviour.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">toast</span>(<i class="text-success">string</i> <i class="text-warning">message</i>, <i class="text-success">int</i> <i class="text-warning">bitflags</i> = <span class="text-danger">TOAST_DEFAULT</span>)</h5>
<p>Possible bitflags:</p>
<ul>
<li><span class="text-danger">TOAST_ABOVE_MAP</span> — Uses Stand notifications if enabled</li>
<li><span class="text-danger">TOAST_LOGGER</span></li>
<li><span class="text-danger">TOAST_WEB</span></li>
<li><span class="text-danger">TOAST_CHAT</span></li>
<li><span class="text-danger">TOAST_CHAT_TEAM</span></li>
<li><span class="text-danger">TOAST_DEFAULT</span> — Equal to <code>(TOAST_ABOVE_MAP | TOAST_WEB)</code></li>
<li><span class="text-danger">TOAST_ALL</span> — Equal to <code>(TOAST_DEFAULT | TOAST_LOGGER)</code></li>
</ul>
<p>Note that the chat flags are mutually exclusive.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">log</span>(<i class="text-success">string</i> <i class="text-warning">message</i>)</h5>
<p>Alias for </p><pre><code>util.<span class="text-primary">toast</span>(message, <span class="text-danger">TOAST_LOGGER</span>)</code></pre><p></p>

<h5><i class="text-success">void</i> util.<span class="text-primary">draw_debug_text</span>(<i class="text-success">string</i> <i class="text-warning">text</i>)</h5>
<p>Draws the given text at the top left of the screen using the menu colour for the current frame.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">show_corner_help</span>(<i class="text-success">string</i> <i class="text-warning">message</i>)</h5>
<p>Shorthand for</p>
<pre><code>util.<span class="text-primary">BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED</span>(message)
<span class="text-danger">if not</span> HUD.<span class="text-primary">END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED</span>(0) <span class="text-danger">then</span>
    util.<span class="text-primary">BEGIN_TEXT_COMMAND_DISPLAY_HELP</span>(message)
    HUD.<span class="text-primary">END_TEXT_COMMAND_DISPLAY_HELP</span>(0, <span class="text-danger">false</span>, <span class="text-danger">true</span>, -1)
<span class="text-danger">end</span></code></pre>

<h5><i class="text-success">void</i> util.<span class="text-primary">replace_corner_help</span>(<i class="text-success">string</i> <i class="text-warning">message</i>, <i class="text-success">string</i> <i class="text-warning">replacement_message</i>)</h5>
<p>Shorthand for</p>
<pre><code>util.<span class="text-primary">BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED</span>(message)
<span class="text-danger">if</span> HUD.<span class="text-primary">END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED</span>(0) <span class="text-danger">then</span>
    util.<span class="text-primary">BEGIN_TEXT_COMMAND_DISPLAY_HELP</span>(replacement_message)
    HUD.<span class="text-primary">END_TEXT_COMMAND_DISPLAY_HELP</span>(0, <span class="text-danger">false</span>, <span class="text-danger">true</span>, -1)
<span class="text-danger">end</span></code></pre>

<h5><i class="text-success">void</i> util.<span class="text-primary">set_local_player_wanted_level</span>(<i class="text-success">int</i> <i class="text-warning">wanted_level</i>, <i class="text-success">bool</i> <i class="text-warning">no_drop</i> = <span class="text-danger">false</span>)</h5>
<p>Replacement for</p>
<pre><code><span class="text-danger">if</span> no_drop <span class="text-danger">then</span>
    PLAYER.<span class="text-primary">SET_PLAYER_WANTED_LEVEL_NO_DROP</span>(PLAYER.<span class="text-primary">PLAYER_ID</span>(), wanted_level, <span class="text-danger">false</span>)
<span class="text-danger">else</span>
    PLAYER.<span class="text-primary">SET_PLAYER_WANTED_LEVEL</span>(PLAYER.<span class="text-primary">PLAYER_ID</span>(), wanted_level, <span class="text-danger">false</span>)
<span class="text-danger">end</span>
PLAYER.<span class="text-primary">SET_PLAYER_WANTED_LEVEL_NOW</span>(PLAYER.<span class="text-primary">PLAYER_ID</span>(), <span class="text-danger">false</span>)</code></pre>
<p>using pointers to avoid potentially tripping anti-cheat.</p>

<h5><i class="text-success">int</i> util.<span class="text-primary">joaat</span>(<i class="text-success">string</i> <i class="text-warning">text</i>)</h5>
<p>JOAAT stands for Jenkins One At A Time which is the name of the hashing algorithm used pretty much everywhere in GTA.</p>

<h5><i class="text-success">string</i> util.<span class="text-primary">reverse_joaat</span>(<i class="text-success">int</i> <i class="text-warning">hash</i>)</h5>
<p>Returns an empty string if the given hash is not found in Stand's dictionaries.</p>

<h5><i class="text-success">bool</i> util.<span class="text-primary">is_this_model_a_blimp</span>(<i class="text-success">int|string</i> <i class="text-warning">model</i>)</h5>

<h5><i class="text-success">bool</i> util.<span class="text-primary">is_this_model_an_object</span>(<i class="text-success">int|string</i> <i class="text-warning">model</i>)</h5>

<h5><i class="text-success">bool</i> util.<span class="text-primary">is_this_model_a_submarine</span>(<i class="text-success">int|string</i> <i class="text-warning">model</i>)</h5>

<h5><i class="text-success">bool</i> util.<span class="text-primary">is_this_model_a_trailer</span>(<i class="text-success">int|string</i> <i class="text-warning">model</i>)</h5>

<h5><i class="text-success">table&lt;int, table&gt;</i> util.<span class="text-primary">get_vehicles</span>()</h5>
<p>Returns an index-based table with a table for each vehicle in the game. The inner tables contain <code>name</code> and <code>manufacturer</code>.</p>

<h5><i class="text-success">table&lt;int, table&gt;</i> util.<span class="text-primary">get_weapons</span>()</h5>
<p>Returns an index-based table with a table for each weapon in the game. The inner tables contain <code>hash</code>, <code>label_key</code>, <code>category</code>, &amp; <code>category_id</code>. Note that the categories are specific to Stand.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">BEGIN_TEXT_COMMAND_DISPLAY_TEXT</span>(<i class="text-success">string</i> <i class="text-warning">message</i>)</h5>
<p>Replacement for</p>
<pre><code>HUD.<span class="text-primary">BEGIN_TEXT_COMMAND_DISPLAY_TEXT</span>(<span class="text-warning">"STRING"</span>)
HUD.<span class="text-primary">ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME</span>(message)</code></pre>
<p>which increases your message's character limit.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">_BEGIN_TEXT_COMMAND_LINE_COUNT</span>(<i class="text-success">string</i> <i class="text-warning">message</i>)</h5>
<p>Replacement for</p>
<pre><code>HUD.<span class="text-primary">_BEGIN_TEXT_COMMAND_LINE_COUNT</span>(<span class="text-warning">"STRING"</span>)
HUD.<span class="text-primary">ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME</span>(message)</code></pre>
<p>which increases your message's character limit.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED</span>(<i class="text-success">string</i> <i class="text-warning">message</i>)</h5>
<p>Replacement for</p>
<pre><code>HUD.<span class="text-primary">BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED</span>(<span class="text-warning">"STRING"</span>)
HUD.<span class="text-primary">ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME</span>(message)</code></pre>
<p>which increases your message's character limit.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">BEGIN_TEXT_COMMAND_DISPLAY_HELP</span>(<i class="text-success">string</i> <i class="text-warning">message</i>)</h5>
<p>Replacement for</p>
<pre><code>HUD.<span class="text-primary">BEGIN_TEXT_COMMAND_DISPLAY_HELP</span>(<span class="text-warning">"STRING"</span>)
HUD.<span class="text-primary">ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME</span>(message)</code></pre>
<p>which increases your message's character limit.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">_BEGIN_TEXT_COMMAND_GET_WIDTH</span>(<i class="text-success">string</i> <i class="text-warning">message</i>)</h5>
<p>Replacement for</p>
<pre><code>HUD.<span class="text-primary">_BEGIN_TEXT_COMMAND_GET_WIDTH</span>(<span class="text-warning">"STRING"</span>)
HUD.<span class="text-primary">ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME</span>(message)</code></pre>
<p>which increases your message's character limit.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">BEGIN_TEXT_COMMAND_THEFEED_POST</span>(<i class="text-success">string</i> <i class="text-warning">message</i>)</h5>
<p>Replacement for</p>
<pre><code>HUD.<span class="text-primary">BEGIN_TEXT_COMMAND_THEFEED_POST</span>(<span class="text-warning">"STRING"</span>)
HUD.<span class="text-primary">ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME</span>(message)</code></pre>
<p>which increases your message's character limit.</p>

<h5><i class="text-success">int</i> util.<span class="text-primary">get_rp_required_for_rank</span>(<i class="text-success">int</i> <i class="text-warning">rank</i>)</h5>

<h5><i class="text-success">int</i> util.<span class="text-primary">get_session_players_bitflag</span>()</h5>

<h5><i class="text-success">void</i> util.<span class="text-primary">trigger_script_event</span>(<i class="text-success">int</i> <i class="text-warning">session_player_bitflags</i>, <i class="text-success">table&lt;any, int&gt;</i> <i class="text-warning">data</i>)</h5>
<p><i>session_player_bitflags</i> has a bit set to <code>1</code> for every player that should receive the script event; you can use <code>util.get_session_players_bitflag()</code> if you intend for everyone to receive the script event or use <code>1 &lt;&lt; player_id</code> to target individual players.</p>

<h5><i class="text-success">int</i> util.<span class="text-primary">current_time_millis</span>()</h5>

<h5><i class="text-success">int</i> util.<span class="text-primary">current_unix_time_seconds</span>()</h5>
<p>Returns how many seconds have passed since the UNIX epoch (00:00:00 UTC on 1 January 1970).</p>

<h5><i class="text-success">int</i> util.<span class="text-primary">remove_handler</span>(<i class="text-success">int</i> <i class="text-warning">handler_id</i>)</h5>

<h5><i class="text-success">bool</i> util.<span class="text-primary">is_session_started</span>()</h5>

<h5><i class="text-success">bool</i> util.<span class="text-primary">is_session_transition_active</span>()</h5>

<h5><i class="text-success">int</i> util.<span class="text-primary">get_char_slot</span>()</h5>

<h5><i class="text-success">bool, number</i> util.<span class="text-primary">get_ground_z</span>(<i class="text-success">number</i> <i class="text-warning">x</i>, <i class="text-success">number</i> <i class="text-warning">y</i>, <i class="text-success">number</i> <i class="text-warning">z_hint</i> = <span class="text-danger">1000.0</span>)</h5>
<p>The most precise way to get the ground Z coordinate which respects water.</p>
<p>The ground Z will be below the <code>z_hint</code>.</p>
<p>If the bool return value is <code>true</code>, the number is the ground Z. If not, you should try again next tick. You may want to count the calls you made and abort after a certain amount of calls with the bool being <code>false</code>.</p>

<h5><i class="text-success">bool</i> util.<span class="text-primary">spoof_script</span>(<i class="text-success">string|int</i> <i class="text-warning">script</i>, <i class="text-success">function</i> <i class="text-warning">func</i>)</h5>
<p>If the provided script is not running, your function is not called and this returns <code>false</code>.</p>

<h5><i class="text-success">bool</i> util.<span class="text-primary">remove_blip</span>(<i class="text-success">int</i> <i class="text-warning">blip</i>)</h5>

<h5><i class="text-success">void</i> util.<span class="text-primary">arspinner_enable</span>()</h5>

<h5><i class="text-success">void</i> util.<span class="text-primary">arspinner_disable</span>()</h5>

<h5><i class="text-success">bool</i> util.<span class="text-primary">is_bigmap_active</span>()</h5>

<h5><i class="text-success">void</i> util.<span class="text-primary">copy_to_clipboard</span>(<i class="text-success">string</i> <i class="text-warning">text</i>, <i class="text-success">bool</i> <i class="text-warning">notify</i> = <span class="text-danger">true</span>)</h5>

<h5><i class="text-success">string</i> util.<span class="text-primary">get_clipboard_text</span>()</h5>

<h5><i class="text-success">table&lt;string,string&gt;</i> util.<span class="text-primary">read_colons_and_tabs_file</span>(<i class="text-success">string</i> <i class="text-warning">file</i>)</h5>
<p>Allows you to read a file in the colons and tabs format, which is what Stand uses for profiles, hotkeys, etc.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">write_colons_file</span>(<i class="text-success">string</i> <i class="text-warning">file</i>, <i class="text-success">table&lt;string,string&gt;</i> <i class="text-warning">data</i>)</h5>
<p>Allows you to write a file in the colons <del>and tabs</del> format.</p>

<h5><i class="text-success">void</i> util.<span class="text-primary">draw_ar_beacon</span>(<i class="text-success">Vector3</i> <i class="text-warning">pos</i>)</h5>

<h5><i class="text-success">void</i> util.<span class="text-primary">draw_box</span>(<i class="text-success">Vector3</i> <i class="text-warning">pos</i>, <i class="text-success">Vector3</i> <i class="text-warning">rot</i>, <i class="text-success">Vector3</i> <i class="text-warning">dimensions</i>, <i class="text-success">int</i> <i class="text-warning">r</i>, <i class="text-success">int</i> <i class="text-warning">g</i>, <i class="text-success">int</i> <i class="text-warning">b</i>, <i class="text-success">int</i> <i class="text-warning">a</i> = <span class="text-danger">255</span>)</h5>
<p>Draws a box with 3d rotation using polys. Note that backfaceculling applies to the inside.</p>

<h5><i class="text-success">bool</i> util.<span class="text-primary">request_script_host</span>(<i class="text-success">string|int</i> <i class="text-warning">script</i>)</h5>

<h5><i class="text-success">bool</i> util.<span class="text-primary">register_file</span>(<i class="text-success">string</i> <i class="text-warning">path</i>)</h5>
<p>Registers the given file in the game so it can be used with natives, e.g. <code>util.register_file(filesystem.resources_dir() .. "myscript.ytd")</code> will allow you to use "myscript" as a texture dict for GRAPHICS natives.</p>

<h5><i class="text-success">string</i> util.<span class="text-primary">get_label_text</span>(<i class="text-success">string</i> <i class="text-warning">label_name</i>)</h5>
<p>Same as <code>HUD._GET_LABEL_TEXT</code> except it will bypass any replacements Stand might be making.</p>

<h5><i class="text-success">string</i> util.<span class="text-primary">register_label</span>(<i class="text-success">string</i> <i class="text-warning">text</i>)</h5>
<p>Registers a label, such that it can be used with <code>HUD._GET_LABEL_TEXT</code> and other natives.</p>

<h5><i class="text-success">bool</i> util.<span class="text-primary">is_key_down</span>(<i class="text-success">int|string</i> <i class="text-warning">vk</i>)</h5>
<p><code>vk</code> int values can be found at <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes" target="_blank" rel="noreferrer noopener">https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes</a></p>
<p><code>vk</code> may also be a string, if it contains a single character and that character is A-Z, 0-9, or a space.</p>

<h5><i class="text-success">int</i> util.<span class="text-primary">call_foreign_function</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>, <i class="text-success">int|userdata|string</i> <i class="text-danger">...</i>)</h5>

<h5><i class="text-success">string</i> util.<span class="text-primary">get_rtti_name</span>(<i class="text-success">int</i> <i class="text-warning">inst_addr</i>)</h5>

<h5><i class="text-success">string</i> util.<span class="text-primary">get_rtti_hierarchy</span>(<i class="text-success">int</i> <i class="text-warning">inst_addr</i>)</h5>

<h5><i class="text-success">void</i> util.<span class="text-primary">set_particle_fx_asset</span>(<i class="text-success">int|string</i> <i class="text-warning">hash</i>)</h5>

<h5><i class="text-success">int</i> util.<span class="text-primary">blip_handle_to_pointer</span>(<i class="text-success">int</i> <i class="text-warning">blip_handle</i>)</h5>

<h5><i class="text-success">int</i> util.<span class="text-primary">get_blip_display</span>(<i class="text-success">int</i> <i class="text-warning">blip_handle</i>)</h5>

<h5><i class="text-success">int</i> util.<span class="text-primary">teleport_2d</span>(<i class="text-success">number</i> <i class="text-warning">x</i>, <i class="text-success">number</i> <i class="text-warning">y</i>)</h5>

<h5><i class="text-success">bool</i> util.<span class="text-primary">is_interaction_menu_open</span>()</h5>

<h5><i class="text-success">int</i> util.<span class="text-primary">on_transition_finished</span>(<i class="text-success">function</i> <i class="text-warning">callback</i>)</h5>
<h3><a name="v3-functions" href="#v3-functions">§</a> V3 Functions</h3>

<h5><i class="text-success">userdata</i> v3.<span class="text-primary">new</span>(<i class="text-success">float</i> <i class="text-warning">x</i>, <i class="text-success">float</i> <i class="text-warning">y</i>, <i class="text-success">float</i> <i class="text-warning">z</i>)</h5>
<h5><i class="text-success">userdata</i> v3.<span class="text-primary">new</span>(<i class="text-success">Vector3</i> <i class="text-warning">pos</i>)</h5>
<h5><i class="text-success">userdata</i> v3.<span class="text-primary">new</span>()</h5>
<p>Creates a new v3 instance, which can be used anywhere a <code>Vector3</code> or <code>Vector3*</code> is accepted.</p>
<p>As an alternative to <code>v3.new(...)</code>, you can also use <code>v3(...)</code>.</p>
<p>Furthermore, all following functions can be called on a v3 instance using the <code>:</code> syntax.</p>

<h5><i class="text-success">float, float, float</i> v3.<span class="text-primary">get</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">float</i> v3.<span class="text-primary">getX</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">float</i> v3.<span class="text-primary">getY</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">float</i> v3.<span class="text-primary">getZ</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">float</i> v3.<span class="text-primary">getHeading</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">void</i> v3.<span class="text-primary">set</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>, <i class="text-success">float</i> <i class="text-warning">x</i>, <i class="text-success">float</i> <i class="text-warning">y</i>, <i class="text-success">float</i> <i class="text-warning">z</i>)</h5>

<h5><i class="text-success">void</i> v3.<span class="text-primary">setX</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>, <i class="text-success">float</i> <i class="text-warning">x</i>)</h5>

<h5><i class="text-success">void</i> v3.<span class="text-primary">setY</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>, <i class="text-success">float</i> <i class="text-warning">y</i>)</h5>

<h5><i class="text-success">void</i> v3.<span class="text-primary">setZ</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>, <i class="text-success">float</i> <i class="text-warning">z</i>)</h5>

<h5><i class="text-success">void</i> v3.<span class="text-primary">reset</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">void</i> v3.<span class="text-primary">add</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>, <i class="text-success">userdata|int</i> <i class="text-warning">b</i>)</h5>
<p>Adds <code>b</code> to <code>a</code>.</p>

<h5><i class="text-success">void</i> v3.<span class="text-primary">sub</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>, <i class="text-success">userdata|int</i> <i class="text-warning">b</i>)</h5>
<p>Subtracts <code>b</code> from <code>a</code>.</p>

<h5><i class="text-success">void</i> v3.<span class="text-primary">mul</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>, <i class="text-success">number</i> <i class="text-warning">f</i>)</h5>
<p>Multiplies <code>a</code> by <code>f</code>.</p>

<h5><i class="text-success">void</i> v3.<span class="text-primary">div</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>, <i class="text-success">number</i> <i class="text-warning">f</i>)</h5>
<p>Divides <code>a</code> by <code>f</code>.</p>

<h5><i class="text-success">bool</i> v3.<span class="text-primary">eq</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>, <i class="text-success">userdata|int</i> <i class="text-warning">b</i>)</h5>

<h5><i class="text-success">number</i> v3.<span class="text-primary">magnitude</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>)</h5>
<p>Alternatively, you can use the <code>#</code> syntax on a v3 instance to get its magnitude.</p>

<h5><i class="text-success">number</i> v3.<span class="text-primary">distance</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>, <i class="text-success">int</i> <i class="text-warning">b</i>)</h5>

<h5><i class="text-success">void</i> v3.<span class="text-primary">abs</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>
<p>Ensures that every axis is positive.</p>

<h5><i class="text-success">void</i> v3.<span class="text-primary">sum</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">float</i> v3.<span class="text-primary">min</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>
<p>Returns the value of the smallest axis.</p>

<h5><i class="text-success">float</i> v3.<span class="text-primary">max</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>
<p>Returns the value of the biggest axis.</p>

<h5><i class="text-success">number</i> v3.<span class="text-primary">dot</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>, <i class="text-success">int</i> <i class="text-warning">b</i>)</h5>

<h5><i class="text-success">void</i> v3.<span class="text-primary">normalise</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">userdata</i> v3.<span class="text-primary">crossProduct</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>, <i class="text-success">int</i> <i class="text-warning">b</i>)</h5>
<p>The result is a new instance.</p>

<h5><i class="text-success">userdata</i> v3.<span class="text-primary">toRot</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>
<p>The result is a new instance with rotation data.</p>

<h5><i class="text-success">userdata</i> v3.<span class="text-primary">lookAt</span>(<i class="text-success">userdata|int</i> <i class="text-warning">a</i>, <i class="text-success">int</i> <i class="text-warning">b</i>)</h5>
<p>The result is a new instance with rotation data.</p>

<h5><i class="text-success">userdata</i> v3.<span class="text-primary">toDir</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>
<p>The result is a new instance with direction data. The direction vector will have a magnitude of 1 / it is a unit vector, so you can safely multiply it.</p>
<p>Note that Stand expects/uses what is rotation order 2 for RAGE.</p>

<h5><i class="text-success">string</i> v3.<span class="text-primary">toString</span>(<i class="text-success">userdata|int</i> <i class="text-warning">addr</i>)</h5>
<h3><a name="lang-functions" href="#lang-functions">§</a> Lang Functions</h3>

<h5><i class="text-success">string</i> lang.<span class="text-primary">get_current</span>()</h5>
<p>Returns the current menu language, which could be a 2-letter language code, <code>"en-us"</code>, <code>"sex"</code>, <code>"uwu"</code>, or <code>"hornyuwu"</code>.</p>

<h5><i class="text-success">int</i> lang.<span class="text-primary">register</span>(<i class="text-success">string</i> <i class="text-warning">text</i>)</h5>
<p>Text is assumed to be in English (UK).</p>

<h5><i class="text-success">void</i> lang.<span class="text-primary">set_translate</span>(<i class="text-success">string</i> <i class="text-warning">lang_code</i>)</h5>
<p>Starts the process of translating labels. <code>lang_code</code> must be a 2-letter language code or <code>"sex"</code>.</p>

<h5><i class="text-success">void</i> lang.<span class="text-primary">translate</span>(<i class="text-success">int</i> <i class="text-warning">label</i>, <i class="text-success">string</i> <i class="text-warning">text</i>)</h5>

<h5><i class="text-success">int</i> lang.<span class="text-primary">find</span>(<i class="text-success">string</i> <i class="text-warning">text</i>, <i class="text-success">string</i> <i class="text-warning">lang_code</i> = <span class="text-danger">"en"</span>)</h5>
<p>Finds an existing label using its text. Returns 0 if not found. <code>lang_code</code> must be a 2-letter language code or <code>"sex"</code>.</p>

<h5><i class="text-success">string</i> lang.<span class="text-primary">get_string</span>(<i class="text-success">Label</i> <i class="text-warning">label</i>, <i class="text-success">string</i> <i class="text-warning">lang_code</i> = <span class="text-danger">"en"</span>)</h5>
<p><code>lang_code</code> must be a 2-letter language code, <code>"en-us"</code>, <code>"sex"</code>, <code>"uwu"</code>, or <code>"hornyuwu"</code>.</p>

<h5><i class="text-success">string</i> lang.<span class="text-primary">get_code_for_soup</span>(<i class="text-success">string</i> <i class="text-warning">lang_code</i>)</h5>
<h3><a name="filesystem-functions" href="#filesystem-functions">§</a> Filesystem Functions</h3>

<h5><i class="text-success">string</i> filesystem.<span class="text-primary">appdata_dir</span>()</h5>
<p>Possible return value: <code>C:\Users\John\AppData\Roaming\</code></p>

<h5><i class="text-success">string</i> filesystem.<span class="text-primary">stand_dir</span>()</h5>
<p>Possible return value: <code>C:\Users\John\AppData\Roaming\Stand\</code></p>

<h5><i class="text-success">string</i> filesystem.<span class="text-primary">scripts_dir</span>()</h5>
<p>Possible return value: <code>C:\Users\John\AppData\Roaming\Stand\Lua Scripts\</code></p>

<h5><i class="text-success">string</i> filesystem.<span class="text-primary">resources_dir</span>()</h5>
<p>Possible return value: <code>C:\Users\John\AppData\Roaming\Stand\Lua Scripts\resources\</code></p>
<p>That is the directory dedicated to static content for scripts, e.g. a logo.</p>

<h5><i class="text-success">string</i> filesystem.<span class="text-primary">store_dir</span>()</h5>
<p>Possible return value: <code>C:\Users\John\AppData\Roaming\Stand\Lua Scripts\store\</code></p>
<p>That is the directory dedicated to dynamic content for scripts, e.g. user configuration that can't be dealt with by proper usage of the state system.</p>
<p>This function also creates the "store" directory if it doesn't exist.</p>

<h5><i class="text-success">bool</i> filesystem.<span class="text-primary">exists</span>(<i class="text-success">string</i> <i class="text-warning">path</i>)</h5> 

<h5><i class="text-success">bool</i> filesystem.<span class="text-primary">is_regular_file</span>(<i class="text-success">string</i> <i class="text-warning">path</i>)</h5>

<h5><i class="text-success">bool</i> filesystem.<span class="text-primary">is_dir</span>(<i class="text-success">string</i> <i class="text-warning">path</i>)</h5>

<h5><i class="text-success">void</i> filesystem.<span class="text-primary">mkdir</span>(<i class="text-success">string</i> <i class="text-warning">path</i>)</h5>

<h5><i class="text-success">void</i> filesystem.<span class="text-primary">mkdirs</span>(<i class="text-success">string</i> <i class="text-warning">path</i>)</h5>

<h5><i class="text-success">table&lt;int, string&gt;</i> filesystem.<span class="text-primary">list_files</span>(<i class="text-success">string</i> <i class="text-warning">path</i>)</h5>
<p>Returns an index-based table with all files in the given directory.</p>
<pre><code><span class="text-danger">for</span> i, path <span class="text-danger">in</span> <span class="text-primary">ipairs</span>(filesystem.<span class="text-primary">list_files</span>(filesystem.<span class="text-primary">scripts_dir</span>())) <span class="text-danger">do</span>
    util.<span class="text-primary">log</span>(path)
<span class="text-danger">end</span></code></pre>
<p>Note that directories in the resulting table don't end on a <code>\</code>.</p>
<h3><a name="async-http-functions" href="#async-http-functions">§</a> Async HTTP Functions</h3>

<h5><i class="text-success">void</i> async_http.<span class="text-primary">init</span>(<i class="text-success">string</i> <i class="text-warning">host</i>, <i class="text-success">string</i> <i class="text-warning">path</i>, <i class="text-success">?function</i> <i class="text-warning">success_func</i> = <span class="text-danger">nil</span>, <i class="text-success">?function</i> <i class="text-warning">fail_func</i> = <span class="text-danger">nil</span>)</h5>
<p>This will make a GET request unless you use <code>async_http.set_post</code> before calling <code>async_http.dispatch</code>.</p>
<p>On success, your <code>success_func</code> will be called with <code>body, header_fields, status_code</code>, if your script is still alive when the request finishes; the lifetimes are independent.</p>

<h5><i class="text-success">void</i> async_http.<span class="text-primary">dispatch</span>()</h5>
<p>Finish building the async http request and carry it out in separate OS thread.</p>

<h5><i class="text-success">void</i> async_http.<span class="text-primary">set_post</span>(<i class="text-success">string</i> <i class="text-warning">content_type</i>, <i class="text-success">string</i> <i class="text-warning">payload</i>)</h5>
<p>Changes the request method, adds <code>Content-Type</code> and <code>Content-Length</code> headers, and sets the payload.</p>
<p>Examples of <code>content_type</code>:</p>
<ul>
<li><code>application/json</code></li>
<li><code>application/x-www-form-urlencoded; charset=UTF-8</code></li>
</ul>

<h5><i class="text-success">void</i> async_http.<span class="text-primary">add_header</span>(<i class="text-success">string</i> <i class="text-warning">key</i>, <i class="text-success">string</i> <i class="text-warning">value</i>)</h5>
<h3><a name="memory-functions" href="#memory-functions">§</a> Memory Functions</h3>

<h5><i class="text-success">int</i> memory.<span class="text-primary">script_global</span>(<i class="text-success">int</i> <i class="text-warning">global</i>)</h5>
<p>Returns the address of the given script global.</p>

<h5><i class="text-success">int</i> memory.<span class="text-primary">script_local</span>(<i class="text-success">string|int</i> <i class="text-warning">script</i>, <i class="text-success">int</i> <i class="text-warning">local</i>)</h5>
<p>Returns the address of the given script local or 0 if the script was not found.</p>

<h5><i class="text-success">userdata</i> memory.<span class="text-primary">alloc</span>(<i class="text-success">int</i> <i class="text-warning">size</i> = <span class="text-danger">24</span>)</h5>
<p>The default size is 24 so it can fit a Vector3.</p>

<h5><i class="text-success">userdata</i> memory.<span class="text-primary">alloc_int</span>()</h5>
<p>Allocates 4 bytes.</p>

<h5><i class="text-success">int</i> memory.<span class="text-primary">scan</span>(<i class="text-success">string</i> <i class="text-warning">pattern</i>)</h5>
<p>Scans the game's memory for the given IDA-style pattern. This is an expensive call so ideally you'd only ever scan for a pattern once and then use the resulting address until your script finishes.</p>

<h5><i class="text-success">int</i> memory.<span class="text-primary">rip</span>(<i class="text-success">int</i> <i class="text-warning">addr</i>)</h5>
<p>Follows an offset from the instruction pointer ("RIP") at the given address.</p>
<p>So, whereas in C++ you might do something like this:</p>
<pre><code>memory::<span class="text-primary">scan</span>(<span class="text-warning">"4C 8D 05 ? ? ? ? 48 8D 15 ? ? ? ? 48 8B C8 E8 ? ? ? ? 48 8D 15 ? ? ? ? 48 8D 4C 24 20 E8"</span>).<span class="text-primary">add</span>(3).<span class="text-primary">rip</span>().<span class="text-primary">as</span>&lt;<i class="text-success">const char*</i>&gt;();</code></pre>
<p>You'd do this in Lua (with a check for null-pointer because we're smart):</p>
<pre><code><span class="text-danger">local</span> addr <span class="text-danger">=</span> memory.<span class="text-primary">scan</span>(<span class="text-warning">"4C 8D 05 ? ? ? ? 48 8D 15 ? ? ? ? 48 8B C8 E8 ? ? ? ? 48 8D 15 ? ? ? ? 48 8D 4C 24 20 E8"</span>)
<span class="text-danger">if</span> addr <span class="text-danger">==</span> 0 <span class="text-danger">then</span>
    util.<span class="text-primary">toast</span>(<span class="text-warning">"pattern scan failed"</span>)
<span class="text-danger">else</span>
    util.<span class="text-primary">toast</span>(memory.<span class="text-primary">read_string</span>(memory.<span class="text-primary">rip</span>(addr <span class="text-danger">+</span> 3)))
<span class="text-danger">end</span></code></pre>

<h5><i class="text-success">lightuserdata</i> memory.<span class="text-primary">addrof</span>(<i class="text-success">userdata</i> <i class="text-warning">ud</i>)</h5>

<h5><i class="text-success">int</i> memory.<span class="text-primary">read_byte</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>)</h5>
<p>Reads an 8-bit integer at the given address.</p>

<h5><i class="text-success">int</i> memory.<span class="text-primary">read_ubyte</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>)</h5>
<p>Reads an unsigned 8-bit integer at the given address.</p>

<h5><i class="text-success">int</i> memory.<span class="text-primary">read_short</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>)</h5>
<p>Reads a 16-bit integer at the given address.</p>

<h5><i class="text-success">int</i> memory.<span class="text-primary">read_ushort</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>)</h5>
<p>Reads an unsigned 16-bit integer at the given address.</p>

<h5><i class="text-success">int</i> memory.<span class="text-primary">read_int</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>)</h5>
<p>Reads a 32-bit integer at the given address.</p>

<h5><i class="text-success">int</i> memory.<span class="text-primary">read_uint</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>)</h5>
<p>Reads an unsigned 32-bit integer at the given address.</p>

<h5><i class="text-success">int</i> memory.<span class="text-primary">read_long</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>)</h5>
<p>Reads a 64-bit integer at the given address.</p>

<h5><i class="text-success">number</i> memory.<span class="text-primary">read_float</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">string</i> memory.<span class="text-primary">read_string</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>)</h5>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_byte</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">int</i> <i class="text-warning">value</i>)</h5>
<p>Writes an 8-bit integer to the given address.</p>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_ubyte</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">int</i> <i class="text-warning">value</i>)</h5>
<p>Writes an unsigned 8-bit integer to the given address.</p>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_short</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">int</i> <i class="text-warning">value</i>)</h5>
<p>Writes a 16-bit integer to the given address.</p>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_ushort</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">int</i> <i class="text-warning">value</i>)</h5>
<p>Writes an unsigned 16-bit integer to the given address.</p>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_int</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">int</i> <i class="text-warning">value</i>)</h5>
<p>Writes a 32-bit integer to the given address.</p>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_uint</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">int</i> <i class="text-warning">value</i>)</h5>
<p>Writes an unsigned 32-bit integer to the given address.</p>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_long</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">int</i> <i class="text-warning">value</i>)</h5>
<p>Writes a 64-bit integer to the given address.</p>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_float</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">number</i> <i class="text-warning">value</i>)</h5>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_string</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">string</i> <i class="text-warning">value</i>)</h5>

<h5><i class="text-success">void</i> memory.<span class="text-primary">write_vector3</span>(<i class="text-success">int|userdata</i> <i class="text-warning">addr</i>, <i class="text-success">Vector3</i> <i class="text-warning">value</i>)</h5>
<h3><a name="profiling-functions" href="#profiling-functions">§</a> Profiling Functions</h3>

<h5><i class="text-success">void</i> profiling.<span class="text-primary">once</span>(<i class="text-success">string</i> <i class="text-warning">name</i>, <i class="text-success">function</i> <i class="text-warning">func</i>)</h5>
<p>Executes the given function and prints the time it took to your log.</p>

<h5><i class="text-success">void</i> profiling.<span class="text-primary">tick</span>(<i class="text-success">string</i> <i class="text-warning">name</i>, <i class="text-success">function</i> <i class="text-warning">func</i>)</h5>
<p>Executes the given function and shows the time it took via the info text/debug text.</p>
</div>
</div>
</div>
</div>


</body></html>