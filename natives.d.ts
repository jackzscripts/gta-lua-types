interface Vector3 {
    x: number,
    y: number,
    z: number
}
type float = number
type int = number
type Address = number
type Hash = number
type EntityHandle = number
type FloatPointer = Address
type IntPointer = Address
type BoolPointer = Address
type CamHandle = number
type Player = EntityHandle
type Vector3Pointer = Address
type ScriptHandle = number
type ScriptHandlePointer = number
type Blip = number
type Pickup = number
type Interior = number
/** @noSelf **/
declare namespace SYSTEM {
	/** Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h **/
	function WAIT(ms: int): void
	/** Examples:
	 g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
	 l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
	 SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
	 SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
	 SYSTEM::START_NEW_SCRIPT("emergencycall", 512); 
	 SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
	 SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
	 SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
	 SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);
	
	Decompiled examples of usage when starting a script:
	 
	    SCRIPT::REQUEST_SCRIPT(a_0);
	    if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {
	        SYSTEM::START_NEW_SCRIPT(a_0, v_3);
	        SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);
	        return 1;
	    }
	 
	or:
	
	    v_2 = "MrsPhilips2";
	    SCRIPT::REQUEST_SCRIPT(v_2);
	    while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {
	    SCRIPT::REQUEST_SCRIPT(v_2);
	    SYSTEM::WAIT(0);
	    }
	    sub_8792(36);
	    SYSTEM::START_NEW_SCRIPT(v_2, 17000);
	    SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2); **/
	function START_NEW_SCRIPT(scriptName: string, stackSize: int): int
	/** return : script thread id, 0 if failed
	Pass pointer to struct of args in p1, size of struct goes into p2 **/
	function START_NEW_SCRIPT_WITH_ARGS(scriptName: string, args: Address, argCount: int, stackSize: int): int
	/**  **/
	function START_NEW_SCRIPT_WITH_NAME_HASH(scriptHash: Hash, stackSize: int): int
	/**  **/
	function START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(scriptHash: Hash, args: Address, argCount: int, stackSize: int): int
	/** Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)). **/
	function TIMERA(): int
	/**  **/
	function TIMERB(): int
	/**  **/
	function SETTIMERA(value: int): void
	/**  **/
	function SETTIMERB(value: int): void
	/** Gets the current frame time. **/
	function TIMESTEP(): float
	/**  **/
	function SIN(value: float): float
	/**  **/
	function COS(value: float): float
	/**  **/
	function SQRT(value: float): float
	/**  **/
	function POW(base: float, exponent: float): float
	/**  **/
	function LOG10(value: float): float
	/** Calculates the magnitude of a vector. **/
	function VMAG(x: float, y: float, z: float): float
	/** Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster) **/
	function VMAG2(x: float, y: float, z: float): float
	/** Calculates distance between vectors. **/
	function VDIST(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): float
	/** Calculates distance between vectors but does not perform Sqrt operations. (Its way faster) **/
	function VDIST2(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): float
	/**  **/
	function SHIFT_LEFT(value: int, bitShift: int): int
	/**  **/
	function SHIFT_RIGHT(value: int, bitShift: int): int
	/**  **/
	function FLOOR(value: float): int
	/** I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down **/
	function CEIL(value: float): int
	/**  **/
	function ROUND(value: float): int
	/**  **/
	function TO_FLOAT(value: int): float
	/** THREAD_PRIO_HIGHEST = 0
	THREAD_PRIO_NORMAL = 1
	THREAD_PRIO_LOWEST = 2
	THREAD_PRIO_MANUAL_UPDATE = 100 **/
	function SET_THIS_THREAD_PRIORITY(priority: int): void
}

/** @noSelf **/
declare namespace APP {
	/**  **/
	function APP_DATA_VALID(): boolean
	/**  **/
	function APP_GET_INT(property: string): int
	/**  **/
	function APP_GET_FLOAT(property: string): float
	/**  **/
	function APP_GET_STRING(property: string): string
	/**  **/
	function APP_SET_INT(property: string, value: int): void
	/**  **/
	function APP_SET_FLOAT(property: string, value: float): void
	/**  **/
	function APP_SET_STRING(property: string, value: string): void
	/** Called in the gamescripts like:
	APP::APP_SET_APP("car");
	APP::APP_SET_APP("dog"); **/
	function APP_SET_APP(appName: string): void
	/**  **/
	function APP_SET_BLOCK(blockName: string): void
	/**  **/
	function APP_CLEAR_BLOCK(): void
	/**  **/
	function APP_CLOSE_APP(): void
	/**  **/
	function APP_CLOSE_BLOCK(): void
	/**  **/
	function APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT(): boolean
	/**  **/
	function APP_HAS_SYNCED_DATA(appName: string): boolean
	/**  **/
	function APP_SAVE_DATA(): void
	/**  **/
	function APP_GET_DELETED_FILE_STATUS(): int
	/**  **/
	function APP_DELETE_APP_DATA(appName: string): boolean
}

/** @noSelf **/
declare namespace AUDIO {
	/** All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/RFb4GTny
	
	AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
	AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
	 **/
	function PLAY_PED_RINGTONE(ringtoneName: string, ped: EntityHandle, p2: boolean): void
	/**  **/
	function IS_PED_RINGTONE_PLAYING(ped: EntityHandle): boolean
	/**  **/
	function STOP_PED_RINGTONE(ped: EntityHandle): void
	/**  **/
	function IS_MOBILE_PHONE_CALL_ONGOING(): boolean
	/**  **/
	function IS_MOBILE_INTERFERENCE_ACTIVE(): boolean
	/**  **/
	function CREATE_NEW_SCRIPTED_CONVERSATION(): void
	/** NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
	_GET_TEXT_SUBSTRING and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
	
	p0 is -1, 0 - 35
	p1 is a char or string (whatever you wanna call it)
	p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
	p3 is again -1, 0 - 35 
	p4 is again -1, 0 - 35 
	p5 is either 0 or 1 (bool ?)
	p6 is either 0 or 1 (The func to determine this is bool)
	p7 is either 0 or 1 (The func to determine this is bool)
	p8 is either 0 or 1 (The func to determine this is bool)
	p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
	p10 is either 0 or 1 (The func to determine this is bool)
	p11 is either 0 or 1 (The func to determine this is bool)
	p12 is unknown as in TU27 X360 scripts it only goes to p11. **/
	function ADD_LINE_TO_CONVERSATION(index: int, p1: string, p2: string, p3: int, p4: int, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: int, p10: boolean, p11: boolean, p12: boolean): void
	/** 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
	
	AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");
	
	=================================================
	One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15. **/
	function ADD_PED_TO_CONVERSATION(index: int, ped: EntityHandle, p2: string): void
	/**  **/
	function SET_POSITION_FOR_NULL_CONV_PED(p0: any, p1: float, p2: float, p3: float): void
	/**  **/
	function SET_ENTITY_FOR_NULL_CONV_PED(p0: int, entity: EntityHandle): void
	/** This native controls where the game plays audio from. By default the microphone is positioned on the player.
	When p0 is true the game will play audio from the 3 positions inputted.
	It is recommended to set all 3 positions to the same value as mixing different positions doesn't seem to work well.
	The scripts mostly use it with only one position such as in fbi3.c: 
	AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true)); **/
	function SET_MICROPHONE_POSITION(toggle: boolean, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, x3: float, y3: float, z3: float): void
	/**  **/
	function SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(p0: boolean): void
	/**  **/
	function SET_CONVERSATION_AUDIO_PLACEHOLDER(p0: boolean): void
	/**  **/
	function START_SCRIPT_PHONE_CONVERSATION(p0: boolean, p1: boolean): void
	/**  **/
	function PRELOAD_SCRIPT_PHONE_CONVERSATION(p0: boolean, p1: boolean): void
	/**  **/
	function START_SCRIPT_CONVERSATION(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void
	/**  **/
	function PRELOAD_SCRIPT_CONVERSATION(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void
	/**  **/
	function START_PRELOADED_CONVERSATION(): void
	/**  **/
	function GET_IS_PRELOADED_CONVERSATION_READY(): boolean
	/**  **/
	function IS_SCRIPTED_CONVERSATION_ONGOING(): boolean
	/**  **/
	function IS_SCRIPTED_CONVERSATION_LOADED(): boolean
	/**  **/
	function GET_CURRENT_SCRIPTED_CONVERSATION_LINE(): int
	/**  **/
	function PAUSE_SCRIPTED_CONVERSATION(p0: boolean): void
	/**  **/
	function RESTART_SCRIPTED_CONVERSATION(): void
	/**  **/
	function STOP_SCRIPTED_CONVERSATION(p0: boolean): int
	/**  **/
	function SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE(): void
	/** Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), "CST4_CFAA", "FRANKLIN");
	Voicelines can be found in GTAV\x64\audio\sfx in files starting with "SS_" which seems to mean scripted speech. **/
	function INTERRUPT_CONVERSATION(ped: EntityHandle, voiceline: string, speaker: string): void
	/** One call found in the b617d scripts:
	
	AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(NETWORK::NET_TO_PED(l_3989._f26F[0/ *1* /]), "CONV_INTERRUPT_QUIT_IT", "LESTER"); **/
	function INTERRUPT_CONVERSATION_AND_PAUSE(ped: EntityHandle, p1: string, speaker: string): void
	/**  **/
	function GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(p0: Address): int
	/**  **/
	function SET_NO_DUCKING_FOR_CONVERSATION(p0: boolean): void
	/** This native does absolutely nothing, just a nullsub **/
	function REGISTER_SCRIPT_WITH_AUDIO(p0: int): void
	/** This native does absolutely nothing, just a nullsub **/
	function UNREGISTER_SCRIPT_WITH_AUDIO(): void
	/** All occurrences and usages found in b617d: https://pastebin.com/NzZZ2Tmm
	Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json **/
	function REQUEST_MISSION_AUDIO_BANK(p0: string, p1: boolean, p2: any): boolean
	/** All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/XZ1tmGEz
	Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json **/
	function REQUEST_AMBIENT_AUDIO_BANK(p0: string, p1: boolean, p2: any): boolean
	/** All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/AkmDAVn6
	Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json **/
	function REQUEST_SCRIPT_AUDIO_BANK(p0: string, p1: boolean, p2: int): boolean
	/**  **/
	function HINT_MISSION_AUDIO_BANK(p0: any, p1: any, p2: any): boolean
	/**  **/
	function HINT_AMBIENT_AUDIO_BANK(p0: any, p1: any, p2: any): boolean
	/**  **/
	function HINT_SCRIPT_AUDIO_BANK(p0: any, p1: any, p2: any): boolean
	/**  **/
	function RELEASE_MISSION_AUDIO_BANK(): void
	/**  **/
	function RELEASE_AMBIENT_AUDIO_BANK(): void
	/** Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json **/
	function RELEASE_NAMED_SCRIPT_AUDIO_BANK(audioBank: string): void
	/**  **/
	function RELEASE_SCRIPT_AUDIO_BANK(): void
	/**  **/
	function UNHINT_AMBIENT_AUDIO_BANK(): void
	/**  **/
	function UNHINT_SCRIPT_AUDIO_BANK(): void
	/**  **/
	function UNHINT_NAMED_SCRIPT_AUDIO_BANK(p0: any): void
	/**  **/
	function GET_SOUND_ID(): int
	/**  **/
	function RELEASE_SOUND_ID(soundId: int): void
	/** All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/A8Ny8AHZ
	
	Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json **/
	function PLAY_SOUND(soundId: int, audioName: string, audioRef: string, p3: boolean, p4: any, p5: boolean): void
	/** List: https://pastebin.com/DCeRiaLJ
	
	All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
	
	Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json **/
	function PLAY_SOUND_FRONTEND(soundId: int, audioName: string, audioRef: string, p3: boolean): void
	/** Only call found in the b617d scripts:
	
	AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");
	
	Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json **/
	function PLAY_DEFERRED_SOUND_FRONTEND(soundName: string, soundsetName: string): void
	/** All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/f2A7vTj0 
	No changes made in b678d.
	
	gtaforums.com/topic/795622-audio-for-mods
	
	Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json **/
	function PLAY_SOUND_FROM_ENTITY(soundId: int, audioName: string, entity: EntityHandle, audioRef: string, isNetwork: boolean, p5: any): void
	/**  **/
	function PLAY_SOUND_FROM_ENTITY_HASH(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/** All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/eeFc5DiW
	
	gtaforums.com/topic/795622-audio-for-mods
	
	Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json **/
	function PLAY_SOUND_FROM_COORD(soundId: int, audioName: string, x: float, y: float, z: float, audioRef: string, isNetwork: boolean, range: int, p8: boolean): void
	/**  **/
	function UPDATE_SOUND_COORD(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function STOP_SOUND(soundId: int): void
	/** Could this be used alongside either, 
	SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally. **/
	function GET_NETWORK_ID_FROM_SOUND_ID(soundId: int): int
	/**  **/
	function GET_SOUND_ID_FROM_NETWORK_ID(netId: int): int
	/**  **/
	function SET_VARIABLE_ON_SOUND(soundId: int, p1: Address, p2: float): void
	/** From the scripts, p0:
	
	"ArmWrestlingIntensity",
	"INOUT",
	"Monkey_Stream",
	"ZoomLevel" **/
	function SET_VARIABLE_ON_STREAM(p0: string, p1: float): void
	/**  **/
	function OVERRIDE_UNDERWATER_STREAM(p0: Address, p1: boolean): void
	/** AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);
	AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0); **/
	function SET_VARIABLE_ON_UNDER_WATER_STREAM(variableName: string, value: float): void
	/**  **/
	function HAS_SOUND_FINISHED(soundId: int): boolean
	/** Plays ambient speech. See also _0x444180DB.
	
	ped: The ped to play the ambient speech.
	speechName: Name of the speech to play, eg. "GENERIC_HI".
	speechParam: Can be one of the following:
	SPEECH_PARAMS_STANDARD
	SPEECH_PARAMS_ALLOW_REPEAT
	SPEECH_PARAMS_BEAT
	SPEECH_PARAMS_FORCE
	SPEECH_PARAMS_FORCE_FRONTEND
	SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
	SPEECH_PARAMS_FORCE_NORMAL
	SPEECH_PARAMS_FORCE_NORMAL_CLEAR
	SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
	SPEECH_PARAMS_FORCE_SHOUTED
	SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
	SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
	SPEECH_PARAMS_FORCE_PRELOAD_ONLY
	SPEECH_PARAMS_MEGAPHONE
	SPEECH_PARAMS_HELI
	SPEECH_PARAMS_FORCE_MEGAPHONE
	SPEECH_PARAMS_FORCE_HELI
	SPEECH_PARAMS_INTERRUPT
	SPEECH_PARAMS_INTERRUPT_SHOUTED
	SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
	SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
	SPEECH_PARAMS_INTERRUPT_NO_FORCE
	SPEECH_PARAMS_INTERRUPT_FRONTEND
	SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
	SPEECH_PARAMS_ADD_BLIP
	SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
	SPEECH_PARAMS_ADD_BLIP_FORCE
	SPEECH_PARAMS_ADD_BLIP_SHOUTED
	SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
	SPEECH_PARAMS_ADD_BLIP_INTERRUPT
	SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
	SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
	SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
	SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
	SPEECH_PARAMS_SHOUTED
	SPEECH_PARAMS_SHOUTED_CLEAR
	SPEECH_PARAMS_SHOUTED_CRITICAL
	
	Note: A list of Name and Parameters can be found here https://pastebin.com/1GZS5dCL
	
	Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json **/
	function PLAY_PED_AMBIENT_SPEECH_NATIVE(ped: EntityHandle, speechName: string, speechParam: string, p3: any): void
	/** Plays ambient speech. See also _0x5C57B85D.
	
	See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.
	
	Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json **/
	function PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(ped: EntityHandle, speechName: string, speechParam: string, p3: any): void
	/** This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
	
	EX (C#):
	GTA.Native.Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
	
	The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
	
	Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json **/
	function PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(ped: EntityHandle, speechName: string, voiceName: string, speechParam: string, p4: boolean): void
	/** Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json **/
	function PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(speechName: string, voiceName: string, x: float, y: float, z: float, speechParam: string): void
	/** This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect` **/
	function OVERRIDE_TREVOR_RAGE(voiceEffect: string): void
	/**  **/
	function RESET_TREVOR_RAGE(): void
	/**  **/
	function SET_PLAYER_ANGRY(ped: EntityHandle, toggle: boolean): void
	/** Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);
	
	Last 2 parameters always seem to be 0.
	
	EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);
	
	Known Pain IDs
	________________________
	
	1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
	6 - Scream (Short)
	7 - Scared Scream (Kinda Long)
	8 - On Fire
	 **/
	function PLAY_PAIN(ped: EntityHandle, painID: int, p1: int, p3: any): void
	/**  **/
	function RELEASE_WEAPON_AUDIO(): void
	/**  **/
	function ACTIVATE_AUDIO_SLOWMO_MODE(p0: string): void
	/**  **/
	function DEACTIVATE_AUDIO_SLOWMO_MODE(p0: string): void
	/** Audio List
	gtaforums.com/topic/795622-audio-for-mods/
	
	All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/FTeAj4yZ **/
	function SET_AMBIENT_VOICE_NAME(ped: EntityHandle, name: string): void
	/**  **/
	function SET_AMBIENT_VOICE_NAME_HASH(ped: EntityHandle, hash: Hash): void
	/**  **/
	function GET_AMBIENT_VOICE_NAME_HASH(ped: EntityHandle): Hash
	/** Assigns some ambient voice to the ped. **/
	function SET_PED_VOICE_FULL(ped: EntityHandle): void
	/**  **/
	function SET_PED_RACE_AND_VOICE_GROUP(ped: EntityHandle, p1: any, p2: any): void
	/** From the scripts:
	
	AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));
	AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));
	AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
	AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG")); **/
	function SET_PED_VOICE_GROUP(ped: EntityHandle, voiceGroupHash: Hash): void
	/** Dat151RelType == 29 **/
	function SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(ped: EntityHandle, voiceGroupHash: Hash): void
	/** BOOL p1: 0 = Female; 1 = Male **/
	function SET_PED_GENDER(ped: EntityHandle, p1: boolean): void
	/**  **/
	function STOP_CURRENT_PLAYING_SPEECH(ped: EntityHandle): void
	/**  **/
	function STOP_CURRENT_PLAYING_AMBIENT_SPEECH(ped: EntityHandle): void
	/**  **/
	function IS_AMBIENT_SPEECH_PLAYING(ped: EntityHandle): boolean
	/**  **/
	function IS_SCRIPTED_SPEECH_PLAYING(p0: any): boolean
	/**  **/
	function IS_ANY_SPEECH_PLAYING(ped: EntityHandle): boolean
	/**  **/
	function IS_ANY_POSITIONAL_SPEECH_PLAYING(): boolean
	/** Checks if the ped can play the speech or has the speech file, last parameter is usually false. **/
	function DOES_CONTEXT_EXIST_FOR_THIS_PED(ped: EntityHandle, speechName: string, unk: boolean): boolean
	/**  **/
	function IS_PED_IN_CURRENT_CONVERSATION(ped: EntityHandle): boolean
	/** Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
	
	====================================================
	
	As mentioned above, this only sets the drunk sound to ped/player.
	
	To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
	
	Below is an example
	
	if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
	                {
	                    Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
	                }
	                Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);
	
	
	
	And to stop the effect use
	RESET_PED_MOVEMENT_CLIPSET **/
	function SET_PED_IS_DRUNK(ped: EntityHandle, toggle: boolean): void
	/** Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
	This native is works only when you call it on the ped with right model (ac_chop only ?)
	Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ **/
	function PLAY_ANIMAL_VOCALIZATION(pedHandle: EntityHandle, p1: int, speechName: string): void
	/**  **/
	function IS_ANIMAL_VOCALIZATION_PLAYING(pedHandle: EntityHandle): boolean
	/** mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal. **/
	function SET_ANIMAL_MOOD(animal: EntityHandle, mood: int): void
	/**  **/
	function IS_MOBILE_PHONE_RADIO_ACTIVE(): boolean
	/**  **/
	function SET_MOBILE_PHONE_RADIO_STATE(state: boolean): void
	/** Returns 255 (radio off index) if the function fails. **/
	function GET_PLAYER_RADIO_STATION_INDEX(): int
	/** Returns active radio station name **/
	function GET_PLAYER_RADIO_STATION_NAME(): string
	/** Converts radio station index to string. Use HUD::_GET_LABEL_TEXT to get the user-readable text. **/
	function GET_RADIO_STATION_NAME(radioStation: int): string
	/**  **/
	function GET_PLAYER_RADIO_STATION_GENRE(): int
	/**  **/
	function IS_RADIO_RETUNING(): boolean
	/**  **/
	function IS_RADIO_FADED_OUT(): boolean
	/** Tune Forward... **/
	function SET_RADIO_RETUNE_UP(): void
	/** Tune Backwards... **/
	function SET_RADIO_RETUNE_DOWN(): void
	/** List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
	An older list including hidden radio stations: https://pastebin.com/Kj9t38KF **/
	function SET_RADIO_TO_STATION_NAME(stationName: string): void
	/** List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
	An older list including hidden radio stations: https://pastebin.com/Kj9t38KF **/
	function SET_VEH_RADIO_STATION(vehicle: EntityHandle, radioStation: string): void
	/**  **/
	function SET_VEH_HAS_NORMAL_RADIO(vehicle: EntityHandle): void
	/**  **/
	function IS_VEHICLE_RADIO_ON(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEH_FORCED_RADIO_THIS_FRAME(vehicle: EntityHandle): void
	/** Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json **/
	function SET_EMITTER_RADIO_STATION(emitterName: string, radioStation: string): void
	/** Example:
	AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);
	
	This turns off surrounding sounds not connected directly to peds.
	
	Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json **/
	function SET_STATIC_EMITTER_ENABLED(emitterName: string, toggle: boolean): void
	/** Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json **/
	function LINK_STATIC_EMITTER_TO_ENTITY(emitterName: string, entity: EntityHandle): void
	/** Sets radio station by index. **/
	function SET_RADIO_TO_STATION_INDEX(radioStation: int): void
	/**  **/
	function SET_FRONTEND_RADIO_ACTIVE(active: boolean): void
	/** "news" that play on the radio after you've done something in story mode(?) **/
	function UNLOCK_MISSION_NEWS_STORY(newsStory: int): void
	/**  **/
	function IS_MISSION_NEWS_STORY_UNLOCKED(newsStory: int): boolean
	/**  **/
	function GET_AUDIBLE_MUSIC_TRACK_TEXT_ID(): int
	/**  **/
	function PLAY_END_CREDITS_MUSIC(play: boolean): void
	/**  **/
	function SKIP_RADIO_FORWARD(): void
	/**  **/
	function FREEZE_RADIO_STATION(radioStation: string): void
	/**  **/
	function UNFREEZE_RADIO_STATION(radioStation: string): void
	/**  **/
	function SET_RADIO_AUTO_UNFREEZE(toggle: boolean): void
	/**  **/
	function SET_INITIAL_PLAYER_STATION(radioStation: string): void
	/**  **/
	function SET_USER_RADIO_CONTROL_ENABLED(toggle: boolean): void
	/** Only found this one in the decompiled scripts:
	
	AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
	 **/
	function SET_RADIO_TRACK(radioStation: string, radioTrack: string): void
	/**  **/
	function SET_RADIO_TRACK_WITH_START_OFFSET(radioStationName: string, mixName: string, p2: int): void
	/**  **/
	function SET_NEXT_RADIO_TRACK(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function SET_VEHICLE_RADIO_LOUD(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function CAN_VEHICLE_RECEIVE_CB_RADIO(vehicle: EntityHandle): boolean
	/**  **/
	function SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(toggle: boolean): void
	/**  **/
	function DOES_PLAYER_VEH_HAVE_RADIO(): boolean
	/**  **/
	function IS_PLAYER_VEH_RADIO_ENABLE(): boolean
	/** can't seem to enable radio on cop cars etc **/
	function SET_VEHICLE_RADIO_ENABLED(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(p0: any): void
	/** Examples:
	
	AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
	AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
	AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
	AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
	AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
	AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
	AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
	AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1); **/
	function SET_CUSTOM_RADIO_TRACK_LIST(radioStation: string, trackListName: string, p2: boolean): void
	/** 3 calls in the b617d scripts, removed duplicate.
	
	AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");
	AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK"); **/
	function CLEAR_CUSTOM_RADIO_TRACK_LIST(radioStation: string): void
	/**  **/
	function GET_NUM_UNLOCKED_RADIO_STATIONS(): int
	/**  **/
	function FIND_RADIO_STATION_INDEX(stationNameHash: Hash): int
	/** 6 calls in the b617d scripts, removed identical lines:
	
	AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);
	AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);
	AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1); **/
	function SET_RADIO_STATION_MUSIC_ONLY(radioStation: string, toggle: boolean): void
	/**  **/
	function SET_RADIO_FRONTEND_FADE_TIME(fadeTime: float): void
	/** AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED"); **/
	function UNLOCK_RADIO_STATION_TRACK_LIST(radioStation: string, trackListName: string): void
	/**  **/
	function LOCK_RADIO_STATION_TRACK_LIST(radioStation: string, trackListName: string): void
	/** Just a nullsub (i.e. does absolutely nothing) since build 1604. **/
	function UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(enableMixes: boolean): void
	/** Disables the radio station (hides it from the radio wheel). **/
	function LOCK_RADIO_STATION(radioStationName: string, toggle: boolean): void
	/** Doesn't have an effect in Story Mode. **/
	function SET_RADIO_STATION_AS_FAVOURITE(radioStation: string, toggle: boolean): void
	/**  **/
	function IS_RADIO_STATION_FAVOURITED(radioStation: string): boolean
	/**  **/
	function GET_NEXT_AUDIBLE_BEAT(p0: FloatPointer, p1: FloatPointer, p2: IntPointer): boolean
	/** Changes start time of a tracklist (milliseconds)
	R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000) **/
	function FORCE_MUSIC_TRACK_LIST(radioStation: string, trackListName: string, milliseconds: int): void
	/**  **/
	function GET_CURRENT_TRACK_PLAY_TIME(radioStationName: string): int
	/**  **/
	function GET_CURRENT_TRACK_SOUND_NAME(radioStationName: string): Hash
	/**  **/
	function SET_VEHICLE_MISSILE_WARNING_ENABLED(vehicle: EntityHandle, toggle: boolean): void
	/** Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json **/
	function SET_AMBIENT_ZONE_STATE(zoneName: string, p1: boolean, p2: boolean): void
	/** This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);
	
	Still needs more research.
	
	Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json **/
	function CLEAR_AMBIENT_ZONE_STATE(zoneName: string, p1: boolean): void
	/**  **/
	function SET_AMBIENT_ZONE_LIST_STATE(p0: Address, p1: boolean, p2: boolean): void
	/**  **/
	function CLEAR_AMBIENT_ZONE_LIST_STATE(p0: Address, p1: boolean): void
	/** Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json **/
	function SET_AMBIENT_ZONE_STATE_PERSISTENT(ambientZone: string, p1: boolean, p2: boolean): void
	/** Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json **/
	function SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(ambientZone: string, p1: boolean, p2: boolean): void
	/** Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json **/
	function IS_AMBIENT_ZONE_ENABLED(ambientZone: string): boolean
	/**  **/
	function REFRESH_CLOSEST_OCEAN_SHORELINE(): void
	/** All occurrences found in b617d, sorted alphabetically and identical lines removed: 
	
	AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
	AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
	AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
	Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json **/
	function SET_CUTSCENE_AUDIO_OVERRIDE(name: string): void
	/**  **/
	function SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(variableName: string, value: float): void
	/** Plays the given police radio message.
	
	All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/GBnsQ5hr
	Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json **/
	function PLAY_POLICE_REPORT(name: string, p1: float): int
	/**  **/
	function CANCEL_ALL_POLICE_REPORTS(): void
	/** Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
	Only works on vehicles with a police siren. **/
	function BLIP_SIREN(vehicle: EntityHandle): void
	/** Overrides the vehicle's horn hash.
	When changing this hash on a vehicle, it will not return the 'overwritten' hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)
	
	vehicle - the vehicle whose horn should be overwritten
	mute - p1 seems to be an option for muting the horn
	p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists? **/
	function OVERRIDE_VEH_HORN(vehicle: EntityHandle, override: boolean, hornHash: int): void
	/** Checks whether the horn of a vehicle is currently played. **/
	function IS_HORN_ACTIVE(vehicle: EntityHandle): boolean
	/** Makes pedestrians sound their horn longer, faster and more agressive when they use their horn. **/
	function SET_AGGRESSIVE_HORNS(toggle: boolean): void
	/** Does nothing (it's a nullsub). **/
	function SET_RADIO_POSITION_AUDIO_MUTE(p0: boolean): void
	/** SET_VEHICLE_CONVERSATIONS_PERSIST? **/
	function SET_VEHICLE_CONVERSATIONS_PERSIST(p0: boolean, p1: boolean): void
	/**  **/
	function SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(p0: any, p1: any, p2: any): void
	/**  **/
	function IS_STREAM_PLAYING(): boolean
	/**  **/
	function GET_STREAM_PLAY_TIME(): int
	/** Example:
	AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");
	
	All found occurrences in the b678d decompiled scripts: https://pastebin.com/3rma6w5w
	
	Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.   
	
	soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
	
	Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json **/
	function LOAD_STREAM(streamName: string, soundSet: string): boolean
	/** Example:
	AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");
	
	Only called a few times in the scripts.
	
	Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json **/
	function LOAD_STREAM_WITH_START_OFFSET(streamName: string, startOffset: int, soundSet: string): boolean
	/**  **/
	function PLAY_STREAM_FROM_PED(ped: EntityHandle): void
	/**  **/
	function PLAY_STREAM_FROM_VEHICLE(vehicle: EntityHandle): void
	/** Used with AUDIO::LOAD_STREAM
	
	Example from finale_heist2b.c4:
	TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2/ *14* /], l_4C8[2/ *14* /]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
	                    PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2/ *14* /]._f7, 0.0);
	                    PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(l_4C8[2/ *14* /], 0, 0);
	                    PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2/ *14* /], 38, 1);
	                    PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2/ *14* /], 1);
	                    if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
	                        AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0/ *1* /]);
	                    } **/
	function PLAY_STREAM_FROM_OBJECT(object: EntityHandle): void
	/**  **/
	function PLAY_STREAM_FRONTEND(): void
	/**  **/
	function PLAY_STREAM_FROM_POSITION(x: float, y: float, z: float): void
	/**  **/
	function STOP_STREAM(): void
	/**  **/
	function STOP_PED_SPEAKING(ped: EntityHandle, shaking: boolean): void
	/**  **/
	function BLOCK_ALL_SPEECH_FROM_PED(ped: EntityHandle, p1: boolean, p2: boolean): void
	/**  **/
	function STOP_PED_SPEAKING_SYNCED(p0: any, p1: any): void
	/**  **/
	function DISABLE_PED_PAIN_AUDIO(ped: EntityHandle, toggle: boolean): void
	/** Common in the scripts:
	AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID()); **/
	function IS_AMBIENT_SPEECH_DISABLED(ped: EntityHandle): boolean
	/**  **/
	function BLOCK_SPEECH_CONTEXT_GROUP(p0: string, p1: int): void
	/**  **/
	function UNBLOCK_SPEECH_CONTEXT_GROUP(p0: string): void
	/**  **/
	function SET_SIREN_WITH_NO_DRIVER(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_SIREN_BYPASS_MP_DRIVER_CHECK(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function TRIGGER_SIREN_AUDIO(vehicle: EntityHandle): void
	/**  **/
	function SET_HORN_PERMANENTLY_ON(vehicle: EntityHandle): void
	/**  **/
	function SET_HORN_ENABLED(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_AUDIO_VEHICLE_PRIORITY(vehicle: EntityHandle, p1: any): void
	/**  **/
	function SET_HORN_PERMANENTLY_ON_TIME(vehicle: EntityHandle, time: float): void
	/**  **/
	function USE_SIREN_AS_HORN(vehicle: EntityHandle, toggle: boolean): void
	/** This native sets the audio of the specified vehicle to the audioName (p1).
	
	Use the audioNameHash found in vehicles.meta
	
	Example:
	_SET_VEHICLE_AUDIO(veh, "ADDER");
	The selected vehicle will now have the audio of the Adder. **/
	function FORCE_USE_AUDIO_GAME_OBJECT(vehicle: EntityHandle, audioName: string): void
	/**  **/
	function PRELOAD_VEHICLE_AUDIO_BANK(vehicleModel: Hash): void
	/**  **/
	function SET_VEHICLE_STARTUP_REV_SOUND(vehicle: EntityHandle, p1: string, p2: string): void
	/**  **/
	function RESET_VEHICLE_STARTUP_REV_SOUND(vehicle: EntityHandle): void
	/**  **/
	function SET_VEHICLE_FORCE_REVERSE_WARNING(p0: any, p1: any): void
	/**  **/
	function IS_VEHICLE_AUDIBLY_DAMAGED(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(vehicle: EntityHandle, damageFactor: float): void
	/** intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)
	Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values **/
	function SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(vehicle: EntityHandle, intensity: float): void
	/**  **/
	function ENABLE_VEHICLE_FANBELT_DAMAGE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function ENABLE_VEHICLE_EXHAUST_POPS(vehicle: EntityHandle, toggle: boolean): void
	/** SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
	SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0); 
	
	Will give a boost-soundeffect. **/
	function SET_VEHICLE_BOOST_ACTIVE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_SCRIPT_UPDATE_DOOR_AUDIO(doorHash: Hash, toggle: boolean): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function PLAY_VEHICLE_DOOR_OPEN_SOUND(vehicle: EntityHandle, doorId: int): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function PLAY_VEHICLE_DOOR_CLOSE_SOUND(vehicle: EntityHandle, doorId: int): void
	/** Works for planes only. **/
	function ENABLE_STALL_WARNING_SOUNDS(vehicle: EntityHandle, toggle: boolean): void
	/** Hardcoded to return 1 **/
	function IS_GAME_IN_CONTROL_OF_MUSIC(): boolean
	/**  **/
	function SET_GPS_ACTIVE(active: boolean): void
	/** Called 38 times in the scripts. There are 5 different audioNames used.
	 One unknown removed below.
	
	AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
	AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
	AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
	AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01"); **/
	function PLAY_MISSION_COMPLETE_AUDIO(audioName: string): void
	/**  **/
	function IS_MISSION_COMPLETE_PLAYING(): boolean
	/**  **/
	function IS_MISSION_COMPLETE_READY_FOR_UI(): boolean
	/**  **/
	function BLOCK_DEATH_JINGLE(toggle: boolean): void
	/** Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
	
	List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: https://pastebin.com/MtM9N9CC
	Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json **/
	function START_AUDIO_SCENE(scene: string): boolean
	/** Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json **/
	function STOP_AUDIO_SCENE(scene: string): void
	/** ?? **/
	function STOP_AUDIO_SCENES(): void
	/** Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json **/
	function IS_AUDIO_SCENE_ACTIVE(scene: string): boolean
	/** Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json **/
	function SET_AUDIO_SCENE_VARIABLE(scene: string, variable: string, value: float): void
	/**  **/
	function SET_AUDIO_SCRIPT_CLEANUP_TIME(time: int): void
	/** All found occurrences in b678d:
	https://pastebin.com/ceu67jz8 **/
	function ADD_ENTITY_TO_AUDIO_MIX_GROUP(entity: EntityHandle, groupName: string, p2: float): void
	/**  **/
	function REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(entity: EntityHandle, p1: float): void
	/**  **/
	function AUDIO_IS_MUSIC_PLAYING(): boolean
	/** This is an alias of AUDIO_IS_MUSIC_PLAYING. **/
	function AUDIO_IS_SCRIPTED_MUSIC_PLAYING(): boolean
	/** All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
	Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json **/
	function PREPARE_MUSIC_EVENT(eventName: string): boolean
	/** All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
	Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json **/
	function CANCEL_MUSIC_EVENT(eventName: string): boolean
	/** List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: https://pastebin.com/RzDFmB1W
	
	All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
	Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json **/
	function TRIGGER_MUSIC_EVENT(eventName: string): boolean
	/**  **/
	function IS_MUSIC_ONESHOT_PLAYING(): boolean
	/**  **/
	function GET_MUSIC_PLAYTIME(): int
	/**  **/
	function SET_GLOBAL_RADIO_SIGNAL_LEVEL(p0: any): void
	/**  **/
	function RECORD_BROKEN_GLASS(x: float, y: float, z: float, radius: float): void
	/**  **/
	function CLEAR_ALL_BROKEN_GLASS(): void
	/**  **/
	function SCRIPT_OVERRIDES_WIND_ELEVATION(p0: boolean, p1: any): void
	/**  **/
	function SET_PED_WALLA_DENSITY(p0: float, p1: float): void
	/**  **/
	function SET_PED_INTERIOR_WALLA_DENSITY(p0: float, p1: float): void
	/**  **/
	function FORCE_PED_PANIC_WALLA(): void
	/** Example:
	
	bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
	Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json **/
	function PREPARE_ALARM(alarmName: string): boolean
	/** Example:
	
	This will start the alarm at Fort Zancudo.
	
	AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
	
	First parameter (char) is the name of the alarm.
	Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
	
	----------
	
	It DOES make a difference but it has to do with the duration or something I dunno yet
	
	----------
	
	 Found in the b617d scripts:
	
	 AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);
	 AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);
	 AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);
	 AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);
	 AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);
	 AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);
	 AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);
	 AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);
	 AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);
	 AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
	 AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);
	 AUDIO::START_ALARM("PRISON_ALARMS", 0);
	 AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);
	Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json **/
	function START_ALARM(alarmName: string, p2: boolean): void
	/** Example:
	
	This will stop the alarm at Fort Zancudo.
	
	AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
	
	First parameter (char) is the name of the alarm.
	Second parameter (bool) has to be true (1) to have any effect.
	Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json **/
	function STOP_ALARM(alarmName: string, toggle: boolean): void
	/**  **/
	function STOP_ALL_ALARMS(stop: boolean): void
	/** Example:
	
	bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
	Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json **/
	function IS_ALARM_PLAYING(alarmName: string): boolean
	/** Returns hash of default vehicle horn
	
	Hash is stored in audVehicleAudioEntity **/
	function GET_VEHICLE_DEFAULT_HORN(vehicle: EntityHandle): Hash
	/**  **/
	function GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(vehicle: EntityHandle): Hash
	/**  **/
	function RESET_PED_AUDIO_FLAGS(ped: EntityHandle): void
	/** Enables/disables ped's "loud" footstep sound. **/
	function SET_PED_FOOTSTEPS_EVENTS_ENABLED(ped: EntityHandle, toggle: boolean): void
	/** Enables/disables ped's "quiet" footstep sound. **/
	function SET_PED_CLOTH_EVENTS_ENABLED(ped: EntityHandle, toggle: boolean): void
	/** Sets audio flag "OverridePlayerGroundMaterial" **/
	function OVERRIDE_PLAYER_GROUND_MATERIAL(hash: Hash, toggle: boolean): void
	/**  **/
	function USE_FOOTSTEP_SCRIPT_SWEETENERS(ped: EntityHandle, p1: boolean, hash: Hash): void
	/** Sets audio flag "OverrideMicrophoneSettings" **/
	function OVERRIDE_MICROPHONE_SETTINGS(hash: Hash, toggle: boolean): void
	/**  **/
	function FREEZE_MICROPHONE(): void
	/** If value is set to true, and ambient siren sound will be played.
	Appears to enable/disable an audio flag. **/
	function DISTANT_COP_CAR_SIRENS(value: boolean): void
	/**  **/
	function SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function ENABLE_STUNT_JUMP_AUDIO(): void
	/** Possible flag names:
	"ActivateSwitchWheelAudio"
	"AllowAmbientSpeechInSlowMo"
	"AllowCutsceneOverScreenFade"
	"AllowForceRadioAfterRetune"
	"AllowPainAndAmbientSpeechToPlayDuringCutscene"
	"AllowPlayerAIOnMission"
	"AllowPoliceScannerWhenPlayerHasNoControl"
	"AllowRadioDuringSwitch"
	"AllowRadioOverScreenFade"
	"AllowScoreAndRadio"
	"AllowScriptedSpeechInSlowMo"
	"AvoidMissionCompleteDelay"
	"DisableAbortConversationForDeathAndInjury"
	"DisableAbortConversationForRagdoll"
	"DisableBarks"
	"DisableFlightMusic"
	"DisableReplayScriptStreamRecording"
	"EnableHeadsetBeep"
	"ForceConversationInterrupt"
	"ForceSeamlessRadioSwitch"
	"ForceSniperAudio"
	"FrontendRadioDisabled"
	"HoldMissionCompleteWhenPrepared"
	"IsDirectorModeActive"
	"IsPlayerOnMissionForSpeech"
	"ListenerReverbDisabled"
	"LoadMPData"
	"MobileRadioInGame"
	"OnlyAllowScriptTriggerPoliceScanner"
	"PlayMenuMusic"
	"PoliceScannerDisabled"
	"ScriptedConvListenerMaySpeak"
	"SpeechDucksScore"
	"SuppressPlayerScubaBreathing"
	"WantedMusicDisabled"
	"WantedMusicOnMission"
	
	-------------------------------
	No added flag names between b393d and b573d, including b573d.
	
	#######################################################################
	
	"IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.
	
	-----------------------------------------------------------------------
	
	All flag IDs and hashes:
	
	ID: 00 | Hash: 0x0FED7A7F
	ID: 01 | Hash: 0x20A7858F
	ID: 02 | Hash: 0xA11C2259
	ID: 03 | Hash: 0x08DE4700
	ID: 04 | Hash: 0x989F652F
	ID: 05 | Hash: 0x3C9E76BA
	ID: 06 | Hash: 0xA805FEB0
	ID: 07 | Hash: 0x4B94EA26
	ID: 08 | Hash: 0x803ACD34
	ID: 09 | Hash: 0x7C741226
	ID: 10 | Hash: 0x31DB9EBD
	ID: 11 | Hash: 0xDF386F18
	ID: 12 | Hash: 0x669CED42
	ID: 13 | Hash: 0x51F22743
	ID: 14 | Hash: 0x2052B35C
	ID: 15 | Hash: 0x071472DC
	ID: 16 | Hash: 0xF9928BCC
	ID: 17 | Hash: 0x7ADBDD48
	ID: 18 | Hash: 0xA959BA1A
	ID: 19 | Hash: 0xBBE89B60
	ID: 20 | Hash: 0x87A08871
	ID: 21 | Hash: 0xED1057CE
	ID: 22 | Hash: 0x1584AD7A
	ID: 23 | Hash: 0x8582CFCB
	ID: 24 | Hash: 0x7E5E2FB0
	ID: 25 | Hash: 0xAE4F72DB
	ID: 26 | Hash: 0x5D16D1FA
	ID: 27 | Hash: 0x06B2F4B8
	ID: 28 | Hash: 0x5D4CDC96
	ID: 29 | Hash: 0x8B5A48BA
	ID: 30 | Hash: 0x98FBD539
	ID: 31 | Hash: 0xD8CB0473
	ID: 32 | Hash: 0x5CBB4874
	ID: 33 | Hash: 0x2E9F93A9
	ID: 34 | Hash: 0xD93BEA86
	ID: 35 | Hash: 0x92109B7D
	ID: 36 | Hash: 0xB7EC9E4D
	ID: 37 | Hash: 0xCABDBB1D
	ID: 38 | Hash: 0xB3FD4A52
	ID: 39 | Hash: 0x370D94E5
	ID: 40 | Hash: 0xA0F7938F
	ID: 41 | Hash: 0xCBE1CE81
	ID: 42 | Hash: 0xC27F1271
	ID: 43 | Hash: 0x9E3258EB
	ID: 44 | Hash: 0x551CDA5B
	ID: 45 | Hash: 0xCB6D663C
	ID: 46 | Hash: 0x7DACE87F
	ID: 47 | Hash: 0xF9DE416F
	ID: 48 | Hash: 0x882E6E9E
	ID: 49 | Hash: 0x16B447E7
	ID: 50 | Hash: 0xBD867739
	ID: 51 | Hash: 0xA3A58604
	ID: 52 | Hash: 0x7E046BBC
	ID: 53 | Hash: 0xD95FDB98
	ID: 54 | Hash: 0x5842C0ED
	ID: 55 | Hash: 0x285FECC6
	ID: 56 | Hash: 0x9351AC43
	ID: 57 | Hash: 0x50032E75
	ID: 58 | Hash: 0xAE6D0D59
	ID: 59 | Hash: 0xD6351785
	ID: 60 | Hash: 0xD25D71BC
	ID: 61 | Hash: 0x1F7F6423
	ID: 62 | Hash: 0xE24C3AA6
	ID: 63 | Hash: 0xBFFDD2B7 **/
	function SET_AUDIO_FLAG(flagName: string, toggle: boolean): void
	/**  **/
	function PREPARE_SYNCHRONIZED_AUDIO_EVENT(p0: string, p1: any): boolean
	/**  **/
	function PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(p0: any, p1: Address): boolean
	/**  **/
	function PLAY_SYNCHRONIZED_AUDIO_EVENT(p0: any): boolean
	/**  **/
	function STOP_SYNCHRONIZED_AUDIO_EVENT(p0: any): boolean
	/**  **/
	function INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(p0: Address, x: float, y: float, z: float): void
	/**  **/
	function INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(p0: string, p1: EntityHandle): void
	/** Needs to be called every frame.
	Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt **/
	function SET_AUDIO_SPECIAL_EFFECT_MODE(mode: int): void
	/** Found in the b617d scripts, duplicates removed:  
	
	AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");
	
	 AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");
	
	 AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");
	
	 AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");
	
	 AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW"); **/
	function SET_PORTAL_SETTINGS_OVERRIDE(p0: string, p1: string): void
	/**  Found in the b617d scripts, duplicates removed: 
	
	 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
	 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN");
	 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
	 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT");
	 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW"); **/
	function REMOVE_PORTAL_SETTINGS_OVERRIDE(p0: string): void
	/** STOP_S[MOKE_GRENADE_EXPLOSION_SOUNDS]? **/
	function STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS(): void
	/**  **/
	function GET_MUSIC_VOL_SLIDER(): int
	/**  **/
	function REQUEST_TENNIS_BANKS(ped: EntityHandle): void
	/**  **/
	function UNREQUEST_TENNIS_BANKS(): void
	/**  **/
	function SET_SKIP_MINIGUN_SPIN_UP_AUDIO(p0: boolean): void
	/**  **/
	function STOP_CUTSCENE_AUDIO(): void
	/**  **/
	function HAS_LOADED_MP_DATA_SET(): boolean
	/**  **/
	function HAS_LOADED_SP_DATA_SET(): boolean
	/**  **/
	function GET_VEHICLE_HORN_SOUND_INDEX(vehicle: EntityHandle): int
	/**  **/
	function SET_VEHICLE_HORN_SOUND_INDEX(vehicle: EntityHandle, value: int): void
}

/** @noSelf **/
declare namespace BRAIN {
	/** BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);
	
	- Nacorpio
	
	-----
	
	Hardcoded to not work in Multiplayer. **/
	function ADD_SCRIPT_TO_RANDOM_PED(name: string, model: Hash, p2: float, p3: float): void
	/** Registers a script for any object with a specific model hash.
	
	BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);
	
	- Nacorpio **/
	function REGISTER_OBJECT_SCRIPT_BRAIN(scriptName: string, modelHash: Hash, p2: int, activationRange: float, p4: int, p5: int): void
	/**  **/
	function IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(object: EntityHandle): boolean
	/**  **/
	function REGISTER_WORLD_POINT_SCRIPT_BRAIN(scriptName: string, activationRange: float, p2: int): void
	/** Gets whether the world point the calling script is registered to is within desired range of the player. **/
	function IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE(): boolean
	/**  **/
	function ENABLE_SCRIPT_BRAIN_SET(brainSet: int): void
	/**  **/
	function DISABLE_SCRIPT_BRAIN_SET(brainSet: int): void
	/**  **/
	function REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE(): void
	/**  **/
	function REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE(): void
	/** Possible values:
	
	act_cinema
	am_mp_carwash_launch
	am_mp_carwash_control
	am_mp_property_ext
	chop
	fairgroundHub
	launcher_BasejumpHeli
	launcher_BasejumpPack
	launcher_CarWash
	launcher_golf
	launcher_Hunting_Ambient
	launcher_MrsPhilips
	launcher_OffroadRacing
	launcher_pilotschool
	launcher_Racing
	launcher_rampage
	launcher_rampage
	launcher_range
	launcher_stunts
	launcher_stunts
	launcher_tennis
	launcher_Tonya
	launcher_Triathlon
	launcher_Yoga
	ob_mp_bed_low
	ob_mp_bed_med **/
	function REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName: string): void
	/** Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
	
	Here are possible values of argument - 
	
	"ob_tv"
	"launcher_Darts" **/
	function REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName: string): void
}

/** @noSelf **/
declare namespace CAM {
	/** ease - smooth transition between the camera's positions
	easeTime - Time in milliseconds for the transition to happen
	
	If you have created a script (rendering) camera, and want to go back to the 
	character (gameplay) camera, call this native with render set to 0.
	Setting ease to 1 will smooth the transition. **/
	function RENDER_SCRIPT_CAMS(render: boolean, ease: boolean, easeTime: int, p3: boolean, p4: boolean, p5: any): void
	/** This native makes the gameplay camera zoom into first person/third person with a special effect. **/
	function STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(render: boolean, p1: float, p2: int, p3: any): void
	/** "DEFAULT_SCRIPTED_CAMERA"
	"DEFAULT_ANIMATED_CAMERA"
	"DEFAULT_SPLINE_CAMERA"
	"DEFAULT_SCRIPTED_FLY_CAMERA"
	"TIMED_SPLINE_CAMERA" **/
	function CREATE_CAM(camName: string, p1: boolean): CamHandle
	/** camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
	------------
	Camera names found in the b617d scripts:
	"DEFAULT_ANIMATED_CAMERA"
	"DEFAULT_SCRIPTED_CAMERA"
	"DEFAULT_SCRIPTED_FLY_CAMERA"
	"DEFAULT_SPLINE_CAMERA"
	------------
	Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2. **/
	function CREATE_CAM_WITH_PARAMS(camName: string, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, fov: float, p8: boolean, p9: int): CamHandle
	/**  **/
	function CREATE_CAMERA(camHash: Hash, p1: boolean): CamHandle
	/** p9 uses 2 by default **/
	function CREATE_CAMERA_WITH_PARAMS(camHash: Hash, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, fov: float, p8: boolean, p9: any): CamHandle
	/** BOOL param indicates whether the cam should be destroyed if it belongs to the calling script. **/
	function DESTROY_CAM(cam: CamHandle, bScriptHostCam: boolean): void
	/** BOOL param indicates whether the cam should be destroyed if it belongs to the calling script. **/
	function DESTROY_ALL_CAMS(bScriptHostCam: boolean): void
	/** Returns whether or not the passed camera handle exists. **/
	function DOES_CAM_EXIST(cam: CamHandle): boolean
	/** Set camera as active/inactive. **/
	function SET_CAM_ACTIVE(cam: CamHandle, active: boolean): void
	/** Returns whether or not the passed camera handle is active. **/
	function IS_CAM_ACTIVE(cam: CamHandle): boolean
	/**  **/
	function IS_CAM_RENDERING(cam: CamHandle): boolean
	/**  **/
	function GET_RENDERING_CAM(): CamHandle
	/**  **/
	function GET_CAM_COORD(cam: CamHandle): Vector3
	/** The last parameter, as in other "ROT" methods, is usually 2. **/
	function GET_CAM_ROT(cam: CamHandle, rotationOrder: int): Vector3
	/**  **/
	function GET_CAM_FOV(cam: CamHandle): float
	/**  **/
	function GET_CAM_NEAR_CLIP(cam: CamHandle): float
	/**  **/
	function GET_CAM_FAR_CLIP(cam: CamHandle): float
	/**  **/
	function GET_CAM_NEAR_DOF(cam: CamHandle): float
	/**  **/
	function GET_CAM_FAR_DOF(cam: CamHandle): float
	/**  **/
	function GET_CAM_DOF_STRENGTH(cam: CamHandle): float
	/**  **/
	function SET_CAM_PARAMS(cam: CamHandle, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, fieldOfView: float, p8: any, p9: int, p10: int, p11: int): void
	/** Sets the position of the cam. **/
	function SET_CAM_COORD(cam: CamHandle, posX: float, posY: float, posZ: float): void
	/** Sets the rotation of the cam.
	Last parameter unknown.
	
	Last parameter seems to always be set to 2. **/
	function SET_CAM_ROT(cam: CamHandle, rotX: float, rotY: float, rotZ: float, rotationOrder: int): void
	/** Sets the field of view of the cam.
	---------------------------------------------
	Min: 1.0f
	Max: 130.0f **/
	function SET_CAM_FOV(cam: CamHandle, fieldOfView: float): void
	/**  **/
	function SET_CAM_NEAR_CLIP(cam: CamHandle, nearClip: float): void
	/**  **/
	function SET_CAM_FAR_CLIP(cam: CamHandle, farClip: float): void
	/**  **/
	function FORCE_CAM_FAR_CLIP(p0: any, p1: any): void
	/**  **/
	function SET_CAM_MOTION_BLUR_STRENGTH(cam: CamHandle, strength: float): void
	/**  **/
	function SET_CAM_NEAR_DOF(cam: CamHandle, nearDOF: float): void
	/**  **/
	function SET_CAM_FAR_DOF(cam: CamHandle, farDOF: float): void
	/**  **/
	function SET_CAM_DOF_STRENGTH(cam: CamHandle, dofStrength: float): void
	/**  **/
	function SET_CAM_DOF_PLANES(cam: CamHandle, p1: float, p2: float, p3: float, p4: float): void
	/**  **/
	function SET_CAM_USE_SHALLOW_DOF_MODE(cam: CamHandle, toggle: boolean): void
	/**  **/
	function SET_USE_HI_DOF(): void
	/** Only used in R* Script fm_mission_controller_2020 **/
	function SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE(): void
	/**  **/
	function SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(camera: CamHandle, p1: float): void
	/**  **/
	function SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(p0: any, p1: float): void
	/** This native has its name defined inside its codE
	 **/
	function SET_CAM_DOF_FNUMBER_OF_LENS(camera: CamHandle, p1: float): void
	/** Native name labeled within its code **/
	function SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(camera: CamHandle, multiplier: float): void
	/** This native has a name defined inside its code **/
	function SET_CAM_DOF_FOCUS_DISTANCE_BIAS(camera: CamHandle, p1: float): void
	/** This native has a name defined inside its code **/
	function SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(camera: CamHandle, p1: float): void
	/** This native has a name defined inside its code **/
	function SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(camera: CamHandle, p1: float): void
	/** Last param determines if its relative to the Entity **/
	function ATTACH_CAM_TO_ENTITY(cam: CamHandle, entity: EntityHandle, xOffset: float, yOffset: float, zOffset: float, isRelative: boolean): void
	/**  **/
	function ATTACH_CAM_TO_PED_BONE(cam: CamHandle, ped: EntityHandle, boneIndex: int, x: float, y: float, z: float, heading: boolean): void
	/**  **/
	function HARD_ATTACH_CAM_TO_PED_BONE(cam: CamHandle, ped: EntityHandle, boneIndex: int, p3: float, p4: float, p5: float, p6: float, p7: float, p8: float, p9: boolean): void
	/** Example from am_mp_drone script: 
	
	CAM::HARD_ATTACH_CAM_TO_ENTITY(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1); **/
	function HARD_ATTACH_CAM_TO_ENTITY(cam: CamHandle, entity: EntityHandle, xRot: float, yRot: float, zRot: float, xOffset: float, yOffset: float, zOffset: float, isRelative: boolean): void
	/** This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME. **/
	function ATTACH_CAM_TO_VEHICLE_BONE(cam: CamHandle, vehicle: EntityHandle, boneIndex: int, relativeRotation: boolean, rotX: float, rotY: float, rotZ: float, offsetX: float, offsetY: float, offsetZ: float, fixedDirection: boolean): void
	/**  **/
	function DETACH_CAM(cam: CamHandle): void
	/** The native seems to only be called once.
	
	The native is used as so,
	CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));
	In the exile1 script. **/
	function SET_CAM_INHERIT_ROLL_VEHICLE(cam: CamHandle, p1: boolean): void
	/**  **/
	function POINT_CAM_AT_COORD(cam: CamHandle, x: float, y: float, z: float): void
	/** p5 always seems to be 1 i.e TRUE **/
	function POINT_CAM_AT_ENTITY(cam: CamHandle, entity: EntityHandle, p2: float, p3: float, p4: float, p5: boolean): void
	/** Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.  **/
	function POINT_CAM_AT_PED_BONE(cam: CamHandle, ped: EntityHandle, boneIndex: int, x: float, y: float, z: float, p6: boolean): void
	/**  **/
	function STOP_CAM_POINTING(cam: CamHandle): void
	/** Allows you to aim and shoot at the direction the camera is facing. **/
	function SET_CAM_AFFECTS_AIMING(cam: CamHandle, toggle: boolean): void
	/** Rotates the radar to match the camera's Z rotation **/
	function SET_CAM_CONTROLS_MINI_MAP_HEADING(cam: CamHandle, toggle: boolean): void
	/** When set to true shadows appear more smooth but less detailed.
	Set to false by default. **/
	function SET_CAM_IS_INSIDE_VEHICLE(cam: CamHandle, toggle: boolean): void
	/**  **/
	function ALLOW_MOTION_BLUR_DECAY(p0: any, p1: boolean): void
	/** NOTE: Debugging functions are not present in the retail version of the game. **/
	function SET_CAM_DEBUG_NAME(camera: CamHandle, name: string): void
	/**  **/
	function GET_DEBUG_CAM(): CamHandle
	/** I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
	
	p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
	
	p8 big values ~100 will slow down the camera movement before reaching this node
	
	p9 != 0 seems to override the rotation/pitch (bool?) **/
	function ADD_CAM_SPLINE_NODE(camera: CamHandle, x: float, y: float, z: float, xRot: float, yRot: float, zRot: float, length: int, smoothingStyle: int, rotationOrder: int): void
	/** p0 is the spline camera to which the node is being added.
	p1 is the camera used to create the node.
	p3 is always 3 in scripts. It might be smoothing style or rotation order. **/
	function ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(cam: CamHandle, cam2: CamHandle, length: int, p3: int): void
	/** p0 is the spline camera to which the node is being added.
	p1 is the camera used to create the node.
	p3 is always 3 in scripts. It might be smoothing style or rotation order. **/
	function ADD_CAM_SPLINE_NODE_USING_CAMERA(cam: CamHandle, cam2: CamHandle, length: int, p3: int): void
	/** p2 is always 2 in scripts. It might be smoothing style or rotation order. **/
	function ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(cam: CamHandle, length: int, p2: int): void
	/**  **/
	function SET_CAM_SPLINE_PHASE(cam: CamHandle, p1: float): void
	/** Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
	
	(returns 1.0f when no nodes has been added, reached end of non existing spline) **/
	function GET_CAM_SPLINE_PHASE(cam: CamHandle): float
	/** I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is. **/
	function GET_CAM_SPLINE_NODE_PHASE(cam: CamHandle): float
	/** I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual. **/
	function SET_CAM_SPLINE_DURATION(cam: CamHandle, timeDuration: int): void
	/**  **/
	function SET_CAM_SPLINE_SMOOTHING_STYLE(cam: CamHandle, smoothingStyle: int): void
	/**  **/
	function GET_CAM_SPLINE_NODE_INDEX(cam: CamHandle): int
	/**  **/
	function SET_CAM_SPLINE_NODE_EASE(cam: CamHandle, easingFunction: int, p2: int, p3: float): void
	/**  **/
	function SET_CAM_SPLINE_NODE_VELOCITY_SCALE(cam: CamHandle, p1: int, scale: float): void
	/**  **/
	function OVERRIDE_CAM_SPLINE_VELOCITY(cam: CamHandle, p1: int, p2: float, p3: float): void
	/** Max value for p1 is 15. **/
	function OVERRIDE_CAM_SPLINE_MOTION_BLUR(cam: CamHandle, p1: int, p2: float, p3: float): void
	/**  **/
	function SET_CAM_SPLINE_NODE_EXTRA_FLAGS(cam: CamHandle, p1: int, flags: int): void
	/**  **/
	function IS_CAM_SPLINE_PAUSED(cam: CamHandle): boolean
	/** Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
	 **/
	function SET_CAM_ACTIVE_WITH_INTERP(camTo: CamHandle, camFrom: CamHandle, duration: int, easeLocation: int, easeRotation: int): void
	/**  **/
	function IS_CAM_INTERPOLATING(cam: CamHandle): boolean
	/** Possible shake types (updated b617d):
	
	DEATH_FAIL_IN_EFFECT_SHAKE
	DRUNK_SHAKE
	FAMILY5_DRUG_TRIP_SHAKE
	HAND_SHAKE
	JOLT_SHAKE
	LARGE_EXPLOSION_SHAKE
	MEDIUM_EXPLOSION_SHAKE
	SMALL_EXPLOSION_SHAKE
	ROAD_VIBRATION_SHAKE
	SKY_DIVING_SHAKE
	VIBRATE_SHAKE
	
	Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json **/
	function SHAKE_CAM(cam: CamHandle, type: string, amplitude: float): void
	/** Example from michael2 script.
	
	CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f); **/
	function ANIMATED_SHAKE_CAM(cam: CamHandle, p1: string, p2: string, p3: string, amplitude: float): void
	/**  **/
	function IS_CAM_SHAKING(cam: CamHandle): boolean
	/**  **/
	function SET_CAM_SHAKE_AMPLITUDE(cam: CamHandle, amplitude: float): void
	/**  **/
	function STOP_CAM_SHAKING(cam: CamHandle, p1: boolean): void
	/** CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);
	
	Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json **/
	function SHAKE_SCRIPT_GLOBAL(p0: string, p1: float): void
	/** CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);
	
	Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json **/
	function ANIMATED_SHAKE_SCRIPT_GLOBAL(p0: string, p1: string, p2: string, p3: float): void
	/** In drunk_controller.c4, sub_309
	if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
	    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
	} **/
	function IS_SCRIPT_GLOBAL_SHAKING(): boolean
	/** In drunk_controller.c4, sub_309
	if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
	    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
	} **/
	function STOP_SCRIPT_GLOBAL_SHAKING(p0: boolean): void
	/** p1: 0..16 **/
	function TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(vehicle: EntityHandle, p1: int, p2: float): void
	/** Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
	
	p9 is unknown at this time.
	p10 throughout all the X360 Scripts is always 2.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function PLAY_CAM_ANIM(cam: CamHandle, animName: string, animDictionary: string, x: float, y: float, z: float, xRot: float, yRot: float, zRot: float, p9: boolean, p10: int): boolean
	/**  **/
	function IS_CAM_PLAYING_ANIM(cam: CamHandle, animName: string, animDictionary: string): boolean
	/**  **/
	function SET_CAM_ANIM_CURRENT_PHASE(cam: CamHandle, phase: float): void
	/**  **/
	function GET_CAM_ANIM_CURRENT_PHASE(cam: CamHandle): float
	/** Examples:
	
	CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");
	
	CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7/ *1* /], l_F4D[15/ *1* /], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash"); **/
	function PLAY_SYNCHRONIZED_CAM_ANIM(p0: any, p1: any, animName: string, animDictionary: string): boolean
	/**  **/
	function SET_FLY_CAM_HORIZONTAL_RESPONSE(cam: CamHandle, p1: float, p2: float, p3: float): void
	/**  **/
	function SET_FLY_CAM_VERTICAL_RESPONSE(cam: CamHandle, p1: float, p2: float, p3: float): void
	/**  **/
	function SET_FLY_CAM_MAX_HEIGHT(cam: CamHandle, height: float): void
	/**  **/
	function SET_FLY_CAM_COORD_AND_CONSTRAIN(cam: CamHandle, x: float, y: float, z: float): void
	/**  **/
	function SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(cam: CamHandle): void
	/**  **/
	function WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(cam: CamHandle): boolean
	/**  **/
	function IS_SCREEN_FADED_OUT(): boolean
	/**  **/
	function IS_SCREEN_FADED_IN(): boolean
	/**  **/
	function IS_SCREEN_FADING_OUT(): boolean
	/**  **/
	function IS_SCREEN_FADING_IN(): boolean
	/** Fades the screen in.
	
	duration: The time the fade should take, in milliseconds. **/
	function DO_SCREEN_FADE_IN(duration: int): void
	/** Fades the screen out.
	
	duration: The time the fade should take, in milliseconds. **/
	function DO_SCREEN_FADE_OUT(duration: int): void
	/**  **/
	function SET_WIDESCREEN_BORDERS(p0: boolean, p1: int): void
	/**  **/
	function ARE_WIDESCREEN_BORDERS_ACTIVE(): boolean
	/**  **/
	function GET_GAMEPLAY_CAM_COORD(): Vector3
	/** p0 dosen't seem to change much, I tried it with 0, 1, 2:
	0-Pitch(X): -70.000092
	0-Roll(Y): -0.000001
	0-Yaw(Z): -43.886459
	1-Pitch(X): -70.000092
	1-Roll(Y): -0.000001
	1-Yaw(Z): -43.886463
	2-Pitch(X): -70.000092
	2-Roll(Y): -0.000002
	2-Yaw(Z): -43.886467 **/
	function GET_GAMEPLAY_CAM_ROT(rotationOrder: int): Vector3
	/**  **/
	function GET_GAMEPLAY_CAM_FOV(): float
	/** some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled. **/
	function SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(p0: float): void
	/** some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled. **/
	function SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(p0: float): void
	/**  **/
	function GET_GAMEPLAY_CAM_RELATIVE_HEADING(): float
	/** Sets the camera position relative to heading in float from -360 to +360.
	
	Heading is alwyas 0 in aiming camera. **/
	function SET_GAMEPLAY_CAM_RELATIVE_HEADING(heading: float): void
	/**  **/
	function GET_GAMEPLAY_CAM_RELATIVE_PITCH(): float
	/** This native sets the camera's pitch (rotation on the x-axis). **/
	function SET_GAMEPLAY_CAM_RELATIVE_PITCH(angle: float, scalingFactor: float): void
	/**  **/
	function RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER(): void
	/**  **/
	function FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(roll: float, pitch: float, yaw: float): void
	/**  **/
	function FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(p0: float, p1: float): void
	/** Does nothing **/
	function SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(yaw: float): void
	/**  **/
	function SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(pitch: float): void
	/**  **/
	function SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(p0: boolean): void
	/** Possible shake types (updated b617d):
	
	DEATH_FAIL_IN_EFFECT_SHAKE
	DRUNK_SHAKE
	FAMILY5_DRUG_TRIP_SHAKE
	HAND_SHAKE
	JOLT_SHAKE
	LARGE_EXPLOSION_SHAKE
	MEDIUM_EXPLOSION_SHAKE
	SMALL_EXPLOSION_SHAKE
	ROAD_VIBRATION_SHAKE
	SKY_DIVING_SHAKE
	VIBRATE_SHAKE
	
	Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json **/
	function SHAKE_GAMEPLAY_CAM(shakeName: string, intensity: float): void
	/**  **/
	function IS_GAMEPLAY_CAM_SHAKING(): boolean
	/** Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk. **/
	function SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(amplitude: float): void
	/**  **/
	function STOP_GAMEPLAY_CAM_SHAKING(p0: boolean): void
	/** Forces gameplay cam to specified ped as if you were the ped or spectating it **/
	function SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(ped: EntityHandle): void
	/** Examples when this function will return 0 are:
	- During busted screen.
	- When player is coming out from a hospital.
	- When player is coming out from a police station.
	- When player is buying gun from AmmuNation. **/
	function IS_GAMEPLAY_CAM_RENDERING(): boolean
	/**  **/
	function IS_INTERPOLATING_FROM_SCRIPT_CAMS(): boolean
	/**  **/
	function IS_INTERPOLATING_TO_SCRIPT_CAMS(): boolean
	/**  **/
	function SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(p0: boolean): void
	/** Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly. **/
	function DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE(): void
	/**  **/
	function IS_GAMEPLAY_CAM_LOOKING_BEHIND(): boolean
	/**  **/
	function SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(entity: EntityHandle): void
	/**  **/
	function DISABLE_CAM_COLLISION_FOR_OBJECT(entity: EntityHandle): void
	/**  **/
	function BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE(): void
	/**  **/
	function SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(entity: EntityHandle): void
	/** Sets some flag on cinematic camera **/
	function DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE(): void
	/**  **/
	function SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE(): void
	/**  **/
	function IS_SPHERE_VISIBLE(x: float, y: float, z: float, radius: float): boolean
	/**  **/
	function IS_FOLLOW_PED_CAM_ACTIVE(): boolean
	/** From the scripts:
	
	CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
	CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
	CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
	CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
	CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
	CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0); **/
	function SET_FOLLOW_PED_CAM_THIS_UPDATE(camName: string, p1: int): boolean
	/**  **/
	function USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(p0: boolean, p1: boolean): void
	/**  **/
	function SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE(): void
	/** minimum: Degrees between -180f and 180f.
	maximum: Degrees between -180f and 180f.
	
	Clamps the gameplay camera's current yaw.
	
	Eg. SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the horizontal angle directly behind the player. **/
	function SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(minimum: float, maximum: float): void
	/** minimum: Degrees between -90f and 90f.
	maximum: Degrees between -90f and 90f.
	
	Clamps the gameplay camera's current pitch.
	
	Eg. SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the vertical angle directly behind the player. **/
	function SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(minimum: float, maximum: float): void
	/** Seems to animate the gameplay camera zoom.
	
	Eg. SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1000f);
	will animate the camera zooming in from 1000 meters away.
	
	Game scripts use it like this:
	
	// Setting this to 1 prevents V key from changing zoom
	PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);
	
	// These restrict how far you can move cam up/down left/right
	CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(-20f, 50f);
	CAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f);
	
	CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f); **/
	function SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(p0: float, distance: float): void
	/** Forces gameplay cam to specified vehicle as if you were in it **/
	function SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(p0: EntityHandle, p1: int): void
	/** Disables first person camera for the current frame.
	
	Found in decompiled scripts:
	GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
	CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE(); **/
	function DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE(): void
	/**  **/
	function DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE(): void
	/**  **/
	function BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE(): void
	/**  **/
	function GET_FOLLOW_PED_CAM_ZOOM_LEVEL(): int
	/** Returns
	0 - Third Person Close
	1 - Third Person Mid
	2 - Third Person Far
	4 - First Person **/
	function GET_FOLLOW_PED_CAM_VIEW_MODE(): int
	/** Sets the type of Player camera:
	
	0 - Third Person Close
	1 - Third Person Mid
	2 - Third Person Far
	4 - First Person **/
	function SET_FOLLOW_PED_CAM_VIEW_MODE(viewMode: int): void
	/**  **/
	function IS_FOLLOW_VEHICLE_CAM_ACTIVE(): boolean
	/**  **/
	function SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(p0: boolean): void
	/**  **/
	function SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(p0: boolean, p1: boolean): void
	/**  **/
	function SET_TABLE_GAMES_CAMERA_THIS_UPDATE(hash: Hash): boolean
	/**  **/
	function GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(): int
	/**  **/
	function SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(zoomLevel: int): void
	/** Returns the type of camera:
	
	0 - Third Person Close
	1 - Third Person Mid
	2 - Third Person Far
	4 - First Person **/
	function GET_FOLLOW_VEHICLE_CAM_VIEW_MODE(): int
	/** Sets the type of Player camera in vehicles:
	
	0 - Third Person Close
	1 - Third Person Mid
	2 - Third Person Far
	4 - First Person **/
	function SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(viewMode: int): void
	/** context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT **/
	function GET_CAM_VIEW_MODE_FOR_CONTEXT(context: int): int
	/** context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT **/
	function SET_CAM_VIEW_MODE_FOR_CONTEXT(context: int, viewMode: int): void
	/** enum Context
	{
		ON_FOOT,
		IN_VEHICLE,
		ON_BIKE,
		IN_BOAT,
		IN_AIRCRAFT,
		IN_SUBMARINE,
		IN_HELI,
		IN_TURRET
	}; **/
	function GET_CAM_ACTIVE_VIEW_MODE_CONTEXT(): int
	/**  **/
	function USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE(): void
	/** Sets gameplay camera to hash **/
	function USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(camName: string): void
	/**  **/
	function FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE(): void
	/**  **/
	function SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(seatIndex: int): void
	/**  **/
	function IS_AIM_CAM_ACTIVE(): boolean
	/**  **/
	function IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE(): boolean
	/**  **/
	function IS_FIRST_PERSON_AIM_CAM_ACTIVE(): boolean
	/**  **/
	function DISABLE_AIM_CAM_THIS_UPDATE(): void
	/**  **/
	function GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(): float
	/**  **/
	function SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(zoomFactor: float): void
	/**  **/
	function SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(p0: float, p1: float): void
	/**  **/
	function SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(p0: float, p1: float): void
	/**  **/
	function SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(p0: float, p1: float): void
	/**  **/
	function SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0: float): void
	/**  **/
	function SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0: float): void
	/**  **/
	function SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(p0: boolean): void
	/**  **/
	function FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE(): void
	/**  **/
	function GET_FINAL_RENDERED_CAM_COORD(): Vector3
	/** p0 seems to consistently be 2 across scripts
	
	Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS **/
	function GET_FINAL_RENDERED_CAM_ROT(rotationOrder: int): Vector3
	/**  **/
	function GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(player: Player, rotationOrder: int): Vector3
	/** Gets some camera fov **/
	function GET_FINAL_RENDERED_CAM_FOV(): float
	/**  **/
	function GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(player: Player): float
	/**  **/
	function GET_FINAL_RENDERED_CAM_NEAR_CLIP(): float
	/**  **/
	function GET_FINAL_RENDERED_CAM_FAR_CLIP(): float
	/**  **/
	function GET_FINAL_RENDERED_CAM_NEAR_DOF(): float
	/**  **/
	function GET_FINAL_RENDERED_CAM_FAR_DOF(): float
	/**  **/
	function GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH(): float
	/**  **/
	function SET_GAMEPLAY_COORD_HINT(x: float, y: float, z: float, duration: int, blendOutDuration: int, blendInDuration: int, unk: int): void
	/**  **/
	function SET_GAMEPLAY_PED_HINT(ped: EntityHandle, x1: float, y1: float, z1: float, p4: boolean, duration: int, blendOutDuration: int, blendInDuration: int): void
	/** Focuses the camera on the specified vehicle. **/
	function SET_GAMEPLAY_VEHICLE_HINT(vehicle: EntityHandle, offsetX: float, offsetY: float, offsetZ: float, p4: boolean, time: int, easeInTime: int, easeOutTime: int): void
	/**  **/
	function SET_GAMEPLAY_OBJECT_HINT(object: EntityHandle, xOffset: float, yOffset: float, zOffset: float, p4: boolean, time: int, easeInTime: int, easeOutTime: int): void
	/** p8 could be some sort of flag. Scripts use:
	-244429742
	0
	1726668277
	1844968929 **/
	function SET_GAMEPLAY_ENTITY_HINT(entity: EntityHandle, xOffset: float, yOffset: float, zOffset: float, p4: boolean, time: int, easeInTime: int, easeOutTime: int, p8: int): void
	/**  **/
	function IS_GAMEPLAY_HINT_ACTIVE(): boolean
	/**  **/
	function STOP_GAMEPLAY_HINT(p0: boolean): void
	/** This native does absolutely nothing, just a nullsub **/
	function STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(p0: boolean): void
	/**  **/
	function STOP_CODE_GAMEPLAY_HINT(p0: boolean): void
	/**  **/
	function IS_CODE_GAMEPLAY_HINT_ACTIVE(): boolean
	/**  **/
	function SET_GAMEPLAY_HINT_FOV(FOV: float): void
	/**  **/
	function SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(value: float): void
	/**  **/
	function SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(value: float): void
	/**  **/
	function SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(xOffset: float): void
	/**  **/
	function SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(yOffset: float): void
	/**  **/
	function SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(toggle: boolean): void
	/**  **/
	function SET_CINEMATIC_BUTTON_ACTIVE(p0: boolean): void
	/**  **/
	function IS_CINEMATIC_CAM_RENDERING(): boolean
	/** p0 argument found in the b617d scripts: "DRUNK_SHAKE"
	
	Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json **/
	function SHAKE_CINEMATIC_CAM(p0: string, p1: float): void
	/**  **/
	function IS_CINEMATIC_CAM_SHAKING(): boolean
	/**  **/
	function SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(p0: float): void
	/**  **/
	function STOP_CINEMATIC_CAM_SHAKING(p0: boolean): void
	/**  **/
	function DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE(): void
	/**  **/
	function DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE(): void
	/** Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera. **/
	function INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE(): void
	/** Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera. **/
	function INVALIDATE_IDLE_CAM(): void
	/**  **/
	function IS_CINEMATIC_IDLE_CAM_RENDERING(): boolean
	/**  **/
	function IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING(): boolean
	/**  **/
	function CREATE_CINEMATIC_SHOT(p0: any, p1: int, p2: any, entity: EntityHandle): void
	/**  **/
	function IS_CINEMATIC_SHOT_ACTIVE(p0: any): boolean
	/** Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT) **/
	function STOP_CINEMATIC_SHOT(p0: Hash): void
	/**  **/
	function FORCE_CINEMATIC_RENDERING_THIS_UPDATE(p0: boolean): void
	/**  **/
	function SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE(): void
	/** Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work. **/
	function SET_CINEMATIC_MODE_ACTIVE(toggle: boolean): void
	/**  **/
	function IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING(): boolean
	/**  **/
	function DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE(): boolean
	/**  **/
	function IS_BONNET_CINEMATIC_CAM_RENDERING(): boolean
	/** Tests some cinematic camera flags **/
	function IS_CINEMATIC_CAM_INPUT_ACTIVE(): boolean
	/**  **/
	function IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE(): void
	/**  **/
	function BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE(): void
	/**  **/
	function STOP_CUTSCENE_CAM_SHAKING(p0: any): void
	/** Hardcoded to only work in multiplayer. **/
	function SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(p0: float): void
	/**  **/
	function GET_FOCUS_PED_ON_SCREEN(p0: float, p1: int, p2: float, p3: float, p4: float, p5: float, p6: float, p7: int, p8: int): EntityHandle
	/**  **/
	function DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE(): void
	/** if p0 is 0, effect is cancelled
	
	if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
	
	if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled. **/
	function SET_CAM_DEATH_FAIL_EFFECT_STATE(p0: int): void
	/**  **/
	function SET_FIRST_PERSON_FLASH_EFFECT_TYPE(p0: any): void
	/** From b617 scripts:
	
	CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("DINGHY");
	CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("ISSI2");
	CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("SPEEDO"); **/
	function SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(vehicleName: string): void
	/**  **/
	function SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(vehicleModel: Hash): void
	/**  **/
	function IS_ALLOWED_INDEPENDENT_CAMERA_MODES(): boolean
	/**  **/
	function CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE(): void
	/**  **/
	function REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER(): float
}

/** @noSelf **/
declare namespace CLOCK {
	/** SET_CLOCK_TIME(12, 34, 56); **/
	function SET_CLOCK_TIME(hour: int, minute: int, second: int): void
	/**  **/
	function PAUSE_CLOCK(toggle: boolean): void
	/**  **/
	function ADVANCE_CLOCK_TIME_TO(hour: int, minute: int, second: int): void
	/**  **/
	function ADD_TO_CLOCK_TIME(hours: int, minutes: int, seconds: int): void
	/** Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9) **/
	function GET_CLOCK_HOURS(): int
	/** Gets the current ingame clock minute. **/
	function GET_CLOCK_MINUTES(): int
	/** Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life. **/
	function GET_CLOCK_SECONDS(): int
	/**  **/
	function SET_CLOCK_DATE(day: int, month: int, year: int): void
	/** Gets the current day of the week.
	
	0: Sunday
	1: Monday
	2: Tuesday
	3: Wednesday
	4: Thursday
	5: Friday
	6: Saturday **/
	function GET_CLOCK_DAY_OF_WEEK(): int
	/**  **/
	function GET_CLOCK_DAY_OF_MONTH(): int
	/**  **/
	function GET_CLOCK_MONTH(): int
	/**  **/
	function GET_CLOCK_YEAR(): int
	/**  **/
	function GET_MILLISECONDS_PER_GAME_MINUTE(): int
	/** Gets system time as year, month, day, hour, minute and second.
	
	Example usage:
	
	    int year;
	 int month;
	    int day;
	  int hour;
	 int minute;
	   int second;
	
	 TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
	 **/
	function GET_POSIX_TIME(year: IntPointer, month: IntPointer, day: IntPointer, hour: IntPointer, minute: IntPointer, second: IntPointer): void
	/** Gets current UTC time **/
	function GET_UTC_TIME(year: IntPointer, month: IntPointer, day: IntPointer, hour: IntPointer, minute: IntPointer, second: IntPointer): void
	/** Gets local system time as year, month, day, hour, minute and second.
	
	Example usage:
	
	int year;
	int month;
	int day;
	int hour;
	int minute;
	int second;
	or use std::tm struct
	
	TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
	 **/
	function GET_LOCAL_TIME(year: IntPointer, month: IntPointer, day: IntPointer, hour: IntPointer, minute: IntPointer, second: IntPointer): void
}

/** @noSelf **/
declare namespace CUTSCENE {
	/** flags: Usually 8
	Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json **/
	function REQUEST_CUTSCENE(cutsceneName: string, flags: int): void
	/** flags: Usually 8
	
	playbackFlags: Which scenes should be played.
	Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
	Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json **/
	function REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(cutsceneName: string, playbackFlags: int, flags: int): void
	/**  **/
	function REMOVE_CUTSCENE(): void
	/**  **/
	function HAS_CUTSCENE_LOADED(): boolean
	/** Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json **/
	function HAS_THIS_CUTSCENE_LOADED(cutsceneName: string): boolean
	/** Sets the cutscene's owning thread ID. **/
	function SET_SCRIPT_CAN_START_CUTSCENE(threadId: int): void
	/**  **/
	function CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY(): boolean
	/**  **/
	function IS_CUTSCENE_PLAYBACK_FLAG_SET(flag: int): boolean
	/**  **/
	function SET_CUTSCENE_ENTITY_STREAMING_FLAGS(cutsceneEntName: string, p1: int, p2: int): void
	/** Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
	Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json **/
	function REQUEST_CUT_FILE(cutsceneName: string): void
	/** Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
	Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json **/
	function HAS_CUT_FILE_LOADED(cutsceneName: string): boolean
	/** Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
	Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json **/
	function REMOVE_CUT_FILE(cutsceneName: string): void
	/** Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json **/
	function GET_CUT_FILE_CONCAT_COUNT(cutsceneName: string): int
	/** flags: Usually 0. **/
	function START_CUTSCENE(flags: int): void
	/** flags: Usually 0. **/
	function START_CUTSCENE_AT_COORDS(x: float, y: float, z: float, flags: int): void
	/**  **/
	function STOP_CUTSCENE(p0: boolean): void
	/**  **/
	function STOP_CUTSCENE_IMMEDIATELY(): void
	/** p3 could be heading. Needs more research. **/
	function SET_CUTSCENE_ORIGIN(x: float, y: float, z: float, p3: float, p4: int): void
	/**  **/
	function SET_CUTSCENE_ORIGIN_AND_ORIENTATION(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, p6: int): void
	/**  **/
	function GET_CUTSCENE_TIME(): int
	/**  **/
	function GET_CUTSCENE_TOTAL_DURATION(): int
	/**  **/
	function GET_CUTSCENE_END_TIME(): int
	/**  **/
	function WAS_CUTSCENE_SKIPPED(): boolean
	/**  **/
	function HAS_CUTSCENE_FINISHED(): boolean
	/**  **/
	function IS_CUTSCENE_ACTIVE(): boolean
	/**  **/
	function IS_CUTSCENE_PLAYING(): boolean
	/**  **/
	function GET_CUTSCENE_SECTION_PLAYING(): int
	/**  **/
	function GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(cutsceneEntName: string, modelHash: Hash): EntityHandle
	/**  **/
	function GET_CUTSCENE_CONCAT_SECTION_PLAYING(): int
	/** This function is hard-coded to always return 1. **/
	function IS_CUTSCENE_AUTHORIZED(cutsceneName: string): boolean
	/**  **/
	function DOES_CUTSCENE_HANDLE_EXIST(p0: any): int
	/**  **/
	function REGISTER_ENTITY_FOR_CUTSCENE(cutscenePed: EntityHandle, cutsceneEntName: string, p2: int, modelHash: Hash, p4: int): void
	/**  **/
	function GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(cutsceneEntName: string, modelHash: Hash): EntityHandle
	/** Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(modelHash: Hash): void
	/** Only used twice in R* scripts **/
	function SET_CUTSCENE_TRIGGER_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): void
	/** modelHash (p1) was always 0 in R* scripts **/
	function CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName: string, modelHash: Hash): boolean
	/**  **/
	function CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName: string, modelHash: Hash): boolean
	/**  **/
	function CAN_SET_EXIT_STATE_FOR_CAMERA(p0: boolean): boolean
	/** Toggles a value (bool) for cutscenes. **/
	function SET_PAD_CAN_SHAKE_DURING_CUTSCENE(toggle: boolean): void
	/**  **/
	function SET_CUTSCENE_FADE_VALUES(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void
	/**  **/
	function SET_CUTSCENE_MULTIHEAD_FADE(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void
	/**  **/
	function SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(p0: boolean): void
	/**  **/
	function IS_MULTIHEAD_FADE_UP(): boolean
	/** Stops current cutscene with a fade transition
	p0: always true in R* Scripts
	You will need to manually fade the screen back in
	SET_CUTSCENE_INPUTS_PARTIALLY_FADE? **/
	function NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(p0: boolean): void
	/**  **/
	function SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(p0: boolean): void
	/**  **/
	function CAN_USE_MOBILE_PHONE_DURING_CUTSCENE(): boolean
	/**  **/
	function SET_CUTSCENE_CAN_BE_SKIPPED(p0: boolean): void
	/**  **/
	function SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE(): void
	/** Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json **/
	function SET_CUTSCENE_PED_COMPONENT_VARIATION(cutsceneEntName: string, p1: int, p2: int, p3: int, modelHash: Hash): void
	/**  **/
	function SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(cutsceneEntName: string, ped: EntityHandle, modelHash: Hash): void
	/**  **/
	function DOES_CUTSCENE_ENTITY_EXIST(cutsceneEntName: string, modelHash: Hash): boolean
	/** Thanks R*! ;)
	
	if ((l_161 == 0) || (l_161 == 2)) {
	    sub_2ea27("Trying to set Jimmy prop variation");
	    CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION("Jimmy_Boston", 1, 0, 0, 0);
	}
	
	Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json **/
	function SET_CUTSCENE_PED_PROP_VARIATION(cutsceneEntName: string, p1: int, p2: int, p3: int, modelHash: Hash): void
	/** Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research. **/
	function HAS_CUTSCENE_CUT_THIS_FRAME(): boolean
}

/** @noSelf **/
declare namespace DATAFILE {
	/** Adds the given request ID to the watch list. **/
	function DATAFILE_WATCH_REQUEST_ID(id: int): void
	/**  **/
	function DATAFILE_CLEAR_WATCH_LIST(): void
	/**  **/
	function DATAFILE_IS_VALID_REQUEST_ID(index: int): boolean
	/**  **/
	function DATAFILE_HAS_LOADED_FILE_DATA(p0: any): boolean
	/**  **/
	function DATAFILE_HAS_VALID_FILE_DATA(p0: any): boolean
	/**  **/
	function DATAFILE_SELECT_ACTIVE_FILE(p0: any, p1: any): boolean
	/**  **/
	function DATAFILE_DELETE_REQUESTED_FILE(p0: any): boolean
	/**  **/
	function UGC_CREATE_CONTENT(data: Address, dataCount: int, contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean, p7: any): boolean
	/**  **/
	function UGC_CREATE_MISSION(contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean, p5: any): boolean
	/**  **/
	function UGC_UPDATE_CONTENT(contentId: string, data: Address, dataCount: int, contentName: string, description: string, tagsCsv: string, contentTypeName: string, p7: any): boolean
	/**  **/
	function UGC_UPDATE_MISSION(contentId: string, contentName: string, description: string, tagsCsv: string, contentTypeName: string, p5: any): boolean
	/**  **/
	function UGC_SET_PLAYER_DATA(contentId: string, rating: float, contentTypeName: string, p3: any): boolean
	/**  **/
	function DATAFILE_SELECT_UGC_DATA(p0: int, p1: any): boolean
	/**  **/
	function DATAFILE_SELECT_UGC_STATS(p0: int, p1: boolean, p2: any): boolean
	/**  **/
	function DATAFILE_SELECT_UGC_PLAYER_DATA(p0: int, p1: any): boolean
	/**  **/
	function DATAFILE_SELECT_CREATOR_STATS(p0: int, p1: any): boolean
	/** Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
	
	Returns whether or not the file was successfully loaded.
	
	Example:
	DATAFILE::DATAFILE_LOAD_OFFLINE_UGC("RockstarPlaylists") // loads "rockstarplaylists_00.ugc" **/
	function DATAFILE_LOAD_OFFLINE_UGC(filename: string, p1: any): boolean
	/**  **/
	function DATAFILE_CREATE(p0: int): void
	/**  **/
	function DATAFILE_DELETE(p0: int): void
	/**  **/
	function DATAFILE_STORE_MISSION_HEADER(p0: int): void
	/**  **/
	function DATAFILE_FLUSH_MISSION_HEADER(): void
	/**  **/
	function DATAFILE_GET_FILE_DICT(p0: int): Address
	/**  **/
	function DATAFILE_START_SAVE_TO_CLOUD(filename: string, p1: any): boolean
	/**  **/
	function DATAFILE_UPDATE_SAVE_TO_CLOUD(p0: BoolPointer): boolean
	/**  **/
	function DATAFILE_IS_SAVE_PENDING(): boolean
	/**  **/
	function DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(p0: any, p1: any): boolean
	/**  **/
	function DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(p0: any): void
	/**  **/
	function DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(p0: any): Address
	/**  **/
	function DATADICT_SET_BOOL(objectData: Address, key: string, value: boolean): void
	/**  **/
	function DATADICT_SET_INT(objectData: Address, key: string, value: int): void
	/**  **/
	function DATADICT_SET_FLOAT(objectData: Address, key: string, value: float): void
	/**  **/
	function DATADICT_SET_STRING(objectData: Address, key: string, value: string): void
	/**  **/
	function DATADICT_SET_VECTOR(objectData: Address, key: string, valueX: float, valueY: float, valueZ: float): void
	/**  **/
	function DATADICT_CREATE_DICT(objectData: Address, key: string): Address
	/**  **/
	function DATADICT_CREATE_ARRAY(objectData: Address, key: string): Address
	/**  **/
	function DATADICT_GET_BOOL(objectData: Address, key: string): boolean
	/**  **/
	function DATADICT_GET_INT(objectData: Address, key: string): int
	/**  **/
	function DATADICT_GET_FLOAT(objectData: Address, key: string): float
	/**  **/
	function DATADICT_GET_STRING(objectData: Address, key: string): string
	/**  **/
	function DATADICT_GET_VECTOR(objectData: Address, key: string): Vector3
	/**  **/
	function DATADICT_GET_DICT(objectData: Address, key: string): Address
	/**  **/
	function DATADICT_GET_ARRAY(objectData: Address, key: string): Address
	/** Types:
	1 = Boolean
	2 = Integer
	3 = Float
	4 = String
	5 = Vector3
	6 = Object
	7 = Array **/
	function DATADICT_GET_TYPE(objectData: Address, key: string): int
	/**  **/
	function DATAARRAY_ADD_BOOL(arrayData: Address, value: boolean): void
	/**  **/
	function DATAARRAY_ADD_INT(arrayData: Address, value: int): void
	/**  **/
	function DATAARRAY_ADD_FLOAT(arrayData: Address, value: float): void
	/**  **/
	function DATAARRAY_ADD_STRING(arrayData: Address, value: string): void
	/**  **/
	function DATAARRAY_ADD_VECTOR(arrayData: Address, valueX: float, valueY: float, valueZ: float): void
	/**  **/
	function DATAARRAY_ADD_DICT(arrayData: Address): Address
	/**  **/
	function DATAARRAY_GET_BOOL(arrayData: Address, arrayIndex: int): boolean
	/**  **/
	function DATAARRAY_GET_INT(arrayData: Address, arrayIndex: int): int
	/**  **/
	function DATAARRAY_GET_FLOAT(arrayData: Address, arrayIndex: int): float
	/**  **/
	function DATAARRAY_GET_STRING(arrayData: Address, arrayIndex: int): string
	/**  **/
	function DATAARRAY_GET_VECTOR(arrayData: Address, arrayIndex: int): Vector3
	/**  **/
	function DATAARRAY_GET_DICT(arrayData: Address, arrayIndex: int): Address
	/**  **/
	function DATAARRAY_GET_COUNT(arrayData: Address): int
	/** Types:
	1 = Boolean
	2 = Integer
	3 = Float
	4 = String
	5 = Vector3
	6 = Object
	7 = Array **/
	function DATAARRAY_GET_TYPE(arrayData: Address, arrayIndex: int): int
}

/** @noSelf **/
declare namespace DECORATOR {
	/**  **/
	function DECOR_SET_TIME(entity: EntityHandle, propertyName: string, timestamp: int): boolean
	/** This function sets metadata of type bool to specified entity.
	 **/
	function DECOR_SET_BOOL(entity: EntityHandle, propertyName: string, value: boolean): boolean
	/**  **/
	function DECOR_SET_FLOAT(entity: EntityHandle, propertyName: string, value: float): boolean
	/** Sets property to int. **/
	function DECOR_SET_INT(entity: EntityHandle, propertyName: string, value: int): boolean
	/**  **/
	function DECOR_GET_BOOL(entity: EntityHandle, propertyName: string): boolean
	/**  **/
	function DECOR_GET_FLOAT(entity: EntityHandle, propertyName: string): float
	/**  **/
	function DECOR_GET_INT(entity: EntityHandle, propertyName: string): int
	/** Returns whether or not the specified property is set for the entity. **/
	function DECOR_EXIST_ON(entity: EntityHandle, propertyName: string): boolean
	/**  **/
	function DECOR_REMOVE(entity: EntityHandle, propertyName: string): boolean
	/** https://alloc8or.re/gta5/doc/enums/eDecorType.txt **/
	function DECOR_REGISTER(propertyName: string, type: int): void
	/** type: see DECOR_REGISTER **/
	function DECOR_IS_REGISTERED_AS_TYPE(propertyName: string, type: int): boolean
	/** Called after all decorator type initializations. **/
	function DECOR_REGISTER_LOCK(): void
}

/** @noSelf **/
declare namespace DLC {
	/**  **/
	function ARE_ANY_CCS_PENDING(): boolean
	/** Returns true if the given DLC pack is present. **/
	function IS_DLC_PRESENT(dlcHash: Hash): boolean
	/** This function is hard-coded to always return 1. **/
	function DLC_CHECK_CLOUD_DATA_CORRECT(): boolean
	/** This function is hard-coded to always return 0. **/
	function GET_EXTRACONTENT_CLOUD_RESULT(): int
	/** This function is hard-coded to always return 1. **/
	function DLC_CHECK_COMPAT_PACK_CONFIGURATION(): boolean
	/**  **/
	function GET_EVER_HAD_BAD_PACK_ORDER(): boolean
	/**  **/
	function GET_IS_LOADING_SCREEN_ACTIVE(): boolean
	/**  **/
	function GET_IS_INITIAL_LOADING_SCREEN_ACTIVE(): boolean
	/** Sets the value of the specified variable to 0.
	Always returns true. **/
	function HAS_CLOUD_REQUESTS_FINISHED(p0: BoolPointer, unused: int): boolean
	/** Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, ON_ENTER_MP is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
	Works in singleplayer. **/
	function ON_ENTER_SP(): void
	/** This loads the GTA:O dlc map parts (high end garages, apartments).
	Works in singleplayer.
	In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1); **/
	function ON_ENTER_MP(): void
}

/** @noSelf **/
declare namespace ENTITY {
	/** Checks whether an entity exists in the game world. **/
	function DOES_ENTITY_EXIST(entity: EntityHandle): boolean
	/**  **/
	function DOES_ENTITY_BELONG_TO_THIS_SCRIPT(entity: EntityHandle, p1: boolean): boolean
	/**  **/
	function DOES_ENTITY_HAVE_DRAWABLE(entity: EntityHandle): boolean
	/**  **/
	function DOES_ENTITY_HAVE_PHYSICS(entity: EntityHandle): boolean
	/**  **/
	function DOES_ENTITY_HAVE_SKELETON(entity: EntityHandle): boolean
	/**  **/
	function DOES_ENTITY_HAVE_ANIM_DIRECTOR(entity: EntityHandle): boolean
	/** P3 is always 3 as far as i cant tell
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function HAS_ENTITY_ANIM_FINISHED(entity: EntityHandle, animDict: string, animName: string, p3: int): boolean
	/**  **/
	function HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(entity: EntityHandle): boolean
	/**  **/
	function HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(entity: EntityHandle): boolean
	/**  **/
	function HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(entity: EntityHandle): boolean
	/** Entity 1 = Victim
	Entity 2 = Attacker
	
	p2 seems to always be 1 **/
	function HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(entity1: EntityHandle, entity2: EntityHandle, p2: boolean): boolean
	/** traceType is always 17 in the scripts.
	
	There is other codes used for traceType:
	19 - in jewelry_prep1a
	126 - in am_hunt_the_beast
	256 & 287 - in fm_mission_controller **/
	function HAS_ENTITY_CLEAR_LOS_TO_ENTITY(entity1: EntityHandle, entity2: EntityHandle, traceType: int): boolean
	/**  **/
	function HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(entity1: EntityHandle, entity2: EntityHandle, traceType: int): boolean
	/** Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
	This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops **/
	function HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(entity1: EntityHandle, entity2: EntityHandle): boolean
	/** Called on tick.
	Tested with vehicles, returns true whenever the vehicle is touching any entity.
	
	Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true. **/
	function HAS_ENTITY_COLLIDED_WITH_ANYTHING(entity: EntityHandle): boolean
	/**  **/
	function GET_LAST_MATERIAL_HIT_BY_ENTITY(entity: EntityHandle): Hash
	/**  **/
	function GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(entity: EntityHandle): Vector3
	/** Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter. **/
	function FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(entity: EntityHandle): void
	/** Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
	
	Example:
	0.000000 - mark the starting of animation.
	0.500000 - mark the midpoint of the animation.
	1.000000 - mark the end of animation.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function GET_ENTITY_ANIM_CURRENT_TIME(entity: EntityHandle, animDict: string, animName: string): float
	/** Returns a float value representing animation's total playtime in milliseconds.
	
	Example:
	GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b") 
	return 20800.000000
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function GET_ENTITY_ANIM_TOTAL_TIME(entity: EntityHandle, animDict: string, animName: string): float
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function GET_ANIM_DURATION(animDict: string, animName: string): float
	/**  **/
	function GET_ENTITY_ATTACHED_TO(entity: EntityHandle): EntityHandle
	/** Gets the current coordinates for a specified entity.
	`entity` = The entity to get the coordinates from.
	`alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive. **/
	function GET_ENTITY_COORDS(entity: EntityHandle, alive: boolean): Vector3
	/** Gets the entity's forward vector. **/
	function GET_ENTITY_FORWARD_VECTOR(entity: EntityHandle): Vector3
	/** Gets the X-component of the entity's forward vector. **/
	function GET_ENTITY_FORWARD_X(entity: EntityHandle): float
	/** Gets the Y-component of the entity's forward vector. **/
	function GET_ENTITY_FORWARD_Y(entity: EntityHandle): float
	/** Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity. **/
	function GET_ENTITY_HEADING(entity: EntityHandle): float
	/** Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
	
	NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so. **/
	function GET_ENTITY_HEADING_FROM_EULERS(entity: EntityHandle): float
	/** Returns an integer value of entity's current health.
	
	Example of range for ped:
	- Player [0 to 200]
	- Ped [100 to 200]
	- Vehicle [0 to 1000]
	- Object [0 to 1000]
	
	Health is actually a float value but this native casts it to int.
	In order to get the actual value, do:
	float health = *(float *)(entityAddress + 0x280); **/
	function GET_ENTITY_HEALTH(entity: EntityHandle): int
	/** Return an integer value of entity's maximum health.
	
	Example:
	- Player = 200
	- Ped = 150 **/
	function GET_ENTITY_MAX_HEALTH(entity: EntityHandle): int
	/** For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849 **/
	function SET_ENTITY_MAX_HEALTH(entity: EntityHandle, value: int): void
	/**  **/
	function GET_ENTITY_HEIGHT(entity: EntityHandle, X: float, Y: float, Z: float, atTop: boolean, inWorldCoords: boolean): float
	/** Return height (z-dimension) above ground. 
	Example: The pilot in a titan plane is 1.844176 above ground.
	
	How can i convert it to meters?
	Everything seems to be in meters, probably this too. **/
	function GET_ENTITY_HEIGHT_ABOVE_GROUND(entity: EntityHandle): float
	/**  **/
	function GET_ENTITY_MATRIX(entity: EntityHandle, forwardVector: Vector3Pointer, rightVector: Vector3Pointer, upVector: Vector3Pointer, position: Vector3Pointer): void
	/** Returns the model hash from the entity **/
	function GET_ENTITY_MODEL(entity: EntityHandle): Hash
	/** Converts world coords (posX - Z) to coords relative to the entity
	
	Example:
	posX is given as 50
	entity's x coord is 40
	the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though). **/
	function GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(entity: EntityHandle, posX: float, posY: float, posZ: float): Vector3
	/** Offset values are relative to the entity.
	
	x = left/right
	y = forward/backward
	z = up/down **/
	function GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity: EntityHandle, offsetX: float, offsetY: float, offsetZ: float): Vector3
	/**  **/
	function GET_ENTITY_PITCH(entity: EntityHandle): float
	/** w is the correct parameter name! **/
	function GET_ENTITY_QUATERNION(entity: EntityHandle, x: FloatPointer, y: FloatPointer, z: FloatPointer, w: FloatPointer): void
	/** Displays the current ROLL axis of the entity [-180.0000/180.0000+]
	(Sideways Roll) such as a vehicle tipped on its side **/
	function GET_ENTITY_ROLL(entity: EntityHandle): float
	/** rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.
	
	rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
	What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
	
	What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif
	
	Rotation Orders:
	0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
	1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
	2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
	3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
	4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
	5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis. **/
	function GET_ENTITY_ROTATION(entity: EntityHandle, rotationOrder: int): Vector3
	/**  **/
	function GET_ENTITY_ROTATION_VELOCITY(entity: EntityHandle): Vector3
	/** Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr. **/
	function GET_ENTITY_SCRIPT(entity: EntityHandle, script: ScriptHandlePointer): string
	/** result is in meters per second
	
	------------------------------------------------------------
	So would the conversion to mph and km/h, be along the lines of this.
	
	float speed = GET_ENTITY_SPEED(veh);
	float kmh = (speed * 3.6);
	float mph = (speed * 2.236936);
	------------------------------------------------------------ **/
	function GET_ENTITY_SPEED(entity: EntityHandle): float
	/** Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).  **/
	function GET_ENTITY_SPEED_VECTOR(entity: EntityHandle, relative: boolean): Vector3
	/**  **/
	function GET_ENTITY_UPRIGHT_VALUE(entity: EntityHandle): float
	/**  **/
	function GET_ENTITY_VELOCITY(entity: EntityHandle): Vector3
	/** Simply returns whatever is passed to it (Regardless of whether the handle is valid or not). **/
	function GET_OBJECT_INDEX_FROM_ENTITY_INDEX(entity: EntityHandle): EntityHandle
	/** Simply returns whatever is passed to it (Regardless of whether the handle is valid or not). **/
	function GET_PED_INDEX_FROM_ENTITY_INDEX(entity: EntityHandle): EntityHandle
	/** Simply returns whatever is passed to it (Regardless of whether the handle is valid or not). **/
	function GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(entity: EntityHandle): EntityHandle
	/** Returns the coordinates of an entity-bone. **/
	function GET_WORLD_POSITION_OF_ENTITY_BONE(entity: EntityHandle, boneIndex: int): Vector3
	/**  **/
	function GET_NEAREST_PLAYER_TO_ENTITY(entity: EntityHandle): Player
	/**  **/
	function GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(entity: EntityHandle, team: int): Player
	/** Returns:
	0 = no entity
	1 = ped
	2 = vehicle
	3 = object **/
	function GET_ENTITY_TYPE(entity: EntityHandle): int
	/** A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt **/
	function GET_ENTITY_POPULATION_TYPE(entity: EntityHandle): int
	/**  **/
	function IS_AN_ENTITY(handle: ScriptHandle): boolean
	/**  **/
	function IS_ENTITY_A_PED(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_A_MISSION_ENTITY(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_A_VEHICLE(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_AN_OBJECT(entity: EntityHandle): boolean
	/** Checks if entity is within x/y/zSize distance of x/y/z. 
	
	Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0 **/
	function IS_ENTITY_AT_COORD(entity: EntityHandle, xPos: float, yPos: float, zPos: float, xSize: float, ySize: float, zSize: float, p7: boolean, p8: boolean, p9: int): boolean
	/** Checks if entity1 is within the box defined by x/y/zSize of entity2.
	
	Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0 **/
	function IS_ENTITY_AT_ENTITY(entity1: EntityHandle, entity2: EntityHandle, xSize: float, ySize: float, zSize: float, p5: boolean, p6: boolean, p7: int): boolean
	/** Whether the entity is attached to any other entity. **/
	function IS_ENTITY_ATTACHED(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_ATTACHED_TO_ANY_OBJECT(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_ATTACHED_TO_ANY_PED(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_ATTACHED_TO_ENTITY(from: EntityHandle, to: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_DEAD(entity: EntityHandle, p1: boolean): boolean
	/**  **/
	function IS_ENTITY_IN_AIR(entity: EntityHandle): boolean
	/** `p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``
	`p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.
	See IS_POINT_IN_ANGLED_AREA for the definition of an angled area. **/
	function IS_ENTITY_IN_ANGLED_AREA(entity: EntityHandle, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float, debug: boolean, includeZ: boolean, p10: any): boolean
	/**  **/
	function IS_ENTITY_IN_AREA(entity: EntityHandle, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, p7: boolean, p8: boolean, p9: any): boolean
	/** Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json **/
	function IS_ENTITY_IN_ZONE(entity: EntityHandle, zone: string): boolean
	/**  **/
	function IS_ENTITY_IN_WATER(entity: EntityHandle): boolean
	/** Get how much of the entity is submerged.  1.0f is whole entity. **/
	function GET_ENTITY_SUBMERGED_LEVEL(entity: EntityHandle): float
	/**  **/
	function SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(entity: EntityHandle, toggle: boolean): void
	/** Returns true if the entity is in between the minimum and maximum values for the 2d screen coords. 
	This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location. 
	Chipping **/
	function IS_ENTITY_ON_SCREEN(entity: EntityHandle): boolean
	/** See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447
	
	Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)
	
	p4 is always 3 in the scripts.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function IS_ENTITY_PLAYING_ANIM(entity: EntityHandle, animDict: string, animName: string, taskFlag: int): boolean
	/** a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "TASK::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.
	
	how can I make an entity static??? **/
	function IS_ENTITY_STATIC(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_TOUCHING_ENTITY(entity: EntityHandle, targetEntity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_TOUCHING_MODEL(entity: EntityHandle, modelHash: Hash): boolean
	/**  **/
	function IS_ENTITY_UPRIGHT(entity: EntityHandle, angle: float): boolean
	/**  **/
	function IS_ENTITY_UPSIDEDOWN(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_VISIBLE(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_VISIBLE_TO_SCRIPT(entity: EntityHandle): boolean
	/**  **/
	function IS_ENTITY_OCCLUDED(entity: EntityHandle): boolean
	/**  **/
	function WOULD_ENTITY_BE_OCCLUDED(entityModelHash: Hash, x: float, y: float, z: float, p4: boolean): boolean
	/**  **/
	function IS_ENTITY_WAITING_FOR_WORLD_COLLISION(entity: EntityHandle): boolean
	/** Applies a force to the specified entity.
	
	**List of force types (p1)**:
	public enum ForceType
	{
	    MinForce = 0,
	    MaxForceRot = 1,
	    MinForce2 = 2,
	    MaxForceRot2 = 3,
	    ForceNoRot = 4,
	    ForceRotPlusForce = 5
	}
	Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.
	
	p6/relative - makes the xyz force not relative to world coords, but to something else
	p7/highForce - setting false will make the force really low **/
	function APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(entity: EntityHandle, forceType: int, x: float, y: float, z: float, p5: boolean, isDirectionRel: boolean, isForceRel: boolean, p8: boolean): void
	/** Documented here:
	gtaforums.com/topic/885669-precisely-define-object-physics/
	gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/
	
	forceFlags:
	First bit (lowest): Strong force flag, factor 100
	Second bit: Unkown flag
	Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
	If higher bits are unequal 0 the function doesn't applay any forces at all.
	(As integer possible values are 0-7)
	
	0: weak force
	1: strong force
	2: same as 0 (2nd bit?)
	3: same as 1
	4: weak momentum
	5: strong momentum
	6: same as 4
	7: same as 5
	
	isLocal: vector defined in local (body-fixed) coordinate frame
	isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.
	
	p8 !!! Whenever I set this !=0, my script stopped. **/
	function APPLY_FORCE_TO_ENTITY(entity: EntityHandle, forceFlags: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: boolean, ignoreUpVec: boolean, isForceRel: boolean, p12: boolean, p13: boolean): void
	/** Attaches entity1 to bone (boneIndex) of entity2.
	
	boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
	
	useSoftPinning - if set to false attached entity will not detach when fixed
	collision - controls collision between the two entities (FALSE disables collision).
	isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
	vertexIndex - position of vertex
	fixedRot - if false it ignores entity vector 
	 **/
	function ATTACH_ENTITY_TO_ENTITY(entity1: EntityHandle, entity2: EntityHandle, boneIndex: int, xPos: float, yPos: float, zPos: float, xRot: float, yRot: float, zRot: float, p9: boolean, useSoftPinning: boolean, collision: boolean, isPed: boolean, vertexIndex: int, fixedRot: boolean, p15: any): void
	/**  **/
	function ATTACH_ENTITY_BONE_TO_ENTITY_BONE(entity1: EntityHandle, entity2: EntityHandle, boneIndex1: int, boneIndex2: int, p4: boolean, p5: boolean): void
	/**  **/
	function ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(entity1: EntityHandle, entity2: EntityHandle, boneIndex1: int, boneIndex2: int, p4: boolean, p5: boolean): void
	/** breakForce is the amount of force required to break the bond.
	p14 - is always 1 in scripts
	p15 - is 1 or 0 in scripts - unknoun what it does
	p16 - controls collision between the two entities (FALSE disables collision).
	p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
	p18 - is always 2 in scripts.
	
	 **/
	function ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(entity1: EntityHandle, entity2: EntityHandle, boneIndex1: int, boneIndex2: int, xPos1: float, yPos1: float, zPos1: float, xPos2: float, yPos2: float, zPos2: float, xRot: float, yRot: float, zRot: float, breakForce: float, fixedRot: boolean, p15: boolean, collision: boolean, p17: boolean, p18: int): void
	/** Called to update entity attachments. **/
	function PROCESS_ENTITY_ATTACHMENTS(entity: EntityHandle): void
	/** Returns the index of the bone. If the bone was not found, -1 will be returned. 
	
	list:
	https://pastebin.com/D7JMnX1g
	
	BoneNames:
	  chassis,
	  windscreen,
	   seat_pside_r,
	 seat_dside_r,
	 bodyshell,
	    suspension_lm,
	    suspension_lr,
	    platelight,
	   attach_female,
	    attach_male,
	  bonnet,
	   boot,
	 chassis_dummy,  //Center of the dummy
	 chassis_Control,    //Not found yet
	   door_dside_f,   //Door left, front
	    door_dside_r,   //Door left, back
	 door_pside_f,   //Door right, front
	   door_pside_r,   //Door right, back
	    Gun_GripR,
	    windscreen_f,
	 platelight, //Position where the light above the numberplate is located
	   VFX_Emitter,
	  window_lf,  //Window left, front
	  window_lr,  //Window left, back
	   window_rf,  //Window right, front
	 window_rr,  //Window right, back
	  engine, //Position of the engine
	  gun_ammo,
	 ROPE_ATTATCH,   //Not misspelled. In script "finale_heist2b.c4".
	    wheel_lf,   //Wheel left, front
	   wheel_lr,   //Wheel left, back
	    wheel_rf,   //Wheel right, front
	  wheel_rr,   //Wheel right, back
	   exhaust,    //Exhaust. shows only the position of the stock-exhaust
	   overheat,   //A position on the engine(not exactly sure, how to name it)
	  misc_e, //Not a car-bone.
	 seat_dside_f,   //Driver-seat
	 seat_pside_f,   //Seat next to driver
	 Gun_Nuzzle,
	   seat_r
	
	I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
	
	 **/
	function GET_ENTITY_BONE_INDEX_BY_NAME(entity: EntityHandle, boneName: string): int
	/**  **/
	function CLEAR_ENTITY_LAST_DAMAGE_ENTITY(entity: EntityHandle): void
	/** Deletes the specified entity, then sets the handle pointed to by the pointer to NULL. **/
	function DELETE_ENTITY(entity: Address): void
	/** If `collision` is set to true, both entities won't collide with the other until the distance between them is above 4 meters.
	Set `dynamic` to true to keep velocity after dettaching **/
	function DETACH_ENTITY(entity: EntityHandle, dynamic: boolean, collision: boolean): void
	/** Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS. **/
	function FREEZE_ENTITY_POSITION(entity: EntityHandle, toggle: boolean): void
	/** True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
	
	"Allow Freeze If No Collision" **/
	function SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(entity: EntityHandle, toggle: boolean): void
	/** delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
	
	The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function PLAY_ENTITY_ANIM(entity: EntityHandle, animName: string, animDict: string, p3: float, loop: boolean, stayInAnim: boolean, p6: boolean, delta: float, bitset: any): boolean
	/** p4 and p7 are usually 1000.0f.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function PLAY_SYNCHRONIZED_ENTITY_ANIM(entity: EntityHandle, syncedScene: int, animation: string, propName: string, p4: float, p5: float, p6: any, p7: float): boolean
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(p0: float, p1: float, p2: float, p3: float, p4: any, p5: any, p6: Address, p7: Address, p8: float, p9: float, p10: any, p11: float): boolean
	/**  **/
	function STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(p0: float, p1: float, p2: float, p3: float, p4: any, p5: float): boolean
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm **/
	function STOP_ENTITY_ANIM(entity: EntityHandle, animation: string, animGroup: string, p3: float): boolean
	/** p1 sync task id? **/
	function STOP_SYNCHRONIZED_ENTITY_ANIM(entity: EntityHandle, p1: float, p2: boolean): boolean
	/** if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject"))) **/
	function HAS_ANIM_EVENT_FIRED(entity: EntityHandle, actionHash: Hash): boolean
	/** In the script "player_scene_t_bbfight.c4":
	"if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4/ *16* /], v_9, &v_A, &v_B))"
	-- &l_16E (p0) is requested as an anim dictionary earlier in the script.
	-- &l_19F[v_4/ *16* /] (p1) is used in other natives in the script as the "animation" param.
	-- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
	--v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for: 
	"if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
	Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function FIND_ANIM_EVENT_PHASE(animDictionary: string, animName: string, p2: string, p3: Address, p4: Address): boolean
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function SET_ENTITY_ANIM_CURRENT_TIME(entity: EntityHandle, animDictionary: string, animName: string, time: float): void
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function SET_ENTITY_ANIM_SPEED(entity: EntityHandle, animDictionary: string, animName: string, speedMultiplier: float): void
	/** Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
	
	p1 has no effect when either its on or off 
	maybe a quick disassembly will tell us what it does
	
	p2 has no effect when either its on or off 
	maybe a quick disassembly will tell us what it does **/
	function SET_ENTITY_AS_MISSION_ENTITY(entity: EntityHandle, p1: boolean, p2: boolean): void
	/** Marks the specified entity (ped, vehicle or object) as no longer needed if its population type is set to the mission type.
	If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.
	Entities marked as no longer needed, will be deleted as the engine sees fit.
	Use this if you just want to just let the game delete the ped:
	void MarkPedAsAmbientPed(Ped ped) {
	  auto addr = getScriptHandleBaseAddress(ped);
	
	  if (!addr) {
	    return;
	  }
	
	  //the game uses only lower 4 bits as entity population type 
	  BYTE origValue = *(BYTE *)(addr + 0xDA);
	  *(BYTE *)(addr + 0xDA) = ((origValue & 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);
	} **/
	function SET_ENTITY_AS_NO_LONGER_NEEDED(entity: Address): void
	/** This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED. **/
	function SET_PED_AS_NO_LONGER_NEEDED(ped: Address): void
	/** This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED. **/
	function SET_VEHICLE_AS_NO_LONGER_NEEDED(vehicle: Address): void
	/** This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED. **/
	function SET_OBJECT_AS_NO_LONGER_NEEDED(object: Address): void
	/**  **/
	function SET_ENTITY_CAN_BE_DAMAGED(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_ENTITY_CAN_BE_DAMAGED(entity: EntityHandle): boolean
	/**  **/
	function SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(entity: EntityHandle, bCanBeDamaged: boolean, relGroup: int): void
	/**  **/
	function SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(p0: any, p1: any): void
	/** Sets whether the entity can be targeted without being in line-of-sight. **/
	function SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ENTITY_COLLISION(entity: EntityHandle, toggle: boolean, keepPhysics: boolean): void
	/**  **/
	function GET_ENTITY_COLLISION_DISABLED(entity: EntityHandle): boolean
	/**  **/
	function SET_ENTITY_COMPLETELY_DISABLE_COLLISION(entity: EntityHandle, toggle: boolean, keepPhysics: boolean): void
	/** p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities. 
	 
	Often ends with 1, 0, 0, 1); in the scripts. It works. 
	
	Axis - Invert Axis Flags **/
	function SET_ENTITY_COORDS(entity: EntityHandle, xPos: float, yPos: float, zPos: float, xAxis: boolean, yAxis: boolean, zAxis: boolean, clearArea: boolean): void
	/**  **/
	function SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(entity: EntityHandle, xPos: float, yPos: float, zPos: float, alive: boolean, deadFlag: boolean, ragdollFlag: boolean, clearArea: boolean): void
	/** Axis - Invert Axis Flags **/
	function SET_ENTITY_COORDS_NO_OFFSET(entity: EntityHandle, xPos: float, yPos: float, zPos: float, xAxis: boolean, yAxis: boolean, zAxis: boolean): void
	/**  **/
	function SET_ENTITY_DYNAMIC(entity: EntityHandle, toggle: boolean): void
	/** Set the heading of an entity in degrees also known as "Yaw". **/
	function SET_ENTITY_HEADING(entity: EntityHandle, heading: float): void
	/** health >= 0
	male ped ~= 100 - 200
	female ped ~= 0 - 100 **/
	function SET_ENTITY_HEALTH(entity: EntityHandle, health: int, p2: int): void
	/** Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
	
	If you use this for a ped and you want Ragdoll to stay enabled, then do:
	*(DWORD *)(pedAddress + 0x188) |= (1 << 9);
	
	Use this if you want to get the invincibility status:
	  bool IsPedInvincible(Ped ped)
	 {
	     auto addr = getScriptHandleBaseAddress(ped);    
	
	        if (addr)
	     {
	         DWORD flag = *(DWORD *)(addr + 0x188);
	            return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
	      }
	
	       return false;
	 } **/
	function SET_ENTITY_INVINCIBLE(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ENTITY_IS_TARGET_PRIORITY(entity: EntityHandle, p1: boolean, p2: float): void
	/**  **/
	function SET_ENTITY_LIGHTS(entity: EntityHandle, toggle: boolean): void
	/** Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
	Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player. **/
	function SET_ENTITY_LOAD_COLLISION_FLAG(entity: EntityHandle, toggle: boolean, p2: any): void
	/**  **/
	function HAS_COLLISION_LOADED_AROUND_ENTITY(entity: EntityHandle): boolean
	/**  **/
	function SET_ENTITY_MAX_SPEED(entity: EntityHandle, speed: float): void
	/**  **/
	function SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(entity: EntityHandle, p1: boolean, p2: any): void
	/** Enable / disable each type of damage.
	
	Can't get drownProof to work.
	--------------
	p7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);
	 **/
	function SET_ENTITY_PROOFS(entity: EntityHandle, bulletProof: boolean, fireProof: boolean, explosionProof: boolean, collisionProof: boolean, meleeProof: boolean, p6: boolean, p7: boolean, drownProof: boolean): void
	/**  **/
	function GET_ENTITY_PROOFS(entity: EntityHandle, bulletProof: BoolPointer, fireProof: BoolPointer, explosionProof: BoolPointer, collisionProof: BoolPointer, meleeProof: BoolPointer, steamProof: BoolPointer, p7: BoolPointer, drownProof: BoolPointer): boolean
	/** w is the correct parameter name! **/
	function SET_ENTITY_QUATERNION(entity: EntityHandle, x: float, y: float, z: float, w: float): void
	/**  **/
	function SET_ENTITY_RECORDS_COLLISIONS(entity: EntityHandle, toggle: boolean): void
	/** rotationOrder refers to the order yaw pitch roll is applied
	value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation. 
	Unsure what value corresponds to what rotation order, more testing will be needed for that.
	For the most part R* uses 1 or 2 as the order.
	p5 is usually set as true
	 **/
	function SET_ENTITY_ROTATION(entity: EntityHandle, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: boolean): void
	/** unk was always 0. **/
	function SET_ENTITY_VISIBLE(entity: EntityHandle, toggle: boolean, unk: boolean): void
	/**  **/
	function SET_ENTITY_WATER_REFLECTION_FLAG(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ENTITY_MIRROR_REFLECTION_FLAG(entity: EntityHandle, p1: boolean): void
	/** Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement. **/
	function SET_ENTITY_VELOCITY(entity: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function SET_ENTITY_ANGULAR_VELOCITY(entity: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function SET_ENTITY_HAS_GRAVITY(entity: EntityHandle, toggle: boolean): void
	/** LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t). **/
	function SET_ENTITY_LOD_DIST(entity: EntityHandle, value: int): void
	/** Returns the LOD distance of an entity. **/
	function GET_ENTITY_LOD_DIST(entity: EntityHandle): int
	/** skin - everything alpha except skin
	Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51). **/
	function SET_ENTITY_ALPHA(entity: EntityHandle, alphaLevel: int, skin: boolean): void
	/**  **/
	function GET_ENTITY_ALPHA(entity: EntityHandle): int
	/**  **/
	function RESET_ENTITY_ALPHA(entity: EntityHandle): void
	/** Similar to RESET_ENTITY_ALPHA **/
	function RESET_PICKUP_ENTITY_GLOW(entity: EntityHandle): void
	/**  **/
	function SET_PICKUP_COLLIDES_WITH_PROJECTILES(p0: any, p1: any): void
	/** Only called once in the scripts.
	
	Related to weapon objects.
	 **/
	function SET_ENTITY_SORT_BIAS(entity: EntityHandle, p1: float): void
	/**  **/
	function SET_ENTITY_ALWAYS_PRERENDER(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ENTITY_RENDER_SCORCHED(entity: EntityHandle, toggle: boolean): void
	/** Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
	
	0 = green
	1 = red
	2 = yellow
	3 = reset changes
	changing lights may not change the behavior of vehicles **/
	function SET_ENTITY_TRAFFICLIGHT_OVERRIDE(entity: EntityHandle, state: int): void
	/**  **/
	function SET_ENTITY_IS_IN_VEHICLE(entity: EntityHandle): void
	/** Only works with objects! **/
	function CREATE_MODEL_SWAP(x: float, y: float, z: float, radius: float, originalModel: Hash, newModel: Hash, p6: boolean): void
	/**  **/
	function REMOVE_MODEL_SWAP(x: float, y: float, z: float, radius: float, originalModel: Hash, newModel: Hash, p6: boolean): void
	/** p5 = sets as true in scripts
	Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
	
	Network players do not see changes done with this. **/
	function CREATE_MODEL_HIDE(x: float, y: float, z: float, radius: float, modelHash: Hash, p5: boolean): void
	/**  **/
	function CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(x: float, y: float, z: float, radius: float, modelHash: Hash, p5: boolean): void
	/** This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.
	p5 should be false, true does nothing **/
	function REMOVE_MODEL_HIDE(x: float, y: float, z: float, radius: float, modelHash: Hash, p5: boolean): void
	/**  **/
	function CREATE_FORCED_OBJECT(x: float, y: float, z: float, p3: any, modelHash: Hash, p5: boolean): void
	/**  **/
	function REMOVE_FORCED_OBJECT(x: float, y: float, z: float, p3: float, modelHash: Hash): void
	/** Calling this function disables collision between two entities.
	The importance of the order for entity1 and entity2 is unclear.
	The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame. **/
	function SET_ENTITY_NO_COLLISION_ENTITY(entity1: EntityHandle, entity2: EntityHandle, thisFrameOnly: boolean): void
	/**  **/
	function SET_ENTITY_MOTION_BLUR(entity: EntityHandle, toggle: boolean): void
	/** p1 always false. **/
	function SET_CAN_AUTO_VAULT_ON_ENTITY(entity: EntityHandle, toggle: boolean): void
	/** p1 always false. **/
	function SET_CAN_CLIMB_ON_ENTITY(entity: EntityHandle, toggle: boolean): void
	/** Only called within 1 script for x360. 'fm_mission_controller' and it used on an object. 
	
	Ran after these 2 natives,
	set_object_targettable(uParam0, 0);
	set_entity_invincible(uParam0, 1); **/
	function SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ENTITY_NOWEAPONDECALS(entity: EntityHandle, p1: boolean): void
	/**  **/
	function SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(entity: EntityHandle, p1: boolean): void
	/** Gets the world rotation of the specified bone of the specified entity. **/
	function GET_ENTITY_BONE_ROTATION(entity: EntityHandle, boneIndex: int): Vector3
	/** Gets the world position of the specified bone of the specified entity. **/
	function GET_ENTITY_BONE_POSTION(entity: EntityHandle, boneIndex: int): Vector3
	/** Gets the local rotation of the specified bone of the specified entity. **/
	function GET_ENTITY_BONE_OBJECT_ROTATION(entity: EntityHandle, boneIndex: int): Vector3
	/**  **/
	function GET_ENTITY_BONE_COUNT(entity: EntityHandle): int
	/**  **/
	function ENABLE_ENTITY_BULLET_COLLISION(entity: EntityHandle): void
	/**  **/
	function SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(entity1: EntityHandle, entity2: EntityHandle): void
	/**  **/
	function SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(entity1: EntityHandle, entity2: EntityHandle): void
	/** p1 is always set to 1 **/
	function SET_ALLOW_MIGRATE_TO_SPECTATOR(entity: EntityHandle, p1: any): void
	/** Gets the handle of an entity with a specific model hash attached to another entity, such as an object attached to a ped.
	 This native does not appear to have anything to do with pickups as in scripts it is used with objects.
	
	Example from fm_mission_controller_2020.c:
	
	iVar8 = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(bParam0->f_9, joaat("p_cs_clipboard")); **/
	function GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(entity: EntityHandle, modelHash: Hash): EntityHandle
	/**  **/
	function SET_PICK_UP_BY_CARGOBOB_DISABLED(entity: EntityHandle, toggle: boolean): void
}

/** @noSelf **/
declare namespace EVENT {
	/**  **/
	function SET_DECISION_MAKER(ped: EntityHandle, name: Hash): void
	/** eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt **/
	function CLEAR_DECISION_MAKER_EVENT_RESPONSE(name: Hash, eventType: int): void
	/** eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
	
	This is limited to 4 blocked events at a time. **/
	function BLOCK_DECISION_MAKER_EVENT(name: Hash, eventType: int): void
	/** eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt **/
	function UNBLOCK_DECISION_MAKER_EVENT(name: Hash, eventType: int): void
	/** eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt **/
	function ADD_SHOCKING_EVENT_AT_POSITION(eventType: int, x: float, y: float, z: float, duration: float): int
	/** eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt **/
	function ADD_SHOCKING_EVENT_FOR_ENTITY(eventType: int, entity: EntityHandle, duration: float): int
	/** eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt **/
	function IS_SHOCKING_EVENT_IN_SPHERE(eventType: int, x: float, y: float, z: float, radius: float): boolean
	/**  **/
	function REMOVE_SHOCKING_EVENT(event: ScriptHandle): boolean
	/**  **/
	function REMOVE_ALL_SHOCKING_EVENTS(p0: boolean): void
	/**  **/
	function REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS(): void
	/**  **/
	function SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME(): void
	/** eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt **/
	function SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(eventType: int): void
	/**  **/
	function SUPPRESS_AGITATION_EVENTS_NEXT_FRAME(): void
}

/** @noSelf **/
declare namespace FILES {
	/** Character types:
	0 = Michael, 
	1 = Franklin, 
	2 = Trevor, 
	3 = MPMale, 
	4 = MPFemale **/
	function GET_NUM_TATTOO_SHOP_DLC_ITEMS(character: int): int
	/** Character types:
	0 = Michael, 
	1 = Franklin, 
	2 = Trevor, 
	3 = MPMale, 
	4 = MPFemale
	
	
	enum TattooZoneData
	{  
	    ZONE_TORSO = 0,  
	    ZONE_HEAD = 1,  
	    ZONE_LEFT_ARM = 2,  
	    ZONE_RIGHT_ARM = 3,  
	    ZONE_LEFT_LEG = 4,  
	    ZONE_RIGHT_LEG = 5,  
	    ZONE_UNKNOWN = 6,
	    ZONE_NONE = 7,  
	};
	struct outComponent
	{
	    // these vars are suffixed with 4 bytes of padding each.
	    uint unk;
	    int unk2;
	    uint tattooCollectionHash;
	    uint tattooNameHash;
	    int unk3;
	    TattooZoneData zoneId;
	    uint unk4;
	    uint unk5;
	    // maybe more, not sure exactly, decompiled scripts are very vague around this part.
	} **/
	function GET_TATTOO_SHOP_DLC_ITEM_DATA(characterType: int, decorationIndex: int, outComponent: Address): boolean
	/** Returns some sort of index/offset for overlays/decorations.
	
	Character types:
	0 = Michael, 
	1 = Franklin, 
	2 = Trevor, 
	3 = MPMale, 
	4 = MPFemale **/
	function GET_TATTOO_SHOP_DLC_ITEM_INDEX(overlayHash: Hash, p1: any, character: int): int
	/**  **/
	function INIT_SHOP_PED_COMPONENT(outComponent: Address): void
	/**  **/
	function INIT_SHOP_PED_PROP(outProp: Address): void
	/**  **/
	function SETUP_SHOP_PED_APPAREL_QUERY(p0: int, p1: int, p2: int, p3: int): int
	/** character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
	
	componentId is between 0 and 11 and corresponds to the usual component slots.
	
	p1 could be the outfit number; unsure.
	
	p2 is usually -1; unknown function.
	
	p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.
	
	p4 is usually -1; unknown function.
	
	componentId is -1 when p3 is true in decompiled scripts. **/
	function SETUP_SHOP_PED_APPAREL_QUERY_TU(character: int, p1: int, p2: int, p3: boolean, p4: int, componentId: int): int
	/** See https://git.io/JtcRf for example and structs. **/
	function GET_SHOP_PED_QUERY_COMPONENT(componentId: int, outComponent: Address): void
	/** Returns some sort of index/offset for components.
	Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise. **/
	function GET_SHOP_PED_QUERY_COMPONENT_INDEX(componentHash: Hash): int
	/** More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86 **/
	function GET_SHOP_PED_COMPONENT(componentHash: Hash, outComponent: Address): void
	/** See https://git.io/JtcRf for example and structs. **/
	function GET_SHOP_PED_QUERY_PROP(componentId: int, outProp: Address): void
	/** Returns some sort of index/offset for props.
	Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise. **/
	function GET_SHOP_PED_QUERY_PROP_INDEX(componentHash: Hash): int
	/** More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86 **/
	function GET_SHOP_PED_PROP(componentHash: Hash, outProp: Address): void
	/**  **/
	function GET_HASH_NAME_FOR_COMPONENT(entity: EntityHandle, componentId: int, drawableVariant: int, textureVariant: int): Hash
	/**  **/
	function GET_HASH_NAME_FOR_PROP(entity: EntityHandle, componentId: int, propIndex: int, propTextureIndex: int): Hash
	/**  **/
	function GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(componentHash: Hash): int
	/** `propHash`: Ped helmet prop hash?
	This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop. **/
	function GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(propHash: Hash): int
	/**  **/
	function GET_VARIANT_COMPONENT(componentHash: Hash, variantComponentIndex: int, nameHash: Address, enumValue: IntPointer, componentType: IntPointer): void
	/**  **/
	function GET_VARIANT_PROP(componentHash: Hash, variantPropIndex: int, nameHash: Address, enumValue: IntPointer, anchorPoint: IntPointer): void
	/** Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT. **/
	function GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(componentHash: Hash): int
	/** Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP. **/
	function GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(componentHash: Hash): int
	/**  **/
	function GET_FORCED_COMPONENT(componentHash: Hash, forcedComponentIndex: int, nameHash: Address, enumValue: IntPointer, componentType: IntPointer): void
	/**  **/
	function GET_FORCED_PROP(componentHash: Hash, forcedPropIndex: int, nameHash: Address, enumValue: IntPointer, anchorPoint: IntPointer): void
	/** Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json
	
	componentId/last parameter seems to be unused. **/
	function DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(componentHash: Hash, restrictionTagHash: Hash, componentId: int): boolean
	/**  **/
	function DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(ped: EntityHandle, componentId: int, restrictionTagHash: Hash): boolean
	/**  **/
	function DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(ped: EntityHandle, componentId: int, restrictionTagHash: Hash): boolean
	/** characters
	
	0: Michael
	1: Franklin
	2: Trevor
	3: MPMale
	4: MPFemale **/
	function SETUP_SHOP_PED_OUTFIT_QUERY(character: int, p1: boolean): int
	/** outfitIndex: from 0 to SETUP_SHOP_PED_OUTFIT_QUERY(characterIndex, false) - 1.
	See https://git.io/JtcB8 for example and outfit struct. **/
	function GET_SHOP_PED_QUERY_OUTFIT(outfitIndex: int, outfit: Address): void
	/**  **/
	function GET_SHOP_PED_OUTFIT(p0: any, p1: Address): void
	/**  **/
	function GET_SHOP_PED_OUTFIT_LOCATE(p0: any): int
	/** See https://git.io/JtcBH for example and structs. **/
	function GET_SHOP_PED_OUTFIT_PROP_VARIANT(outfitHash: Hash, variantIndex: int, outPropVariant: Address): boolean
	/** See https://git.io/JtcBH for example and structs. **/
	function GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(outfitHash: Hash, variantIndex: int, outComponentVariant: Address): boolean
	/**  **/
	function GET_NUM_DLC_VEHICLES(): int
	/** dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1 **/
	function GET_DLC_VEHICLE_MODEL(dlcVehicleIndex: int): Hash
	/** dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
	outData is a struct of 3 8-byte items.
	The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash. **/
	function GET_DLC_VEHICLE_DATA(dlcVehicleIndex: int, outData: Address): boolean
	/**  **/
	function GET_DLC_VEHICLE_FLAGS(dlcVehicleIndex: int): int
	/** Returns the total number of DLC weapons. **/
	function GET_NUM_DLC_WEAPONS(): int
	/** Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta). **/
	function GET_NUM_DLC_WEAPONS_SP(): int
	/** 
	dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
	struct DlcWeaponData
	{
	int emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this
	int padding1;
	int weaponHash;
	int padding2;
	int unk;
	int padding3;
	int weaponCost;
	int padding4;
	int ammoCost;
	int padding5;
	int ammoType;
	int padding6;
	int defaultClipSize;
	int padding7;
	char nameLabel[64];
	char descLabel[64];
	char desc2Label[64]; // usually "the" + name
	char upperCaseNameLabel[64];
	}; **/
	function GET_DLC_WEAPON_DATA(dlcWeaponIndex: int, outData: Address): boolean
	/** Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP. **/
	function GET_DLC_WEAPON_DATA_SP(dlcWeaponIndex: int, outData: Address): boolean
	/** Returns the total number of DLC weapon components. **/
	function GET_NUM_DLC_WEAPON_COMPONENTS(dlcWeaponIndex: int): int
	/** Returns the total number of DLC weapon components that are available in SP. **/
	function GET_NUM_DLC_WEAPON_COMPONENTS_SP(dlcWeaponIndex: int): int
	/** p0 seems to be the weapon index
	p1 seems to be the weapon component index
	struct DlcComponentData{
	int attachBone;
	int padding1;
	int bActiveByDefault;
	int padding2;
	int unk;
	int padding3;
	int componentHash;
	int padding4;
	int unk2;
	int padding5;
	int componentCost;
	int padding6;
	char nameLabel[64];
	char descLabel[64];
	};
	 **/
	function GET_DLC_WEAPON_COMPONENT_DATA(dlcWeaponIndex: int, dlcWeapCompIndex: int, ComponentDataPtr: Address): boolean
	/** Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP. **/
	function GET_DLC_WEAPON_COMPONENT_DATA_SP(dlcWeaponIndex: int, dlcWeapCompIndex: int, ComponentDataPtr: Address): boolean
	/**  **/
	function IS_CONTENT_ITEM_LOCKED(itemHash: Hash): boolean
	/**  **/
	function IS_DLC_VEHICLE_MOD(hash: Hash): boolean
	/**  **/
	function GET_DLC_VEHICLE_MOD_LOCK_HASH(hash: Hash): Hash
	/** From fm_deathmatch_creator and fm_race_creator:
	
	FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));
	FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP")); **/
	function EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(hash: Hash): void
	/** From fm_deathmatch_creator and fm_race_creator:
	
	FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));
	FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP")); **/
	function REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(hash: Hash): void
}

/** @noSelf **/
declare namespace FIRE {
	/** Starts a fire:
	
	xyz: Location of fire
	maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
	isGasFire: Whether or not the fire is powered by gasoline. **/
	function START_SCRIPT_FIRE(X: float, Y: float, Z: float, maxChildren: int, isGasFire: boolean): number
	/**  **/
	function REMOVE_SCRIPT_FIRE(fireHandle: number): void
	/**  **/
	function START_ENTITY_FIRE(entity: EntityHandle): number
	/**  **/
	function STOP_ENTITY_FIRE(entity: EntityHandle): void
	/**  **/
	function IS_ENTITY_ON_FIRE(entity: EntityHandle): boolean
	/**  **/
	function GET_NUMBER_OF_FIRES_IN_RANGE(x: float, y: float, z: float, radius: float): int
	/**  **/
	function SET_FLAMMABILITY_MULTIPLIER(p0: float): void
	/**  **/
	function STOP_FIRE_IN_RANGE(x: float, y: float, z: float, radius: float): void
	/** Returns TRUE if it found something. FALSE if not. **/
	function GET_CLOSEST_FIRE_POS(outPosition: Vector3Pointer, x: float, y: float, z: float): boolean
	/** BOOL isAudible = If explosion makes a sound.
	BOOL isInvisible = If the explosion is invisible or not.
	
	explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt **/
	function ADD_EXPLOSION(x: float, y: float, z: float, explosionType: int, damageScale: float, isAudible: boolean, isInvisible: boolean, cameraShake: float, noDamage: boolean): void
	/** isAudible: If explosion makes a sound.
	isInvisible: If the explosion is invisible or not.
	explosionType: See ADD_EXPLOSION. **/
	function ADD_OWNED_EXPLOSION(ped: EntityHandle, x: float, y: float, z: float, explosionType: int, damageScale: float, isAudible: boolean, isInvisible: boolean, cameraShake: float): void
	/** isAudible: If explosion makes a sound.
	isInvisible: If the explosion is invisible or not.
	explosionType: See ADD_EXPLOSION. **/
	function ADD_EXPLOSION_WITH_USER_VFX(x: float, y: float, z: float, explosionType: int, explosionFx: Hash, damageScale: float, isAudible: boolean, isInvisible: boolean, cameraShake: float): void
	/** explosionType: See ADD_EXPLOSION. **/
	function IS_EXPLOSION_IN_AREA(explosionType: int, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): boolean
	/** explosionType: See ADD_EXPLOSION. **/
	function IS_EXPLOSION_ACTIVE_IN_AREA(explosionType: int, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): boolean
	/** explosionType: See ADD_EXPLOSION. **/
	function IS_EXPLOSION_IN_SPHERE(explosionType: int, x: float, y: float, z: float, radius: float): boolean
	/** explosionType: See ADD_EXPLOSION. **/
	function GET_OWNER_OF_EXPLOSION_IN_SPHERE(explosionType: int, x: float, y: float, z: float, radius: float): EntityHandle
	/** explosionType: See ADD_EXPLOSION, -1 for any explosion type
	 **/
	function IS_EXPLOSION_IN_ANGLED_AREA(explosionType: int, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float): boolean
	/** Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
	
	explosionType: See ADD_EXPLOSION. **/
	function GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(explosionType: int, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, radius: float): EntityHandle
}

/** @noSelf **/
declare namespace GRAPHICS {
	/** NOTE: Debugging functions are not present in the retail version of the game. **/
	function SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(enabled: boolean): void
	/**  **/
	function DRAW_DEBUG_LINE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void
	/** NOTE: Debugging functions are not present in the retail version of the game. **/
	function DRAW_DEBUG_LINE_WITH_TWO_COLOURS(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, r1: int, g1: int, b1: int, r2: int, g2: int, b2: int, alpha1: int, alpha2: int): void
	/** NOTE: Debugging functions are not present in the retail version of the game. **/
	function DRAW_DEBUG_SPHERE(x: float, y: float, z: float, radius: float, red: int, green: int, blue: int, alpha: int): void
	/**  **/
	function DRAW_DEBUG_BOX(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void
	/** NOTE: Debugging functions are not present in the retail version of the game. **/
	function DRAW_DEBUG_CROSS(x: float, y: float, z: float, size: float, red: int, green: int, blue: int, alpha: int): void
	/** NOTE: Debugging functions are not present in the retail version of the game. **/
	function DRAW_DEBUG_TEXT(text: string, x: float, y: float, z: float, red: int, green: int, blue: int, alpha: int): void
	/** NOTE: Debugging functions are not present in the retail version of the game. **/
	function DRAW_DEBUG_TEXT_2D(text: string, x: float, y: float, z: float, red: int, green: int, blue: int, alpha: int): void
	/** Draws a depth-tested line from one point to another.
	----------------
	x1, y1, z1 : Coordinates for the first point
	x2, y2, z2 : Coordinates for the second point
	r, g, b, alpha : Color with RGBA-Values
	I recommend using a predefined function to call this.
	[VB.NET]
	Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
	    [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
	End Sub
	
	[C#]
	public void DrawLine(Vector3 from, Vector3 to, Color col)
	{
	    Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
	} **/
	function DRAW_LINE(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, red: int, green: int, blue: int, alpha: int): void
	/** x/y/z - Location of a vertex (in world coords), presumably.
	----------------
	x1, y1, z1     : Coordinates for the first point
	x2, y2, z2     : Coordinates for the second point
	x3, y3, z3     : Coordinates for the third point
	r, g, b, alpha : Color with RGBA-Values
	
	Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
	But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
	I recommend using a predefined function to call this.
	[VB.NET]
	Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
	    [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
	End Sub
	
	[C#]
	public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
	{
	    Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
	}
	BTW: Intersecting triangles are not supported: They overlap in the order they were called. **/
	function DRAW_POLY(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, x3: float, y3: float, z3: float, red: int, green: int, blue: int, alpha: int): void
	/** Used for drawling Deadline trailing lights, see deadline.ytd
	
	p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.
	For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details. **/
	function DRAW_TEXTURED_POLY(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, x3: float, y3: float, z3: float, red: int, green: int, blue: int, alpha: int, textureDict: string, textureName: string, u1: float, v1: float, w1: float, u2: float, v2: float, w2: float, u3: float, v3: float, w3: float): void
	/** Used for drawling Deadline trailing lights, see deadline.ytd
	
	Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
	For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details. **/
	function DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, x3: float, y3: float, z3: float, red1: float, green1: float, blue1: float, alpha1: int, red2: float, green2: float, blue2: float, alpha2: int, red3: float, green3: float, blue3: float, alpha3: int, textureDict: string, textureName: string, u1: float, v1: float, w1: float, u2: float, v2: float, w2: float, u3: float, v3: float, w3: float): void
	/** x,y,z = start pos
	x2,y2,z2 = end pos
	
	Draw's a 3D Box between the two x,y,z coords.
	--------------
	Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
	I recommend using a predefined function to call this.
	[VB.NET]
	Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
	    [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
	End Sub
	
	[C#]
	public void DrawBox(Vector3 a, Vector3 b, Color col)
	{
	    Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
	} **/
	function DRAW_BOX(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, red: int, green: int, blue: int, alpha: int): void
	/**  **/
	function SET_BACKFACECULLING(toggle: boolean): void
	/**  **/
	function SET_DEPTHWRITING(p0: any): void
	/**  **/
	function BEGIN_TAKE_MISSION_CREATOR_PHOTO(): boolean
	/**  **/
	function GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO(): int
	/**  **/
	function FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO(): void
	/**  **/
	function LOAD_MISSION_CREATOR_PHOTO(p0: Address, p1: any, p2: any, p3: any): boolean
	/**  **/
	function GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(p0: Address): int
	/**  **/
	function BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW(): boolean
	/**  **/
	function GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW(): int
	/**  **/
	function FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW(): void
	/**  **/
	function BEGIN_TAKE_HIGH_QUALITY_PHOTO(): boolean
	/**  **/
	function GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO(): int
	/**  **/
	function FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO(): void
	/**  **/
	function SET_TAKEN_PHOTO_IS_MUGSHOT(p0: boolean): void
	/**  **/
	function SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(p0: any, p1: any): void
	/**  **/
	function SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(p0: any): void
	/** 1 match in 1 script. cellphone_controller.
	p0 is -1 in scripts. **/
	function SAVE_HIGH_QUALITY_PHOTO(unused: int): boolean
	/**  **/
	function GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO(): int
	/**  **/
	function BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0: any): boolean
	/**  **/
	function GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0: int): int
	/**  **/
	function FREE_MEMORY_FOR_LOW_QUALITY_PHOTO(): void
	/**  **/
	function DRAW_LOW_QUALITY_PHOTO_TO_PHONE(p0: boolean, p1: boolean): void
	/** This function is hard-coded to always return 0. **/
	function GET_MAXIMUM_NUMBER_OF_PHOTOS(): int
	/** This function is hard-coded to always return 96. **/
	function GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS(): int
	/**  **/
	function GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS(): int
	/** 2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0. **/
	function QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(p0: any): boolean
	/** 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
	appcamera, appmedia, and cellphone_controller. **/
	function GET_STATUS_OF_SORTED_LIST_OPERATION(p0: any): int
	/**  **/
	function CLEAR_STATUS_OF_SORTED_LIST_OPERATION(): void
	/** This function is hard-coded to always return 0. **/
	function DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(p0: any): boolean
	/** This function is hard-coded to always return 0. **/
	function LOAD_HIGH_QUALITY_PHOTO(p0: any): boolean
	/** Hardcoded to always return 2. **/
	function GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(p0: int): int
	/**  **/
	function DRAW_LIGHT_WITH_RANGEEX(x: float, y: float, z: float, r: int, g: int, b: int, range: float, intensity: float, shadow: float): void
	/**  **/
	function DRAW_LIGHT_WITH_RANGE(posX: float, posY: float, posZ: float, colorR: int, colorG: int, colorB: int, range: float, intensity: float): void
	/** Parameters:
	* pos - coordinate where the spotlight is located
	* dir - the direction vector the spotlight should aim at from its current position
	* r,g,b - color of the spotlight
	* distance - the maximum distance the light can reach
	* brightness - the brightness of the light
	* roundness - "smoothness" of the circle edge
	* radius - the radius size of the spotlight
	* falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
	
	Example in C# (spotlight aims at the closest vehicle):
	Vector3 myPos = Game.Player.Character.Position;
	Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
	Vector3 destinationCoords = nearest.Position;
	Vector3 dirVector = destinationCoords - myPos;
	dirVector.Normalize();
	Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f); **/
	function DRAW_SPOT_LIGHT(posX: float, posY: float, posZ: float, dirX: float, dirY: float, dirZ: float, colorR: int, colorG: int, colorB: int, distance: float, brightness: float, hardness: float, radius: float, falloff: float): void
	/**  **/
	function DRAW_SHADOWED_SPOT_LIGHT(posX: float, posY: float, posZ: float, dirX: float, dirY: float, dirZ: float, colorR: int, colorG: int, colorB: int, distance: float, brightness: float, roundness: float, radius: float, falloff: float, shadowId: int): void
	/**  **/
	function FADE_UP_PED_LIGHT(p0: float): void
	/**  **/
	function UPDATE_LIGHTS_ON_ENTITY(entity: EntityHandle): void
	/**  **/
	function SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(p0: any): void
	/**  **/
	function GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(): float
	/** enum MarkerTypes
	{
	    MarkerTypeUpsideDownCone = 0,
	 MarkerTypeVerticalCylinder = 1,
	   MarkerTypeThickChevronUp = 2,
	 MarkerTypeThinChevronUp = 3,
	  MarkerTypeCheckeredFlagRect = 4,
	  MarkerTypeCheckeredFlagCircle = 5,
	    MarkerTypeVerticleCircle = 6,
	 MarkerTypePlaneModel = 7,
	 MarkerTypeLostMCDark = 8,
	 MarkerTypeLostMCLight = 9,
	    MarkerTypeNumber0 = 10,
	   MarkerTypeNumber1 = 11,
	   MarkerTypeNumber2 = 12,
	   MarkerTypeNumber3 = 13,
	   MarkerTypeNumber4 = 14,
	   MarkerTypeNumber5 = 15,
	   MarkerTypeNumber6 = 16,
	   MarkerTypeNumber7 = 17,
	   MarkerTypeNumber8 = 18,
	   MarkerTypeNumber9 = 19,
	   MarkerTypeChevronUpx1 = 20,
	   MarkerTypeChevronUpx2 = 21,
	   MarkerTypeChevronUpx3 = 22,
	   MarkerTypeHorizontalCircleFat = 23,
	   MarkerTypeReplayIcon = 24,
	    MarkerTypeHorizontalCircleSkinny = 25,
	    MarkerTypeHorizontalCircleSkinny_Arrow = 26,
	  MarkerTypeHorizontalSplitArrowCircle = 27,
	    MarkerTypeDebugSphere = 28,
	   MarkerTypeDallorSign = 29,
	    MarkerTypeHorizontalBars = 30,
	    MarkerTypeWolfHead = 31
	};
	
	dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).
	
	faceCamera - Rotates only the y-axis (the heading) towards the camera
	
	p19 - no effect, default value in script is 2
	
	rotate - Rotates only on the y-axis (the heading)
	
	textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")
	
	textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")
	
	drawOnEnts - Draws the marker onto any entities that intersect it
	
	basically what he said, except textureDict and textureName are totally not const char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:
	
	bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);
	
	his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.
	
	GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);
	
	 **/
	function DRAW_MARKER(type: int, posX: float, posY: float, posZ: float, dirX: float, dirY: float, dirZ: float, rotX: float, rotY: float, rotZ: float, scaleX: float, scaleY: float, scaleZ: float, red: int, green: int, blue: int, alpha: int, bobUpAndDown: boolean, faceCamera: boolean, p19: int, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean): void
	/**  **/
	function DRAW_MARKER_EX(type: int, posX: float, posY: float, posZ: float, dirX: float, dirY: float, dirZ: float, rotX: float, rotY: float, rotZ: float, scaleX: float, scaleY: float, scaleZ: float, red: int, green: int, blue: int, alpha: int, bobUpAndDown: boolean, faceCamera: boolean, p19: any, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean, p24: boolean, p25: boolean): void
	/** Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
	Example https://imgur.com/nCbtS4H **/
	function DRAW_MARKER_SPHERE(x: float, y: float, z: float, radius: float, red: int, green: int, blue: int, alpha: float): void
	/** Creates a checkpoint. Returns the handle of the checkpoint.
	
	20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
	
	Parameters:
	* type - The type of checkpoint to create. See below for a list of checkpoint types.
	* pos1 - The position of the checkpoint.
	* pos2 - The position of the next checkpoint to point to.
	* radius - The radius of the checkpoint.
	* color - The color of the checkpoint.
	* reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
	
	Checkpoint types:
	0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
	5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
	10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
	15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker      
	20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 
	25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker    
	30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 
	35-38-------Ring: Airplane Up, Left, Right, UpsideDown
	39----------?
	40----------Ring: just a ring
	41----------?
	42-44-------Cylinder w/ number (uses 'reserved' parameter)
	45-47-------Cylinder no arrow or number
	
	If using type 42-44, reserved sets number / number and shape to display
	
	0-99------------Just numbers (0-99)
	100-109-----------------Arrow (0-9)
	110-119------------Two arrows (0-9)
	120-129----------Three arrows (0-9)
	130-139----------------Circle (0-9)
	140-149------------CycleArrow (0-9)
	150-159----------------Circle (0-9)
	160-169----Circle  w/ pointer (0-9)
	170-179-------Perforated ring (0-9)
	180-189----------------Sphere (0-9) **/
	function CREATE_CHECKPOINT(type: int, posX1: float, posY1: float, posZ1: float, posX2: float, posY2: float, posZ2: float, diameter: float, red: int, green: int, blue: int, alpha: int, reserved: int): int
	/**  **/
	function SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(checkpoint: int, p0: float): void
	/**  **/
	function SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(checkpoint: int, scale: float): void
	/** Sets the cylinder height of the checkpoint.
	
	Parameters:
	* nearHeight - The height of the checkpoint when inside of the radius.
	* farHeight - The height of the checkpoint when outside of the radius.
	* radius - The radius of the checkpoint. **/
	function SET_CHECKPOINT_CYLINDER_HEIGHT(checkpoint: int, nearHeight: float, farHeight: float, radius: float): void
	/** Sets the checkpoint color. **/
	function SET_CHECKPOINT_RGBA(checkpoint: int, red: int, green: int, blue: int, alpha: int): void
	/** Sets the checkpoint icon color. **/
	function SET_CHECKPOINT_RGBA2(checkpoint: int, red: int, green: int, blue: int, alpha: int): void
	/** This does not move an existing checkpoint... so wtf. **/
	function SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(checkpoint: int, posX: float, posY: float, posZ: float, unkX: float, unkY: float, unkZ: float): void
	/**  **/
	function SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(checkpoint: int): void
	/** Unknown. Called after creating a checkpoint (type: 51) in the creators. **/
	function SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(checkpoint: int): void
	/**  **/
	function SET_CHECKPOINT_FORCE_DIRECTION(checkpoint: int): void
	/**  **/
	function SET_CHECKPOINT_DIRECTION(checkpoint: int, posX: float, posY: float, posZ: float): void
	/**  **/
	function DELETE_CHECKPOINT(checkpoint: int): void
	/**  **/
	function DONT_RENDER_IN_GAME_UI(p0: boolean): void
	/**  **/
	function FORCE_RENDER_IN_GAME_UI(toggle: boolean): void
	/** This function can requests texture dictonaries from following RPFs:
	scaleform_generic.rpf
	scaleform_minigames.rpf
	scaleform_minimap.rpf
	scaleform_web.rpf
	
	last param isnt a toggle **/
	function REQUEST_STREAMED_TEXTURE_DICT(textureDict: string, p1: boolean): void
	/**  **/
	function HAS_STREAMED_TEXTURE_DICT_LOADED(textureDict: string): boolean
	/**  **/
	function SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(textureDict: string): void
	/** Draws a rectangle on the screen.
	
	-x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
	
	-y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
	
	-width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
	
	-height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
	
	-R: Red part of the color. (0-255)
	
	-G: Green part of the color. (0-255)
	
	-B: Blue part of the color. (0-255)
	
	-A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
	
	The total number of rectangles to be drawn in one frame is apparently limited to 399.
	 **/
	function DRAW_RECT(x: float, y: float, width: float, height: float, r: int, g: int, b: int, a: int, p8: boolean): void
	/** Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target. **/
	function SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(toggle: boolean): void
	/** Sets the draw order for script draw commands.
	
	Examples from decompiled scripts:
	GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);
	GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);
	
	GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);
	GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0); **/
	function SET_SCRIPT_GFX_DRAW_ORDER(drawOrder: int): void
	/** horizontalAlign: The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R').
	verticalAlign: The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T').
	
	This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration.
	
	These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.
	
	Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73).
	
	For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.
	
	To reset the value, use RESET_SCRIPT_GFX_ALIGN. **/
	function SET_SCRIPT_GFX_ALIGN(horizontalAlign: int, verticalAlign: int): void
	/** This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values ('I', 'I'; 0, 0, 0, 0).
	This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw. **/
	function RESET_SCRIPT_GFX_ALIGN(): void
	/** Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command. **/
	function SET_SCRIPT_GFX_ALIGN_PARAMS(x: float, y: float, w: float, h: float): void
	/** Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS **/
	function GET_SCRIPT_GFX_ALIGN_POSITION(x: float, y: float, calculatedX: FloatPointer, calculatedY: FloatPointer): void
	/** Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0. **/
	function GET_SAFE_ZONE_SIZE(): float
	/** Draws a 2D sprite on the screen.
	
	Parameters:
	textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
	
	textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
	
	screenX/Y - Screen offset (0.5 = center)
	scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
	
	heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
	
	red,green,blue - Sprite color (default = 255/255/255)
	
	alpha - opacity level **/
	function DRAW_SPRITE(textureDict: string, textureName: string, screenX: float, screenY: float, width: float, height: float, heading: float, red: int, green: int, blue: int, alpha: int, p11: boolean, p12: any): void
	/** Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.
	x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)
	y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)
	width 0.0 - 1.0 is the reasonable amount generally
	height 0.0 - 1.0 is the reasonable amount generally
	p6 almost always 0.0
	p11 seems to be unknown but almost always 0 int **/
	function DRAW_SPRITE_ARX(textureDict: string, textureName: string, x: float, y: float, width: float, height: float, p6: float, red: int, green: int, blue: int, alpha: int, p11: any, p12: any): void
	/** Similar to _DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets.
	These seem to be the only dicts ever requested by this native:
	
	prop_screen_biker_laptop
	Prop_Screen_GR_Disruption
	Prop_Screen_TaleOfUs
	prop_screen_nightclub
	Prop_Screen_IE_Adhawk
	prop_screen_sm_free_trade_shipping
	prop_screen_hacker_truck
	MPDesktop
	Prop_Screen_Nightclub
	And a few others
	 **/
	function DRAW_SPRITE_NAMED_RENDERTARGET(textureDict: string, textureName: string, screenX: float, screenY: float, width: float, height: float, heading: float, red: int, green: int, blue: int, alpha: int, p11: any): void
	/** Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.
	
	u1, v1 - texture coordinates for the top-left corner
	u2, v2 - texture coordinates for the bottom-right corner **/
	function DRAW_SPRITE_ARX_WITH_UV(textureDict: string, textureName: string, x: float, y: float, width: float, height: float, u1: float, v1: float, u2: float, v2: float, heading: float, red: int, green: int, blue: int, alpha: int, p15: any): void
	/** Example:
	GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");
	
	I tried this and nothing happened... **/
	function ADD_ENTITY_ICON(entity: EntityHandle, icon: string): int
	/**  **/
	function SET_ENTITY_ICON_VISIBILITY(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ENTITY_ICON_COLOR(entity: EntityHandle, red: int, green: int, blue: int, alpha: int): void
	/** Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
	From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.
	
	Example in C#:
	Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
	Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
	Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
	Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
	Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
	Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
	Function.Call(Hash.CLEAR_DRAW_ORIGIN);
	
	Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg
	If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.
	
	This function also effects the drawing of texts and other UI-elements.
	The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN(). **/
	function SET_DRAW_ORIGIN(x: float, y: float, z: float, p3: any): void
	/** Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.
	
	See GRAPHICS::SET_DRAW_ORIGIN(...) for further information. **/
	function CLEAR_DRAW_ORIGIN(): void
	/**  **/
	function SET_BINK_MOVIE(name: string): int
	/**  **/
	function PLAY_BINK_MOVIE(binkMovie: int): void
	/**  **/
	function STOP_BINK_MOVIE(binkMovie: int): void
	/**  **/
	function RELEASE_BINK_MOVIE(binkMovie: int): void
	/**  **/
	function DRAW_BINK_MOVIE(binkMovie: int, p1: float, p2: float, p3: float, p4: float, p5: float, r: int, g: int, b: int, a: int): void
	/** In percentage: 0.0 - 100.0 **/
	function SET_BINK_MOVIE_TIME(binkMovie: int, progress: float): void
	/** In percentage: 0.0 - 100.0 **/
	function GET_BINK_MOVIE_TIME(binkMovie: int): float
	/** binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale) **/
	function SET_BINK_MOVIE_VOLUME(binkMovie: int, value: float): void
	/** Might be more appropriate in AUDIO? **/
	function ATTACH_TV_AUDIO_TO_ENTITY(entity: EntityHandle): void
	/**  **/
	function SET_BINK_MOVIE_AUDIO_FRONTEND(binkMovie: int, p1: boolean): void
	/** Probably changes tvs from being a 3d audio to being "global" audio **/
	function SET_TV_AUDIO_FRONTEND(toggle: boolean): void
	/**  **/
	function SET_BINK_SHOULD_SKIP(binkMovie: int, bShouldSkip: boolean): void
	/**  **/
	function LOAD_MOVIE_MESH_SET(movieMeshSetName: string): int
	/**  **/
	function RELEASE_MOVIE_MESH_SET(movieMeshSet: int): void
	/**  **/
	function QUERY_MOVIE_MESH_SET_STATE(p0: any): int
	/** int screenresx,screenresy;
	GET_SCREEN_RESOLUTION(&screenresx,&screenresy); **/
	function GET_SCREEN_RESOLUTION(x: IntPointer, y: IntPointer): void
	/** Returns current screen resolution. **/
	function GET_ACTUAL_SCREEN_RESOLUTION(x: IntPointer, y: IntPointer): void
	/**  **/
	function GET_ASPECT_RATIO(b: boolean): float
	/**  **/
	function GET_SCREEN_ASPECT_RATIO(): float
	/** Setting Aspect Ratio Manually in game will return:
	
	false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
	true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
	
	Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio. **/
	function GET_IS_WIDESCREEN(): boolean
	/** false = Any resolution < 1280x720
	true = Any resolution >= 1280x720 **/
	function GET_IS_HIDEF(): boolean
	/**  **/
	function ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9(): void
	/** Enables Night Vision.
	
	Example:
	C#: Function.Call(Hash.SET_NIGHTVISION, true);
	C++: GRAPHICS::SET_NIGHTVISION(true);
	
	BOOL toggle:
	true = turns night vision on for your player.
	false = turns night vision off for your player. **/
	function SET_NIGHTVISION(toggle: boolean): void
	/**  **/
	function GET_REQUESTINGNIGHTVISION(): boolean
	/**  **/
	function GET_USINGNIGHTVISION(): boolean
	/**  **/
	function SET_EXPOSURETWEAK(p0: boolean): void
	/**  **/
	function FORCE_EXPOSURE_READBACK(p0: any): void
	/**  **/
	function OVERRIDE_NIGHTVISION_LIGHT_RANGE(p0: any): void
	/**  **/
	function SET_NOISEOVERIDE(toggle: boolean): void
	/**  **/
	function SET_NOISINESSOVERIDE(value: float): void
	/** Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
	
	Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
	
	
	For .NET users...
	
	VB:
	Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
	
	        Dim x2dp, y2dp As New Native.OutputArgument
	
	        Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
	        Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
	      
	    End Function
	
	C#:
	Vector2 World3DToScreen2d(Vector3 pos)
	    {
	        var x2dp = new OutputArgument();
	        var y2dp = new OutputArgument();
	
	        Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
	        return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
	    }
	//USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
	
	Used to be called _WORLD3D_TO_SCREEN2D
	
	I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g. **/
	function GET_SCREEN_COORD_FROM_WORLD_COORD(worldX: float, worldY: float, worldZ: float, screenX: FloatPointer, screenY: FloatPointer): boolean
	/** Returns the texture resolution of the passed texture dict+name.
	
	Note: Most texture resolutions are doubled compared to the console version of the game. **/
	function GET_TEXTURE_RESOLUTION(textureDict: string, textureName: string): Vector3
	/** Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings. **/
	function OVERRIDE_PED_CREW_LOGO_TEXTURE(ped: EntityHandle, txd: string, txn: string): boolean
	/**  **/
	function SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(p0: float): void
	/** Purpose of p0 and p1 unknown. **/
	function SET_FLASH(p0: float, p1: float, fadeIn: float, duration: float, fadeOut: float): void
	/**  **/
	function DISABLE_OCCLUSION_THIS_FRAME(): void
	/** Does not affect weapons, particles, fire/explosions, flashlights or the sun.
	When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
	
	Used in Humane Labs Heist for EMP.
	
	state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on. **/
	function SET_ARTIFICIAL_LIGHTS_STATE(state: boolean): void
	/** If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles. **/
	function SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(toggle: boolean): void
	/**  **/
	function DISABLE_HDTEX_THIS_FRAME(): void
	/** Creates a tracked point, useful for checking the visibility of a 3D point on screen. **/
	function CREATE_TRACKED_POINT(): int
	/**  **/
	function SET_TRACKED_POINT_INFO(point: int, x: float, y: float, z: float, radius: float): void
	/**  **/
	function IS_TRACKED_POINT_VISIBLE(point: int): boolean
	/**  **/
	function DESTROY_TRACKED_POINT(point: int): void
	/** This function is hard-coded to always return 0. **/
	function SET_GRASS_CULL_SPHERE(p0: any, p1: any, p2: any, p3: any): int
	/** This native does absolutely nothing, just a nullsub **/
	function REMOVE_GRASS_CULL_SPHERE(p0: any): void
	/**  **/
	function PROCGRASS_ENABLE_CULLSPHERE(p0: int, p1: float, p2: float, p3: float, p4: float): void
	/**  **/
	function PROCGRASS_DISABLE_CULLSPHERE(p0: any): void
	/**  **/
	function PROCGRASS_IS_CULLSPHERE_ENABLED(p0: any): boolean
	/**  **/
	function PROCGRASS_ENABLE_AMBSCALESCAN(): void
	/**  **/
	function PROCGRASS_DISABLE_AMBSCALESCAN(): void
	/**  **/
	function DISABLE_PROCOBJ_CREATION(): void
	/**  **/
	function ENABLE_PROCOBJ_CREATION(): void
	/**  **/
	function GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void
	/** Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210? **/
	function GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(x: float, y: float, z: float, radius: float, p4: float, p5: float, p6: float): void
	/**  **/
	function GRASSBATCH_DISABLE_FLATTENING(): void
	/**  **/
	function CASCADE_SHADOWS_INIT_SESSION(): void
	/**  **/
	function CASCADE_SHADOWS_SET_CASCADE_BOUNDS(p0: any, p1: boolean, p2: float, p3: float, p4: float, p5: float, p6: boolean, p7: float): void
	/**  **/
	function CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(p0: float): void
	/**  **/
	function CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(p0: float): void
	/**  **/
	function CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(p0: float): void
	/**  **/
	function CASCADE_SHADOWS_SET_BOUND_POSITION(p0: any): void
	/** When this is set to ON, shadows only draw as you get nearer.
	
	When OFF, they draw from a further distance. **/
	function CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(toggle: boolean): void
	/**  **/
	function CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(p0: boolean): void
	/** Possible values:
	"CSM_ST_POINT"
	"CSM_ST_LINEAR"
	"CSM_ST_TWOTAP"
	"CSM_ST_BOX3x3"
	"CSM_ST_BOX4x4"
	"CSM_ST_DITHER2_LINEAR"
	"CSM_ST_CUBIC"
	"CSM_ST_DITHER4"
	"CSM_ST_DITHER16"
	"CSM_ST_SOFT16"
	"CSM_ST_DITHER16_RPDB"
	"CSM_ST_POISSON16_RPDB_GNORM"
	"CSM_ST_HIGHRES_BOX4x4"
	"CSM_ST_CLOUDS_SIMPLE"
	"CSM_ST_CLOUDS_LINEAR"
	"CSM_ST_CLOUDS_TWOTAP"
	"CSM_ST_CLOUDS_BOX3x3"
	"CSM_ST_CLOUDS_BOX4x4"
	"CSM_ST_CLOUDS_DITHER2_LINEAR"
	"CSM_ST_CLOUDS_SOFT16"
	"CSM_ST_CLOUDS_DITHER16_RPDB"
	"CSM_ST_CLOUDS_POISSON16_RPDB_GNORM" **/
	function CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(type: string): void
	/**  **/
	function CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE(): void
	/**  **/
	function CASCADE_SHADOWS_SET_AIRCRAFT_MODE(p0: boolean): void
	/**  **/
	function CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(p0: boolean): void
	/**  **/
	function CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(p0: float): void
	/**  **/
	function CASCADE_SHADOWS_ENABLE_FREEZER(p0: boolean): void
	/**  **/
	function WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(p0: any): void
	/**  **/
	function GOLF_TRAIL_SET_ENABLED(toggle: boolean): void
	/** p8 seems to always be false. **/
	function GOLF_TRAIL_SET_PATH(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float, p7: float, p8: boolean): void
	/**  **/
	function GOLF_TRAIL_SET_RADIUS(p0: float, p1: float, p2: float): void
	/**  **/
	function GOLF_TRAIL_SET_COLOUR(p0: int, p1: int, p2: int, p3: int, p4: int, p5: int, p6: int, p7: int, p8: int, p9: int, p10: int, p11: int): void
	/**  **/
	function GOLF_TRAIL_SET_TESSELLATION(p0: int, p1: int): void
	/**  **/
	function GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(p0: boolean): void
	/** 12 matches across 4 scripts. All 4 scripts were job creators.
	
	type ranged from 0 - 2.
	p4 was always 0.2f. Likely scale.
	assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
	
	Tested but noticed nothing. **/
	function GOLF_TRAIL_SET_FIXED_CONTROL_POINT(type: int, xPos: float, yPos: float, zPos: float, p4: float, red: int, green: int, blue: int, alpha: int): void
	/** Only appeared in Golf & Golf_mp. Parameters were all ptrs **/
	function GOLF_TRAIL_SET_SHADER_PARAMS(p0: float, p1: float, p2: float, p3: float, p4: float): void
	/**  **/
	function GOLF_TRAIL_SET_FACING(p0: boolean): void
	/**  **/
	function GOLF_TRAIL_GET_MAX_HEIGHT(): float
	/**  **/
	function GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(p0: int): Vector3
	/** Toggles Heatvision on/off. **/
	function SET_SEETHROUGH(toggle: boolean): void
	/**  **/
	function GET_USINGSEETHROUGH(): boolean
	/**  **/
	function SEETHROUGH_RESET(): void
	/**  **/
	function SEETHROUGH_SET_FADE_STARTDISTANCE(distance: float): void
	/**  **/
	function SEETHROUGH_SET_FADE_ENDDISTANCE(distance: float): void
	/**  **/
	function SEETHROUGH_GET_MAX_THICKNESS(): float
	/** 0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is "better" view. See https://gfycat.com/FirmFlippantGourami
	min: 1.0
	max: 10000.0 **/
	function SEETHROUGH_SET_MAX_THICKNESS(thickness: float): void
	/**  **/
	function SEETHROUGH_SET_NOISE_MIN(amount: float): void
	/**  **/
	function SEETHROUGH_SET_NOISE_MAX(amount: float): void
	/**  **/
	function SEETHROUGH_SET_HILIGHT_INTENSITY(intensity: float): void
	/**  **/
	function SEETHROUGH_SET_HIGHLIGHT_NOISE(noise: float): void
	/** min: 0.0
	max: 0.75 **/
	function SEETHROUGH_SET_HEATSCALE(index: int, heatScale: float): void
	/**  **/
	function SEETHROUGH_SET_COLOR_NEAR(red: int, green: int, blue: int): void
	/** Setter for GET_MOTIONBLUR_MAX_VEL_SCALER **/
	function SET_MOTIONBLUR_MAX_VEL_SCALER(p0: float): void
	/** Getter for SET_MOTIONBLUR_MAX_VEL_SCALER **/
	function GET_MOTIONBLUR_MAX_VEL_SCALER(): float
	/**  **/
	function SET_FORCE_MOTIONBLUR(toggle: boolean): void
	/**  **/
	function TOGGLE_PLAYER_DAMAGE_OVERLAY(toggle: boolean): void
	/** Sets an unknown value related to timecycles. **/
	function RESET_ADAPTATION(unk: int): void
	/** time in ms to transition to fully blurred screen **/
	function TRIGGER_SCREENBLUR_FADE_IN(transitionTime: float): boolean
	/** time in ms to transition from fully blurred to normal **/
	function TRIGGER_SCREENBLUR_FADE_OUT(transitionTime: float): boolean
	/**  **/
	function DISABLE_SCREENBLUR_FADE(): void
	/**  **/
	function GET_SCREENBLUR_FADE_CURRENT_TIME(): float
	/** Returns whether screen transition to blur/from blur is running. **/
	function IS_SCREENBLUR_FADE_RUNNING(): boolean
	/**  **/
	function TOGGLE_PAUSED_RENDERPHASES(toggle: boolean): void
	/**  **/
	function GET_TOGGLE_PAUSED_RENDERPHASES_STATUS(): boolean
	/**  **/
	function RESET_PAUSED_RENDERPHASES(): void
	/**  **/
	function GRAB_PAUSEMENU_OWNERSHIP(): void
	/** Every p2 - p5 occurrence was 0f. **/
	function SET_HIDOF_OVERRIDE(p0: boolean, p1: boolean, nearplaneOut: float, nearplaneIn: float, farplaneOut: float, farplaneIn: float): void
	/**  **/
	function SET_LOCK_ADAPTIVE_DOF_DISTANCE(p0: any): void
	/**  **/
	function PHONEPHOTOEDITOR_TOGGLE(p0: boolean): boolean
	/**  **/
	function PHONEPHOTOEDITOR_IS_ACTIVE(): boolean
	/**  **/
	function PHONEPHOTOEDITOR_SET_FRAME_TXD(textureDict: string, p1: boolean): boolean
	/** GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);
	
	Axis - Invert Axis Flags
	
	Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
	
	
	-------------------------------------------------------------------
	C#
	
	Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
	
	char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
	
	float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
	
	float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
	
	float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
	
	bool xaxis, yaxis, zaxis = To bool the axis values.
	
	example:
	Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0); **/
	function START_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName: string, xPos: float, yPos: float, zPos: float, xRot: float, yRot: float, zRot: float, scale: float, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName: string, xPos: float, yPos: float, zPos: float, xRot: float, yRot: float, zRot: float, scale: float, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): boolean
	/** GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);
	
	Axis - Invert Axis Flags
	
	Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName: string, ped: EntityHandle, offsetX: float, offsetY: float, offsetZ: float, rotX: float, rotY: float, rotZ: float, boneIndex: int, scale: float, axisX: boolean, axisY: boolean, axisZ: boolean): boolean
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName: string, ped: EntityHandle, offsetX: float, offsetY: float, offsetZ: float, rotX: float, rotY: float, rotZ: float, boneIndex: int, scale: float, axisX: boolean, axisY: boolean, axisZ: boolean): boolean
	/** Starts a particle effect on an entity for example your player.
	
	Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
	
	Example:
	C#:
	Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
	
	Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
	however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
	
	-can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones. **/
	function START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName: string, entity: EntityHandle, offsetX: float, offsetY: float, offsetZ: float, rotX: float, rotY: float, rotZ: float, scale: float, axisX: boolean, axisY: boolean, axisZ: boolean): boolean
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName: string, entity: EntityHandle, offsetX: float, offsetY: float, offsetZ: float, rotX: float, rotY: float, rotZ: float, scale: float, axisX: boolean, axisY: boolean, axisZ: boolean): boolean
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(effectName: string, entity: EntityHandle, offsetX: float, offsetY: float, offsetZ: float, rotX: float, rotY: float, rotZ: float, boneIndex: int, scale: float, axisX: boolean, axisY: boolean, axisZ: boolean): boolean
	/** only works on some fx's, not networked **/
	function SET_PARTICLE_FX_NON_LOOPED_COLOUR(r: float, g: float, b: float): void
	/** Usage example for C#:
	
	Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
	
	Note: the argument alpha ranges from 0.0f-1.0f ! **/
	function SET_PARTICLE_FX_NON_LOOPED_ALPHA(alpha: float): void
	/**  **/
	function SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(p0: float, p1: float, scale: float): void
	/** Used only once in the scripts (taxi_clowncar) **/
	function SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(toggle: boolean): void
	/** GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)
	
	
	p11 seems to be always 0
	
	Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_PARTICLE_FX_LOOPED_AT_COORD(effectName: string, x: float, y: float, z: float, xRot: float, yRot: float, zRot: float, scale: float, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): int
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_PARTICLE_FX_LOOPED_ON_PED_BONE(effectName: string, ped: EntityHandle, xOffset: float, yOffset: float, zOffset: float, xRot: float, yRot: float, zRot: float, boneIndex: int, scale: float, xAxis: boolean, yAxis: boolean, zAxis: boolean): int
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_PARTICLE_FX_LOOPED_ON_ENTITY(effectName: string, entity: EntityHandle, xOffset: float, yOffset: float, zOffset: float, xRot: float, yRot: float, zRot: float, scale: float, xAxis: boolean, yAxis: boolean, zAxis: boolean): int
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName: string, entity: EntityHandle, xOffset: float, yOffset: float, zOffset: float, xRot: float, yRot: float, zRot: float, boneIndex: int, scale: float, xAxis: boolean, yAxis: boolean, zAxis: boolean): int
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(effectName: string, entity: EntityHandle, xOffset: float, yOffset: float, zOffset: float, xRot: float, yRot: float, zRot: float, scale: float, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: float, g: float, b: float, a: float): int
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName: string, entity: EntityHandle, xOffset: float, yOffset: float, zOffset: float, xRot: float, yRot: float, zRot: float, boneIndex: int, scale: float, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: float, g: float, b: float, a: float): int
	/** p1 is always 0 in the native scripts **/
	function STOP_PARTICLE_FX_LOOPED(ptfxHandle: int, p1: boolean): void
	/**  **/
	function REMOVE_PARTICLE_FX(ptfxHandle: int, p1: boolean): void
	/**  **/
	function REMOVE_PARTICLE_FX_FROM_ENTITY(entity: EntityHandle): void
	/**  **/
	function REMOVE_PARTICLE_FX_IN_RANGE(X: float, Y: float, Z: float, radius: float): void
	/**  **/
	function FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(p0: any, p1: any): void
	/**  **/
	function DOES_PARTICLE_FX_LOOPED_EXIST(ptfxHandle: int): boolean
	/**  **/
	function SET_PARTICLE_FX_LOOPED_OFFSETS(ptfxHandle: int, x: float, y: float, z: float, rotX: float, rotY: float, rotZ: float): void
	/**  **/
	function SET_PARTICLE_FX_LOOPED_EVOLUTION(ptfxHandle: int, propertyName: string, amount: float, noNetwork: boolean): void
	/** only works on some fx's
	
	p4 = 0 **/
	function SET_PARTICLE_FX_LOOPED_COLOUR(ptfxHandle: int, r: float, g: float, b: float, p4: boolean): void
	/**  **/
	function SET_PARTICLE_FX_LOOPED_ALPHA(ptfxHandle: int, alpha: float): void
	/**  **/
	function SET_PARTICLE_FX_LOOPED_SCALE(ptfxHandle: int, scale: float): void
	/**  **/
	function SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(ptfxHandle: int, range: float): void
	/**  **/
	function SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(p0: boolean): void
	/**  **/
	function SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_PARTICLE_FX_SHOOTOUT_BOAT(p0: any): void
	/**  **/
	function CLEAR_PARTICLE_FX_SHOOTOUT_BOAT(): void
	/**  **/
	function SET_PARTICLE_FX_BLOOD_SCALE(p0: any): void
	/**  **/
	function DISABLE_IN_WATER_PTFX(toggle: boolean): void
	/**  **/
	function DISABLE_DOWNWASH_PTFX(toggle: boolean): void
	/**  **/
	function SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(p0: any): void
	/** Creates cartoon effect when Michel smokes the weed **/
	function ENABLE_CLOWN_BLOOD_VFX(toggle: boolean): void
	/** Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect. **/
	function ENABLE_ALIEN_BLOOD_VFX(toggle: boolean): void
	/**  **/
	function SET_PARTICLE_FX_BULLET_IMPACT_SCALE(scale: float): void
	/**  **/
	function SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(p0: float): void
	/**  **/
	function SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(p0: boolean): void
	/**  **/
	function SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(p0: float): void
	/**  **/
	function SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(p0: float): void
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(p0: string): void
	/**  **/
	function SET_SKIDMARK_RANGE_SCALE(scale: float): void
	/**  **/
	function SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(p0: any): void
	/**  **/
	function FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(p0: boolean): void
	/** From the b678d decompiled scripts:
	
	 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("FM_Mission_Controler");
	 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_apartment_mp");
	 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_indep_fireworks");
	 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_cig_plane");
	 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_creator");
	 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_ornate_heist");
	 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_prison_break_heist_station");
	
	Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function USE_PARTICLE_FX_ASSET(name: string): void
	/** Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function SET_PARTICLE_FX_OVERRIDE(oldAsset: string, newAsset: string): void
	/** Resets the effect of SET_PARTICLE_FX_OVERRIDE
	
	Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json **/
	function RESET_PARTICLE_FX_OVERRIDE(name: string): void
	/**  **/
	function SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(p0: boolean): void
	/**  **/
	function SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(p0: float): void
	/**  **/
	function WASH_DECALS_IN_RANGE(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function WASH_DECALS_FROM_VEHICLE(vehicle: EntityHandle, p1: float): void
	/** Fades nearby decals within the range specified **/
	function FADE_DECALS_IN_RANGE(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/** Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol... **/
	function REMOVE_DECALS_IN_RANGE(x: float, y: float, z: float, range: float): void
	/**  **/
	function REMOVE_DECALS_FROM_OBJECT(obj: EntityHandle): void
	/**  **/
	function REMOVE_DECALS_FROM_OBJECT_FACING(obj: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function REMOVE_DECALS_FROM_VEHICLE(vehicle: EntityHandle): void
	/** decal types:
	
	public enum DecalTypes
	{
	    splatters_blood = 1010,
	    splatters_blood_dir = 1015,
	    splatters_blood_mist = 1017,
	    splatters_mud = 1020,
	    splatters_paint = 1030,
	    splatters_water = 1040,
	    splatters_water_hydrant = 1050,
	    splatters_blood2 = 1110,
	    weapImpact_metal = 4010,
	    weapImpact_concrete = 4020,
	    weapImpact_mattress = 4030,
	    weapImpact_mud = 4032,
	    weapImpact_wood = 4050,
	    weapImpact_sand = 4053,
	    weapImpact_cardboard = 4040,
	    weapImpact_melee_glass = 4100,
	    weapImpact_glass_blood = 4102,
	    weapImpact_glass_blood2 = 4104,
	    weapImpact_shotgun_paper = 4200,
	    weapImpact_shotgun_mattress,
	    weapImpact_shotgun_metal,
	    weapImpact_shotgun_wood,
	    weapImpact_shotgun_dirt,
	    weapImpact_shotgun_tvscreen,
	    weapImpact_shotgun_tvscreen2,
	    weapImpact_shotgun_tvscreen3,
	    weapImpact_melee_concrete = 4310,
	    weapImpact_melee_wood = 4312,
	    weapImpact_melee_metal = 4314,
	    burn1 = 4421,
	    burn2,
	    burn3,
	    burn4,
	    burn5,
	    bang_concrete_bang = 5000,
	    bang_concrete_bang2,
	    bang_bullet_bang,
	    bang_bullet_bang2 = 5004,
	    bang_glass = 5031,
	    bang_glass2,
	    solidPool_water = 9000,
	    solidPool_blood,
	    solidPool_oil,
	    solidPool_petrol,
	    solidPool_mud,
	    porousPool_water,
	    porousPool_blood,
	    porousPool_oil,
	    porousPool_petrol,
	    porousPool_mud,
	    porousPool_water_ped_drip,
	    liquidTrail_water = 9050
	} **/
	function ADD_DECAL(decalType: int, posX: float, posY: float, posZ: float, p4: float, p5: float, p6: float, p7: float, p8: float, p9: float, width: float, height: float, rCoef: float, gCoef: float, bCoef: float, opacity: float, timeout: float, p17: boolean, p18: boolean, p19: boolean): int
	/**  **/
	function ADD_PETROL_DECAL(x: float, y: float, z: float, groundLvl: float, width: float, transparency: float): int
	/**  **/
	function ADD_OIL_DECAL(x: float, y: float, z: float, groundLvl: float, width: float, transparency: float): int
	/**  **/
	function START_PETROL_TRAIL_DECALS(p0: float): void
	/**  **/
	function ADD_PETROL_TRAIL_DECAL_INFO(x: float, y: float, z: float, p3: float): void
	/**  **/
	function END_PETROL_TRAIL_DECALS(): void
	/**  **/
	function REMOVE_DECAL(decal: int): void
	/**  **/
	function IS_DECAL_ALIVE(decal: int): boolean
	/**  **/
	function GET_DECAL_WASH_LEVEL(decal: int): float
	/**  **/
	function SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME(): void
	/**  **/
	function SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME(): void
	/**  **/
	function SET_DISABLE_DECAL_RENDERING_THIS_FRAME(): void
	/**  **/
	function GET_IS_PETROL_DECAL_IN_RANGE(xCoord: float, yCoord: float, zCoord: float, radius: float): boolean
	/**  **/
	function PATCH_DECAL_DIFFUSE_MAP(decalType: int, textureDict: string, textureName: string): void
	/**  **/
	function UNPATCH_DECAL_DIFFUSE_MAP(decalType: int): void
	/**  **/
	function MOVE_VEHICLE_DECALS(p0: any, p1: any): void
	/** boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone. **/
	function ADD_VEHICLE_CREW_EMBLEM(vehicle: EntityHandle, ped: EntityHandle, boneIndex: int, x1: float, x2: float, x3: float, y1: float, y2: float, y3: float, z1: float, z2: float, z3: float, scale: float, p13: any, alpha: int): boolean
	/**  **/
	function ABORT_VEHICLE_CREW_EMBLEM_REQUEST(p0: any): boolean
	/**  **/
	function REMOVE_VEHICLE_CREW_EMBLEM(vehicle: EntityHandle, p1: int): void
	/**  **/
	function GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(vehicle: EntityHandle, p1: int): int
	/**  **/
	function DOES_VEHICLE_HAVE_CREW_EMBLEM(vehicle: EntityHandle, p1: int): boolean
	/**  **/
	function DISABLE_COMPOSITE_SHOTGUN_DECALS(toggle: boolean): void
	/**  **/
	function DISABLE_SCUFF_DECALS(toggle: boolean): void
	/**  **/
	function SET_DECAL_BULLET_IMPACT_RANGE_SCALE(p0: float): void
	/**  **/
	function OVERRIDE_INTERIOR_SMOKE_NAME(name: string): void
	/**  **/
	function OVERRIDE_INTERIOR_SMOKE_LEVEL(level: float): void
	/**  **/
	function OVERRIDE_INTERIOR_SMOKE_END(): void
	/** Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref. **/
	function REGISTER_NOIR_LENS_EFFECT(): void
	/**  **/
	function DISABLE_VEHICLE_DISTANTLIGHTS(toggle: boolean): void
	/**  **/
	function RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(p0: boolean): void
	/**  **/
	function REQUEST_EARLY_LIGHT_CHECK(): void
	/** Forces footstep tracks on all surfaces. **/
	function USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(toggle: boolean): void
	/** Forces vehicle trails on all surfaces. **/
	function USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(toggle: boolean): void
	/**  **/
	function DISABLE_REGION_VFX(p0: any): void
	/** Only one match in the scripts:
	
	GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger"); **/
	function PRESET_INTERIOR_AMBIENT_CACHE(timecycleModifierName: string): void
	/** Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
	
	Parameters:
	modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
	
	Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json **/
	function SET_TIMECYCLE_MODIFIER(modifierName: string): void
	/**  **/
	function SET_TIMECYCLE_MODIFIER_STRENGTH(strength: float): void
	/** Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json **/
	function SET_TRANSITION_TIMECYCLE_MODIFIER(modifierName: string, transition: float): void
	/**  **/
	function SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(strength: float): void
	/**  **/
	function CLEAR_TIMECYCLE_MODIFIER(): void
	/** Only use for this in the PC scripts is:
	
	if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1) **/
	function GET_TIMECYCLE_MODIFIER_INDEX(): int
	/**  **/
	function GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX(): int
	/**  **/
	function GET_IS_TIMECYCLE_TRANSITIONING_OUT(): boolean
	/**  **/
	function PUSH_TIMECYCLE_MODIFIER(): void
	/**  **/
	function POP_TIMECYCLE_MODIFIER(): void
	/**  **/
	function SET_CURRENT_PLAYER_TCMODIFIER(modifierName: string): void
	/**  **/
	function SET_PLAYER_TCMODIFIER_TRANSITION(value: float): void
	/**  **/
	function SET_NEXT_PLAYER_TCMODIFIER(modifierName: string): void
	/**  **/
	function ADD_TCMODIFIER_OVERRIDE(modifierName1: string, modifierName2: string): void
	/**  **/
	function CLEAR_ALL_TCMODIFIER_OVERRIDES(p0: string): void
	/** Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json **/
	function SET_EXTRA_TCMODIFIER(modifierName: string): void
	/** Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER **/
	function CLEAR_EXTRA_TCMODIFIER(): void
	/** See GET_TIMECYCLE_MODIFIER_INDEX for use, works the same just for the secondary timecycle modifier.
	Returns an integer representing the Timecycle modifier **/
	function GET_EXTRA_TCMODIFIER(): int
	/** The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier. **/
	function ENABLE_MOON_CYCLE_OVERRIDE(strength: float): void
	/** Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009 **/
	function DISABLE_MOON_CYCLE_OVERRIDE(): void
	/**  **/
	function REQUEST_SCALEFORM_MOVIE(scaleformName: string): int
	/** Another REQUEST_SCALEFORM_MOVIE equivalent. **/
	function REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(scaleformName: string): int
	/**  **/
	function REQUEST_SCALEFORM_MOVIE_INSTANCE(scaleformName: string): int
	/** Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
	
	These seem to be the only scaleforms ever requested by this native:
	"breaking_news"
	"desktop_pc"
	"ECG_MONITOR"
	"Hacking_PC"
	"TEETH_PULLING"
	
	Note: Unless this hash is out-of-order, this native is next-gen only.
	 **/
	function REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(scaleformName: string): int
	/**  **/
	function HAS_SCALEFORM_MOVIE_LOADED(scaleformHandle: int): boolean
	/** val is 1-20 (0 will return false) **/
	function IS_ACTIVE_SCALEFORM_MOVIE_DELETING(val: int): boolean
	/** val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc? **/
	function IS_SCALEFORM_MOVIE_DELETING(val: int): boolean
	/** Only values used in the scripts are:
	
	"heist_mp"
	"heistmap_mp"
	"instructional_buttons"
	"heist_pre" **/
	function HAS_SCALEFORM_MOVIE_FILENAME_LOADED(scaleformName: string): boolean
	/**  **/
	function HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(scaleformHandle: int): boolean
	/**  **/
	function SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(scaleformHandle: IntPointer): void
	/**  **/
	function SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(scaleform: int, toggle: boolean): void
	/**  **/
	function SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(p0: any, p1: any): void
	/** This native is used in some casino scripts to fit the scaleform in the rendertarget. **/
	function SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(scaleformHandle: int, toggle: boolean): void
	/**  **/
	function DRAW_SCALEFORM_MOVIE(scaleformHandle: int, x: float, y: float, width: float, height: float, red: int, green: int, blue: int, alpha: int, unk: int): void
	/** unk is not used so no need **/
	function DRAW_SCALEFORM_MOVIE_FULLSCREEN(scaleform: int, red: int, green: int, blue: int, alpha: int, unk: int): void
	/**  **/
	function DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(scaleform1: int, scaleform2: int, red: int, green: int, blue: int, alpha: int): void
	/**  **/
	function DRAW_SCALEFORM_MOVIE_3D(scaleform: int, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, p7: float, p8: float, p9: float, scaleX: float, scaleY: float, scaleZ: float, rotationOrder: int): void
	/**  **/
	function DRAW_SCALEFORM_MOVIE_3D_SOLID(scaleform: int, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, p7: float, p8: float, p9: float, scaleX: float, scaleY: float, scaleZ: float, rotationOrder: int): void
	/** Calls the Scaleform function. **/
	function CALL_SCALEFORM_MOVIE_METHOD(scaleform: int, method: string): void
	/** Calls the Scaleform function and passes the parameters as floats.
	
	The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0. **/
	function CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(scaleform: int, methodName: string, param1: float, param2: float, param3: float, param4: float, param5: float): void
	/** Calls the Scaleform function and passes the parameters as strings.
	
	The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL). **/
	function CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(scaleform: int, methodName: string, param1: string, param2: string, param3: string, param4: string, param5: string): void
	/** Calls the Scaleform function and passes both float and string parameters (in their respective order).
	
	The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
	
	NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
	
	Examples:
	// function MY_FUNCTION(floatParam1, floatParam2, stringParam)
	GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);
	
	// function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
	GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0); **/
	function CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform: int, methodName: string, floatParam1: float, floatParam2: float, floatParam3: float, floatParam4: float, floatParam5: float, stringParam1: string, stringParam2: string, stringParam3: string, stringParam4: string, stringParam5: string): void
	/** Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.
	
	Known components:
	19 - MP_RANK_BAR
	20 - HUD_DIRECTOR_MODE
	
	This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer". **/
	function BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(hudComponent: int, methodName: string): boolean
	/** Push a function from the Scaleform onto the stack
	 **/
	function BEGIN_SCALEFORM_MOVIE_METHOD(scaleform: int, methodName: string): boolean
	/** Starts frontend (pause menu) scaleform movie methods.
	This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
	Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions. **/
	function BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(methodName: string): boolean
	/** Starts frontend (pause menu) scaleform movie methods for header options.
	Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus. **/
	function BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(methodName: string): boolean
	/** Pops and calls the Scaleform function on the stack **/
	function END_SCALEFORM_MOVIE_METHOD(): void
	/**  **/
	function END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE(): int
	/** methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
	Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT). **/
	function IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(methodReturn: int): boolean
	/** methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
	Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string. **/
	function GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(methodReturn: int): int
	/** methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE **/
	function GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(methodReturn: int): boolean
	/** methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
	Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int. **/
	function GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(methodReturn: int): string
	/** Pushes an integer for the Scaleform function onto the stack. **/
	function SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(value: int): void
	/** Pushes a float for the Scaleform function onto the stack. **/
	function SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(value: float): void
	/** Pushes a boolean for the Scaleform function onto the stack. **/
	function SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(value: boolean): void
	/** Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.
	
	Examples:
	GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
	HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));
	GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
	
	GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
	HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(a_2);
	GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
	
	GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
	HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
	HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_4);
	GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
	
	GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
	HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
	GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING(); **/
	function BEGIN_TEXT_COMMAND_SCALEFORM_STRING(componentType: string): void
	/**  **/
	function END_TEXT_COMMAND_SCALEFORM_STRING(): void
	/** Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
	
	END_TEXT_COMMAND_VIA_SPECIAL_MODIFIABLE_STRING? **/
	function END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING(): void
	/** Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
	Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for "name" (organisation, players..). **/
	function SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(string: string): void
	/**  **/
	function SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(string: string): void
	/**  **/
	function SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(string: string): void
	/**  **/
	function DOES_LATEST_BRIEF_STRING_EXIST(p0: int): boolean
	/**  **/
	function SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(value: int): void
	/**  **/
	function REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent: int): void
	/**  **/
	function HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(hudComponent: int): boolean
	/**  **/
	function REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent: int): void
	/**  **/
	function PASS_KEYBOARD_INPUT_TO_SCALEFORM(scaleformHandle: int): boolean
	/**  **/
	function SET_TV_CHANNEL(channel: int): void
	/**  **/
	function GET_TV_CHANNEL(): int
	/**  **/
	function SET_TV_VOLUME(volume: float): void
	/**  **/
	function GET_TV_VOLUME(): float
	/** All calls to this native are preceded by calls to GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER and GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU, respectively.
	
	"act_cinema.ysc", line 1483:
	HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
	HUD::SET_TEXT_RENDER_ID(l_AE);
	GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
	GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
	if (GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(${movie_arthouse})) {
	    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
	} else { 
	    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
	}
	
	"am_mp_property_int.ysc", line 102545:
	if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {
	    if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {
	        HUD::SET_TEXT_RENDER_ID(a_2._f1);
	        GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
	        GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
	        GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
	        if (GRAPHICS::GET_TV_CHANNEL() == -1) {
	            sub_a8fa5(a_2, 1);
	        } else { 
	            sub_a8fa5(a_2, 1);
	            GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);
	        }
	        HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());
	    }
	}
	 **/
	function DRAW_TV_CHANNEL(xPos: float, yPos: float, xScale: float, yScale: float, rotation: float, red: int, green: int, blue: int, alpha: int): void
	/** Loads specified video sequence into the TV Channel
	TV_Channel ranges from 0-2
	VideoSequence can be any of the following:
	"PL_STD_CNT" CNT Standard Channel
	"PL_STD_WZL" Weazel Standard Channel
	"PL_LO_CNT"
	"PL_LO_WZL"
	"PL_SP_WORKOUT"
	"PL_SP_INV" - Jay Norris Assassination Mission Fail
	"PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
	"PL_LO_RS" - Righteous Slaughter Ad
	"PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
	"PL_SP_PLSH1_INTRO"
	"PL_LES1_FAME_OR_SHAME"
	"PL_STD_WZL_FOS_EP2"
	"PL_MP_WEAZEL" - Weazel Logo on loop
	"PL_MP_CCTV" - Generic CCTV loop
	
	Restart:
	0=video sequence continues as normal
	1=sequence restarts from beginning every time that channel is selected
	
	
	The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
	https://pastebin.com/zUzGB6h7 **/
	function SET_TV_CHANNEL_PLAYLIST(tvChannel: int, playlistName: string, restart: boolean): void
	/**  **/
	function SET_TV_CHANNEL_PLAYLIST_AT_HOUR(tvChannel: int, playlistName: string, hour: int): void
	/**  **/
	function CLEAR_TV_CHANNEL_PLAYLIST(tvChannel: int): void
	/**  **/
	function IS_PLAYLIST_ON_CHANNEL(tvChannel: int, p1: any): boolean
	/**  **/
	function IS_TVSHOW_CURRENTLY_PLAYING(videoCliphash: Hash): boolean
	/**  **/
	function ENABLE_MOVIE_KEYFRAME_WAIT(toggle: boolean): void
	/**  **/
	function SET_TV_PLAYER_WATCHING_THIS_FRAME(p0: any): void
	/**  **/
	function GET_CURRENT_TV_CLIP_NAMEHASH(): Hash
	/**  **/
	function ENABLE_MOVIE_SUBTITLES(toggle: boolean): void
	/**  **/
	function UI3DSCENE_IS_AVAILABLE(): boolean
	/** All presets can be found in common\data\ui\uiscenes.meta **/
	function UI3DSCENE_PUSH_PRESET(presetName: string): boolean
	/** It's called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET
	
	presetName was always "CELEBRATION_WINNER"
	All presets can be found in common\data\ui\uiscenes.meta **/
	function UI3DSCENE_ASSIGN_PED_TO_SLOT(presetName: string, ped: EntityHandle, p2: int, posX: float, posY: float, posZ: float): boolean
	/**  **/
	function UI3DSCENE_CLEAR_PATCHED_DATA(): void
	/**  **/
	function UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(toggle: boolean): void
	/** This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
	This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`. **/
	function TERRAINGRID_ACTIVATE(toggle: boolean): void
	/** This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`.
	This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.
	
	All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
	
	This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.
	The forward args here are a direction vector, something similar to what's returned by GET_ENTITY_FORWARD_VECTOR.
	normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.
	
	Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg **/
	function TERRAINGRID_SET_PARAMS(x: float, y: float, z: float, forwardX: float, forwardY: float, forwardZ: float, sizeX: float, sizeY: float, sizeZ: float, gridScale: float, glowIntensity: float, normalHeight: float, heightDiff: float): void
	/** This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`.
	This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
	All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png **/
	function TERRAINGRID_SET_COLOURS(lowR: int, lowG: int, lowB: int, lowAlpha: int, r: int, g: int, b: int, alpha: int, highR: int, highG: int, highB: int, highAlpha: int): void
	/** duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
	if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
	
	Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json **/
	function ANIMPOSTFX_PLAY(effectName: string, duration: int, looped: boolean): void
	/** See ANIMPOSTFX_PLAY
	
	Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json **/
	function ANIMPOSTFX_STOP(effectName: string): void
	/** See ANIMPOSTFX_PLAY
	
	Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json **/
	function ANIMPOSTFX_GET_CURRENT_TIME(effectName: string): float
	/** Returns whether the specified effect is active.
	See ANIMPOSTFX_PLAY
	
	Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json **/
	function ANIMPOSTFX_IS_RUNNING(effectName: string): boolean
	/** Stops ALL currently playing effects. **/
	function ANIMPOSTFX_STOP_ALL(): void
	/** Stops the effect and sets a value (bool) in its data (+0x199) to false.
	See ANIMPOSTFX_PLAY
	
	Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json **/
	function ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(effectName: string): void
}

/** @noSelf **/
declare namespace HUD {
	/** Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here
	
	
	e.g
	void StartLoadingMessage(char *text, int spinnerType = 3)
	  {
	     BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
	       ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	       END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
	    }
	/ *OR* /
	 void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
	  {
	     BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
	       ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	       END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
	        WAIT(timeMs);
	     BUSYSPINNER_OFF();
	 }
	
	
	These are some localized strings used in the loading spinner.
	"PM_WAIT"                   = Please Wait
	"CELEB_WPLYRS"              = Waiting For Players.
	"CELL_SPINNER2"             = Scanning storage.
	"ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
	"ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
	"FM_COR_AUTOD"                        = Just spinner no text
	"FM_IHELP_WAT2"                        = Waiting for other players
	"FM_JIP_WAITO"                            = Game options are being set
	"FMMC_DOWNLOAD"                    = Downloading
	"FMMC_PLYLOAD"                         = Loading
	"FMMC_STARTTRAN"                    = Launching session
	"HUD_QUITTING"                           =  Quiting session
	"KILL_STRIP_IDM"                         = Waiting for to accept
	"MP_SPINLOADING"                      = Loading **/
	function BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(string: string): void
	/** enum eBusySpinnerType
	{
		BUSY_SPINNER_LEFT,
		BUSY_SPINNER_LEFT_2,
		BUSY_SPINNER_LEFT_3,
		BUSY_SPINNER_SAVE,
		BUSY_SPINNER_RIGHT,
	}; **/
	function END_TEXT_COMMAND_BUSYSPINNER_ON(busySpinnerType: int): void
	/** Removes the loading prompt at the bottom right of the screen. **/
	function BUSYSPINNER_OFF(): void
	/**  **/
	function PRELOAD_BUSYSPINNER(): void
	/**  **/
	function BUSYSPINNER_IS_ON(): boolean
	/**  **/
	function BUSYSPINNER_IS_DISPLAYING(): boolean
	/**  **/
	function DISABLE_PAUSEMENU_SPINNER(p0: boolean): void
	/** Shows the cursor on screen for one frame. **/
	function SET_MOUSE_CURSOR_THIS_FRAME(): void
	/** Changes the mouse cursor's sprite. 
	1 = Normal
	6 = Left Arrow
	7 = Right Arrow **/
	function SET_MOUSE_CURSOR_STYLE(spriteId: int): void
	/** Shows/hides the frontend cursor on the pause menu or similar menus.
	Clicking off and then on the game window will show it again. **/
	function SET_MOUSE_CURSOR_VISIBLE(toggle: boolean): void
	/** Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work. **/
	function IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS(): boolean
	/**  **/
	function GET_MOUSE_EVENT(scaleformHandle: int, p1: Address, p2: Address, p3: Address): boolean
	/**  **/
	function THEFEED_ONLY_SHOW_TOOLTIPS(toggle: boolean): void
	/**  **/
	function THEFEED_SET_SCRIPTED_MENU_HEIGHT(pos: float): void
	/** Stops loading screen tips shown by invoking `THEFEED_SHOW` **/
	function THEFEED_HIDE(): void
	/** Once called each frame hides all above radar notifications. **/
	function THEFEED_HIDE_THIS_FRAME(): void
	/** Displays loading screen tips, requires `THEFEED_AUTO_POST_GAMETIPS_ON` to be called beforehand. **/
	function THEFEED_SHOW(): void
	/**  **/
	function THEFEED_FLUSH_QUEUE(): void
	/** Removes a notification instantly instead of waiting for it to disappear **/
	function THEFEED_REMOVE_ITEM(notificationId: int): void
	/**  **/
	function THEFEED_FORCE_RENDER_ON(): void
	/** Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again. **/
	function THEFEED_FORCE_RENDER_OFF(): void
	/**  **/
	function THEFEED_PAUSE(): void
	/**  **/
	function THEFEED_RESUME(): void
	/**  **/
	function THEFEED_IS_PAUSED(): boolean
	/**  **/
	function THEFEED_REPORT_LOGO_ON(): void
	/**  **/
	function THEFEED_REPORT_LOGO_OFF(): void
	/** Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately. **/
	function THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID(): int
	/** Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `THEFEED_AUTO_POST_GAMETIPS_OFF` to display those again. **/
	function THEFEED_AUTO_POST_GAMETIPS_ON(): void
	/** Displays "normal" notifications again after calling `THEFEED_AUTO_POST_GAMETIPS_ON` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script). **/
	function THEFEED_AUTO_POST_GAMETIPS_OFF(): void
	/** From the decompiled scripts:
	HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(6);
	HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(184);
	HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(190);
	
	sets background color for the next notification
	6 = red
	184 = green
	190 = yellow
	
	Here is a list of some colors that can be used: https://gyazo.com/68bd384455fceb0a85a8729e48216e15 **/
	function THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(hudColorIndex: int): void
	/**  **/
	function THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(red: int, green: int, blue: int, alpha: int): void
	/** Related to notification color flashing, setting count to 0 invalidates a `THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE` call for the target notification. **/
	function THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(count: int): void
	/**  **/
	function THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(toggle: boolean): void
	/**  **/
	function THEFEED_RESET_ALL_PARAMETERS(): void
	/** Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627). **/
	function THEFEED_FREEZE_NEXT_POST(): void
	/**  **/
	function THEFEED_CLEAR_FROZEN_POST(): void
	/**  **/
	function THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(p0: boolean): void
	/** Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT". **/
	function THEFEED_UPDATE_ITEM_TEXTURE(txdString1: string, txnString1: string, txdString2: string, txnString2: string): void
	/** Declares the entry type of a notification, for example "STRING".
	
	int ShowNotification(char *text)
	{
		BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
	} **/
	function BEGIN_TEXT_COMMAND_THEFEED_POST(text: string): void
	/** List of picture names: https://pastebin.com/XdpJVbHz
	Example result: https://i.imgur.com/SdEZ22m.png **/
	function END_TEXT_COMMAND_THEFEED_POST_STATS(statTitle: string, iconEnum: int, stepVal: boolean, barValue: int, isImportant: boolean, pictureTextureDict: string, pictureTextureName: string): int
	/** This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
	
	List of picNames: https://pastebin.com/XdpJVbHz
	
	
	flash is a bool for fading in.
	iconTypes:
	1 : Chat Box
	2 : Email
	3 : Add Friend Request
	4 : Nothing
	5 : Nothing
	6 : Nothing
	7 : Right Jumping Arrow
	8 : RP Icon
	9 : $ Icon
	
	"sender" is the very top header. This can be any old string.
	"subject" is the header under the sender. **/
	function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(txdName: string, textureName: string, flash: boolean, iconType: int, sender: string, subject: string): int
	/** This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
	
	Needs more research.
	
	Only one type of usage in the scripts:
	
	HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0); **/
	function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(txdName: string, textureName: string, flash: boolean, iconType: int, sender: string, subject: string): int
	/** This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
	
	NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
	
	Example, only occurrence in the scripts:
	v_8 = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5); **/
	function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(txdName: string, textureName: string, flash: boolean, iconType: int, sender: string, subject: string, duration: float): int
	/** This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
	
	List of picNames https://pastebin.com/XdpJVbHz
	
	flash is a bool for fading in.
	iconTypes:
	1 : Chat Box
	2 : Email
	3 : Add Friend Request
	4 : Nothing
	5 : Nothing
	6 : Nothing
	7 : Right Jumping Arrow
	8 : RP Icon
	9 : $ Icon
	
	"sender" is the very top header. This can be any old string.
	"subject" is the header under the sender.
	"duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
	"clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.) **/
	function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(txdName: string, textureName: string, flash: boolean, iconType: int, sender: string, subject: string, duration: float, clanTag: string): int
	/** This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
	
	List of picNames:  https://pastebin.com/XdpJVbHz
	
	flash is a bool for fading in.
	iconTypes:
	1 : Chat Box
	2 : Email
	3 : Add Friend Request
	4 : Nothing
	5 : Nothing
	6 : Nothing
	7 : Right Jumping Arrow
	8 : RP Icon
	9 : $ Icon
	
	"sender" is the very top header. This can be any old string.
	"subject" is the header under the sender.
	"duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
	"clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
	iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
	
	
	int IconNotification(char *text, char *text2, char *Subject)
	{
	    BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
	 ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	   _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
	   return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
	} **/
	function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(txdName: string, textureName: string, flash: boolean, iconType1: int, sender: string, subject: string, duration: float, clanTag: string, iconType2: int, p9: int): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_TICKER(blink: boolean, p1: boolean): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(blink: boolean, p1: boolean): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(blink: boolean, p1: boolean): int
	/** Shows an "award" notification above the minimap, example: https://i.imgur.com/e2DNaKX.png
	Example:
	
	HUD::BEGIN_TEXT_COMMAND_THEFEED_POST("HUNT");
	HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED"); **/
	function END_TEXT_COMMAND_THEFEED_POST_AWARD(textureDict: string, textureName: string, rpBonus: int, colorOverlay: int, titleLabel: string): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_CREWTAG(p0: boolean, p1: boolean, p2: IntPointer, p3: int, isLeader: boolean, unk0: boolean, clanDesc: int, R: int, G: int, B: int): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(p0: boolean, p1: boolean, p2: IntPointer, p3: int, isLeader: boolean, unk0: boolean, clanDesc: int, playerName: string, R: int, G: int, B: int): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_UNLOCK(p0: any, p1: any, p2: any): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(p0: any, p1: any, p2: any, p3: any): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_MPTICKER(blink: boolean, p1: boolean): int
	/**  **/
	function END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(p0: string, p1: string, p2: string, p3: boolean, p4: boolean): int
	/** This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
	
	List of picNames: https://pastebin.com/XdpJVbHz
	HUD colors and their values: https://pastebin.com/d9aHPbXN
	
	Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png **/
	function END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(txdName1: string, textureName1: string, count1: int, txdName2: string, textureName2: string, count2: int, hudColor1: int, hudColor2: int): int
	/** returns a notification handle, prints out a notification like below:
	type range: 0 - 2
	if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
	
	example: 
	HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
	- https://imgur.com/lGBPCz3 **/
	function END_TEXT_COMMAND_THEFEED_POST_REPLAY(type: int, image: int, text: string): int
	/** returns a notification handle, prints out a notification like below:
	type range: 0 - 2
	if you set type to 1, button accepts "~INPUT_SOMETHING~"
	
	example:
	HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
	- https://imgur.com/UPy0Ial
	
	
	Examples from the scripts:
	l_D1[1/ *1* /]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
	l_D1[2/ *1* /]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_SAVE_REPLAY_CLIP~","");
	l_D1[1/ *1* /]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
	l_D1[2/ *1* /]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
	 **/
	function END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(type: int, button: string, text: string): int
	/** void ShowSubtitle(const char *text)
	{
	  BEGIN_TEXT_COMMAND_PRINT("STRING");
	 ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	   END_TEXT_COMMAND_PRINT(2000, true);
	} **/
	function BEGIN_TEXT_COMMAND_PRINT(GxtEntry: string): void
	/** Draws the subtitle at middle center of the screen.
	
	int duration = time in milliseconds to show text on screen before disappearing
	
	drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
	
	Used to be known as _DRAW_SUBTITLE_TIMED **/
	function END_TEXT_COMMAND_PRINT(duration: int, drawImmediately: boolean): void
	/** nothin doin. 
	
	BOOL Message(const char* text)
	   {
	     BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
	      ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	       return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
	   } **/
	function BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(text: string): void
	/**  **/
	function END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(): boolean
	/** The following were found in the decompiled script files:
	STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
	
	ESDOLLA - cash
	ESMINDOLLA - cash (negative)
	
	Used to be known as _SET_TEXT_ENTRY **/
	function BEGIN_TEXT_COMMAND_DISPLAY_TEXT(text: string): void
	/** After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.
	
	Used to be known as _DRAW_TEXT **/
	function END_TEXT_COMMAND_DISPLAY_TEXT(x: float, y: float, p2: int): void
	/**  **/
	function BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(text: string): void
	/**  **/
	function END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(p0: boolean): float
	/** int GetLineCount(char *text, float x, float y)
	    {
	     BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING("STRING");
	                ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	      return BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);
	    } **/
	function BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(entry: string): void
	/** Determines how many lines the text string will use when drawn on screen. 
	Must use 0x521FB041D93DD0E4 for setting up **/
	function END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x: float, y: float): int
	/** Used to be known as _SET_TEXT_COMPONENT_FORMAT **/
	function BEGIN_TEXT_COMMAND_DISPLAY_HELP(inputType: string): void
	/** shape goes from -1 to 50 (may be more).
	p0 is always 0.
	
	Example:
	void FloatingHelpText(const char* text)
	{
	    BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
	  ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	   END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
	}
	
	Image:
	- imgbin.org/images/26209.jpg
	
	more inputs/icons:
	- https://pastebin.com/nqNYWMSB
	
	Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL **/
	function END_TEXT_COMMAND_DISPLAY_HELP(p0: int, loop: boolean, beep: boolean, shape: int): void
	/** BOOL IsContextActive(char *ctx)
	    {
	     BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
	     return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
	  } **/
	function BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(labelName: string): void
	/**  **/
	function END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(p0: int): boolean
	/** Starts a text command to change the name of a blip displayed in the pause menu.
	This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
	Example:
	
	HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");
	HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Name");
	HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip); **/
	function BEGIN_TEXT_COMMAND_SET_BLIP_NAME(textLabel: string): void
	/** Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip. **/
	function END_TEXT_COMMAND_SET_BLIP_NAME(blip: Blip): void
	/**  **/
	function BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0: string): void
	/**  **/
	function END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0: boolean): void
	/** clears a print text command with this text **/
	function BEGIN_TEXT_COMMAND_CLEAR_PRINT(text: string): void
	/**  **/
	function END_TEXT_COMMAND_CLEAR_PRINT(): void
	/**  **/
	function BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(gxtEntry: string): void
	/**  **/
	function END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(p0: int): void
	/**  **/
	function ADD_TEXT_COMPONENT_INTEGER(value: int): void
	/**  **/
	function ADD_TEXT_COMPONENT_FLOAT(value: float, decimalPlaces: int): void
	/**  **/
	function ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(labelName: string): void
	/** It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key **/
	function ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(gxtEntryHash: Hash): void
	/**  **/
	function ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(blip: Blip): void
	/**  **/
	function ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text: string): void
	/** Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research. **/
	function ADD_TEXT_COMPONENT_SUBSTRING_TIME(timestamp: int, flags: int): void
	/**  **/
	function ADD_TEXT_COMPONENT_FORMATTED_INTEGER(value: int, commaSeparated: boolean): void
	/** p1 was always -1 **/
	function ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(p0: string, p1: int): void
	/** This native (along with ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY and ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME) do not actually filter anything. They simply add the provided text (as of 944) **/
	function ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(website: string): void
	/**  **/
	function ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(string: string): void
	/**  **/
	function SET_COLOUR_OF_NEXT_TEXT_COMPONENT(hudColor: int): void
	/** Returns a substring of a specified length starting at a specified position.
	
	Example:
	// Get "STRING" text from "MY_STRING"
	subStr = HUD::_GET_TEXT_SUBSTRING("MY_STRING", 3, 6); **/
	function GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(text: string, position: int, length: int): string
	/** Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
	
	NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
	
	Example:
	// Condensed example of how Rockstar uses this function
	strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());
	subStr = HUD::_GET_TEXT_SUBSTRING_SAFE(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);
	
	--
	
	"fm_race_creator.ysc", line 85115:
	// parameters modified for clarity
	BOOL sub_8e5aa(char *text, int length) {
	    for (i = 0; i <= (length - 2); i += 1) {
	        if (!MISC::ARE_STRINGS_EQUAL(HUD::_GET_TEXT_SUBSTRING_SAFE(text, i, i + 1, 1), " ")) {
	            return FALSE;
	        }
	    }
	    return TRUE;
	} **/
	function GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text: string, position: int, length: int, maxLength: int): string
	/** Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
	
	Example:
	// Get "STRING" text from "MY_STRING"
	subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 9);
	// Overflows are possibly replaced with underscores (needs verification)
	subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 10); // "STRING_"? **/
	function GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(text: string, startPosition: int, endPosition: int): string
	/** Gets a string literal from a label name. **/
	function GET_FILENAME_FOR_AUDIO_CONVERSATION(labelName: string): string
	/**  **/
	function CLEAR_PRINTS(): void
	/**  **/
	function CLEAR_BRIEF(): void
	/**  **/
	function CLEAR_ALL_HELP_MESSAGES(): void
	/** p0: found arguments in the b617d scripts: https://pastebin.com/X5akCN7z **/
	function CLEAR_THIS_PRINT(p0: string): void
	/**  **/
	function CLEAR_SMALL_PRINTS(): void
	/**  **/
	function DOES_TEXT_BLOCK_EXIST(gxt: string): boolean
	/** Request a gxt into the passed slot. **/
	function REQUEST_ADDITIONAL_TEXT(gxt: string, slot: int): void
	/**  **/
	function REQUEST_ADDITIONAL_TEXT_FOR_DLC(gxt: string, slot: int): void
	/**  **/
	function HAS_ADDITIONAL_TEXT_LOADED(slot: int): boolean
	/**  **/
	function CLEAR_ADDITIONAL_TEXT(p0: int, p1: boolean): void
	/**  **/
	function IS_STREAMING_ADDITIONAL_TEXT(p0: int): boolean
	/** Checks if the specified gxt has loaded into the passed slot. **/
	function HAS_THIS_ADDITIONAL_TEXT_LOADED(gxt: string, slot: int): boolean
	/**  **/
	function IS_MESSAGE_BEING_DISPLAYED(): boolean
	/** Checks if the passed gxt name exists in the game files. **/
	function DOES_TEXT_LABEL_EXIST(gxt: string): boolean
	/**  **/
	function GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(string: string, length: int): string
	/** Returns the string length of the string from the gxt string . **/
	function GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(gxt: string): int
	/** Returns the length of the string passed (much like strlen). **/
	function GET_LENGTH_OF_LITERAL_STRING(string: string): int
	/**  **/
	function GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(string: string): int
	/** This functions converts the hash of a street name into a readable string.
	
	For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD. **/
	function GET_STREET_NAME_FROM_HASH_KEY(hash: Hash): string
	/**  **/
	function IS_HUD_PREFERENCE_SWITCHED_ON(): boolean
	/**  **/
	function IS_RADAR_PREFERENCE_SWITCHED_ON(): boolean
	/**  **/
	function IS_SUBTITLE_PREFERENCE_SWITCHED_ON(): boolean
	/** If Hud should be displayed **/
	function DISPLAY_HUD(toggle: boolean): void
	/** Enables drawing some hud components, such as help labels, this frame, when the player is dead. **/
	function DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME(): void
	/**  **/
	function DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME(): void
	/** If Minimap / Radar should be displayed. **/
	function DISPLAY_RADAR(toggle: boolean): void
	/** Setter for GET_FAKE_SPECTATOR_MODE **/
	function SET_FAKE_SPECTATOR_MODE(toggle: boolean): void
	/** Getter for SET_FAKE_SPECTATOR_MODE **/
	function GET_FAKE_SPECTATOR_MODE(): boolean
	/**  **/
	function IS_HUD_HIDDEN(): boolean
	/**  **/
	function IS_RADAR_HIDDEN(): boolean
	/**  **/
	function IS_MINIMAP_RENDERING(): boolean
	/**  **/
	function USE_VEHICLE_TARGETING_RETICULE(p0: any): void
	/**  **/
	function ADD_VALID_VEHICLE_HIT_HASH(p0: any): void
	/**  **/
	function CLEAR_VALID_VEHICLE_HIT_HASHES(): void
	/** Enable / disable showing route for the Blip-object. **/
	function SET_BLIP_ROUTE(blip: Blip, enabled: boolean): void
	/**  **/
	function CLEAR_ALL_BLIP_ROUTES(): void
	/**  **/
	function SET_BLIP_ROUTE_COLOUR(blip: Blip, colour: int): void
	/**  **/
	function SET_FORCE_SHOW_GPS(toggle: boolean): void
	/**  **/
	function SET_USE_SET_DESTINATION_IN_PAUSE_MAP(toggle: boolean): void
	/**  **/
	function SET_BLOCK_WANTED_FLASH(disabled: boolean): void
	/**  **/
	function ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(p0: boolean): void
	/**  **/
	function FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(p0: int): void
	/** zoom ranges from 0 to 90f in R* Scripts **/
	function SET_RADAR_ZOOM_PRECISE(zoom: float): void
	/** zoomLevel ranges from 0 to 1400 in R* Scripts **/
	function SET_RADAR_ZOOM(zoomLevel: int): void
	/**  **/
	function SET_RADAR_ZOOM_TO_BLIP(blip: Blip, zoom: float): void
	/**  **/
	function SET_RADAR_ZOOM_TO_DISTANCE(zoom: float): void
	/** Does nothing (it's a nullsub). **/
	function UPDATE_RADAR_ZOOM_TO_BLIP(): void
	/**  **/
	function GET_HUD_COLOUR(hudColorIndex: int, r: IntPointer, g: IntPointer, b: IntPointer, a: IntPointer): void
	/** Sets the color of HUD_COLOUR_SCRIPT_VARIABLE **/
	function SET_SCRIPT_VARIABLE_HUD_COLOUR(r: int, g: int, b: int, a: int): void
	/** Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2 **/
	function SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(r: int, g: int, b: int, a: int): void
	/** makes hudColorIndex2 color into hudColorIndex color **/
	function REPLACE_HUD_COLOUR(hudColorIndex: int, hudColorIndex2: int): void
	/**  **/
	function REPLACE_HUD_COLOUR_WITH_RGBA(hudColorIndex: int, r: int, g: int, b: int, a: int): void
	/**  **/
	function SET_ABILITY_BAR_VISIBILITY(visible: boolean): void
	/**  **/
	function SET_ALLOW_ABILITY_BAR(toggle: boolean): void
	/**  **/
	function FLASH_ABILITY_BAR(millisecondsToFlash: int): void
	/**  **/
	function SET_ABILITY_BAR_VALUE(p0: float, p1: float): void
	/**  **/
	function FLASH_WANTED_DISPLAY(p0: boolean): void
	/**  **/
	function FORCE_OFF_WANTED_STAR_FLASH(toggle: boolean): void
	/**  **/
	function SET_CUSTOM_MP_HUD_COLOR(hudColorId: int): void
	/** This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height. **/
	function GET_RENDERED_CHARACTER_HEIGHT(size: float, font: int): float
	/** Size range : 0F to 1.0F
	p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes. **/
	function SET_TEXT_SCALE(scale: float, size: float): void
	/** colors you input not same as you think?
	A: for some reason its R B G A **/
	function SET_TEXT_COLOUR(red: int, green: int, blue: int, alpha: int): void
	/**  **/
	function SET_TEXT_CENTRE(align: boolean): void
	/**  **/
	function SET_TEXT_RIGHT_JUSTIFY(toggle: boolean): void
	/** Types -
	0: Center-Justify
	1: Left-Justify
	2: Right-Justify
	
	Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen **/
	function SET_TEXT_JUSTIFICATION(justifyType: int): void
	/** It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
	
	start - left boundry on screen position (0.0 - 1.0)
	end - right boundry on screen position (0.0 - 1.0) **/
	function SET_TEXT_WRAP(start: float, end: float): void
	/**  **/
	function SET_TEXT_LEADING(p0: int): void
	/** This native does absolutely nothing, just a nullsub **/
	function SET_TEXT_PROPORTIONAL(p0: boolean): void
	/** fonts that mess up your text where made for number values/misc stuff **/
	function SET_TEXT_FONT(fontType: int): void
	/**  **/
	function SET_TEXT_DROP_SHADOW(): void
	/** distance - shadow distance in pixels, both horizontal and vertical
	r, g, b, a - color **/
	function SET_TEXT_DROPSHADOW(distance: int, r: int, g: int, b: int, a: int): void
	/**  **/
	function SET_TEXT_OUTLINE(): void
	/** This native does absolutely nothing, just a nullsub **/
	function SET_TEXT_EDGE(p0: int, r: int, g: int, b: int, a: int): void
	/**  **/
	function SET_TEXT_RENDER_ID(renderId: int): void
	/** This function is hard-coded to always return 1. **/
	function GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID(): int
	/**  **/
	function REGISTER_NAMED_RENDERTARGET(name: string, p1: boolean): boolean
	/**  **/
	function IS_NAMED_RENDERTARGET_REGISTERED(name: string): boolean
	/**  **/
	function RELEASE_NAMED_RENDERTARGET(name: string): boolean
	/**  **/
	function LINK_NAMED_RENDERTARGET(modelHash: Hash): void
	/**  **/
	function GET_NAMED_RENDERTARGET_RENDER_ID(name: string): int
	/**  **/
	function IS_NAMED_RENDERTARGET_LINKED(modelHash: Hash): boolean
	/**  **/
	function CLEAR_HELP(toggle: boolean): void
	/**  **/
	function IS_HELP_MESSAGE_ON_SCREEN(): boolean
	/**  **/
	function HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME(): boolean
	/**  **/
	function IS_HELP_MESSAGE_BEING_DISPLAYED(): boolean
	/**  **/
	function IS_HELP_MESSAGE_FADING_OUT(): boolean
	/**  **/
	function SET_HELP_MESSAGE_STYLE(style: int, hudColor: int, alpha: int, p3: int, p4: int): void
	/**  **/
	function GET_STANDARD_BLIP_ENUM_ID(): int
	/**  **/
	function GET_WAYPOINT_BLIP_ENUM_ID(): int
	/**  **/
	function GET_NUMBER_OF_ACTIVE_BLIPS(): int
	/**  **/
	function GET_NEXT_BLIP_INFO_ID(blipSprite: int): Blip
	/**  **/
	function GET_FIRST_BLIP_INFO_ID(blipSprite: int): Blip
	/**  **/
	function GET_CLOSEST_BLIP_INFO_ID(blipSprite: int): Blip
	/**  **/
	function GET_BLIP_INFO_ID_COORD(blip: Blip): Vector3
	/**  **/
	function GET_BLIP_INFO_ID_DISPLAY(blip: Blip): int
	/** Returns a value based on what the blip is attached to
	1 - Vehicle
	2 - Ped
	3 - Object
	4 - Coord
	5 - unk
	6 - Pickup
	7 - Radius **/
	function GET_BLIP_INFO_ID_TYPE(blip: Blip): int
	/**  **/
	function GET_BLIP_INFO_ID_ENTITY_INDEX(blip: Blip): EntityHandle
	/** This function is hard-coded to always return 0. **/
	function GET_BLIP_INFO_ID_PICKUP_INDEX(blip: Blip): Pickup
	/** Returns the Blip handle of given Entity. **/
	function GET_BLIP_FROM_ENTITY(entity: EntityHandle): Blip
	/**  **/
	function ADD_BLIP_FOR_RADIUS(posX: float, posY: float, posZ: float, radius: float): Blip
	/** Adds a rectangular blip for the specified coordinates/area.
	
	It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.
	
	By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.
	
	Example image:
	minimap https://w.wew.wtf/pdcjig.png
	big map https://w.wew.wtf/zgcjcm.png
	
	(Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed) **/
	function ADD_BLIP_FOR_AREA(x: float, y: float, z: float, width: float, height: float): Blip
	/** Returns red ( default ) blip attached to entity.
	
	Example:
	Blip blip; //Put this outside your case or option
	blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
	HUD::SET_BLIP_AS_FRIENDLY(blip, true); **/
	function ADD_BLIP_FOR_ENTITY(entity: EntityHandle): Blip
	/**  **/
	function ADD_BLIP_FOR_PICKUP(pickup: Pickup): Blip
	/** Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified. **/
	function ADD_BLIP_FOR_COORD(x: float, y: float, z: float): Blip
	/**  **/
	function TRIGGER_SONAR_BLIP(posX: float, posY: float, posZ: float, radius: float, p4: int): void
	/**  **/
	function ALLOW_SONAR_BLIPS(toggle: boolean): void
	/**  **/
	function SET_BLIP_COORDS(blip: Blip, posX: float, posY: float, posZ: float): void
	/**  **/
	function GET_BLIP_COORDS(blip: Blip): Vector3
	/** Sets the displayed sprite for a specific blip..
	
	You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
	https://pastebin.com/Bpj9Sfft
	
	Blips Images + IDs:
	https://gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html **/
	function SET_BLIP_SPRITE(blip: Blip, spriteId: int): void
	/** Blips Images + IDs:
	gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html **/
	function GET_BLIP_SPRITE(blip: Blip): int
	/**  **/
	function SET_COP_BLIP_SPRITE(p0: int, p1: float): void
	/**  **/
	function SET_COP_BLIP_SPRITE_AS_STANDARD(): void
	/** Doesn't work if the label text of gxtEntry is >= 80. **/
	function SET_BLIP_NAME_FROM_TEXT_FILE(blip: Blip, gxtEntry: string): void
	/**  **/
	function SET_BLIP_NAME_TO_PLAYER_NAME(blip: Blip, player: Player): void
	/** Sets alpha-channel for blip color.
	
	Example:
	
	Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);
	HUD::SET_BLIP_COLOUR(blip , 3);
	HUD::SET_BLIP_ALPHA(blip , 64);
	 **/
	function SET_BLIP_ALPHA(blip: Blip, alpha: int): void
	/**  **/
	function GET_BLIP_ALPHA(blip: Blip): int
	/**  **/
	function SET_BLIP_FADE(blip: Blip, opacity: int, duration: int): void
	/** Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively. **/
	function GET_BLIP_FADE_DIRECTION(blip: Blip): int
	/** After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there. **/
	function SET_BLIP_ROTATION(blip: Blip, rotation: int): void
	/** Does not require whole number/integer rotations. **/
	function SET_BLIP_ROTATION_WITH_FLOAT(blip: Blip, heading: float): void
	/**  **/
	function GET_BLIP_ROTATION(blip: Blip): int
	/** Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds. **/
	function SET_BLIP_FLASH_TIMER(blip: Blip, duration: int): void
	/**  **/
	function SET_BLIP_FLASH_INTERVAL(blip: Blip, p1: any): void
	/** https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/ **/
	function SET_BLIP_COLOUR(blip: Blip, color: int): void
	/**  **/
	function SET_BLIP_SECONDARY_COLOUR(blip: Blip, r: int, g: int, b: int): void
	/**  **/
	function GET_BLIP_COLOUR(blip: Blip): int
	/**  **/
	function GET_BLIP_HUD_COLOUR(blip: Blip): int
	/**  **/
	function IS_BLIP_SHORT_RANGE(blip: Blip): boolean
	/**  **/
	function IS_BLIP_ON_MINIMAP(blip: Blip): boolean
	/**  **/
	function DOES_BLIP_HAVE_GPS_ROUTE(blip: Blip): boolean
	/**  **/
	function SET_BLIP_HIDDEN_ON_LEGEND(blip: Blip, toggle: boolean): void
	/**  **/
	function SET_BLIP_HIGH_DETAIL(blip: Blip, toggle: boolean): void
	/**  **/
	function SET_BLIP_AS_MISSION_CREATOR_BLIP(blip: Blip, toggle: boolean): void
	/**  **/
	function IS_MISSION_CREATOR_BLIP(blip: Blip): boolean
	/**  **/
	function GET_NEW_SELECTED_MISSION_CREATOR_BLIP(): Blip
	/**  **/
	function IS_HOVERING_OVER_MISSION_CREATOR_BLIP(): boolean
	/**  **/
	function SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(toggle: boolean): void
	/**  **/
	function SHOW_CONTACT_INSTRUCTIONAL_BUTTON(toggle: boolean): void
	/**  **/
	function RELOAD_MAP_MENU(): void
	/**  **/
	function SET_BLIP_MARKER_LONG_DISTANCE(p0: any, p1: any): void
	/**  **/
	function SET_BLIP_FLASHES(blip: Blip, toggle: boolean): void
	/**  **/
	function SET_BLIP_FLASHES_ALTERNATE(blip: Blip, toggle: boolean): void
	/**  **/
	function IS_BLIP_FLASHING(blip: Blip): boolean
	/** Sets whether or not the specified blip should only be displayed when nearby, or on the minimap. **/
	function SET_BLIP_AS_SHORT_RANGE(blip: Blip, toggle: boolean): void
	/**  **/
	function SET_BLIP_SCALE(blip: Blip, scale: float): void
	/** See https://imgur.com/a/lLkEsMN **/
	function SET_BLIP_SCALE_2D(blip: Blip, xScale: float, yScale: float): void
	/** See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935 **/
	function SET_BLIP_PRIORITY(blip: Blip, priority: int): void
	/** Display Id behaviours:
	0 = Doesn't show up, ever, anywhere.
	1 = Doesn't show up, ever, anywhere.
	2 = Shows on both main map and minimap. (Selectable on map)
	3 = Shows on main map only. (Selectable on map)
	4 = Shows on main map only. (Selectable on map)
	5 = Shows on minimap only.
	6 = Shows on both main map and minimap. (Selectable on map)
	7 = Doesn't show up, ever, anywhere.
	8 = Shows on both main map and minimap. (Not selectable on map)
	9 = Shows on minimap only.
	10 = Shows on both main map and minimap. (Not selectable on map)
	
	Anything higher than 10 seems to be exactly the same as 10. **/
	function SET_BLIP_DISPLAY(blip: Blip, displayId: int): void
	/** Example: https://i.imgur.com/skY6vAJ.png
	
	Index:
	1 = No distance shown in legend
	2 = Distance shown in legend
	7 = "Other Players" category, also shows distance in legend
	10 = "Property" category
	11 = "Owned Property" category
	
	Any other value behaves like index = 1, index wraps around after 255
	Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.
	Legend entries:
	7 = Other Players (BLIP_OTHPLYR)
	10 = Property (BLIP_PROPCAT)
	11 = Owned Property (BLIP_APARTCAT)
	
	Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS. **/
	function SET_BLIP_CATEGORY(blip: Blip, index: int): void
	/** In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
	
	E.g.:
	
	Ped pped = PLAYER::PLAYER_PED_ID();
	Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
	Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);
	
	works fine.
	But later attempting to delete it with:
	
	Blip b = HUD::GET_BLIP_FROM_ENTITY(v);
	if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);
	
	doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
	
	Thus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
	-------------
	
	Passing the address of the variable instead of the value works for me.
	e.g.
	int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);
	HUD::REMOVE_BLIP(&blip);
	
	
	Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'. **/
	function REMOVE_BLIP(blip: Address): void
	/** false for enemy
	true for friendly **/
	function SET_BLIP_AS_FRIENDLY(blip: Blip, toggle: boolean): void
	/**  **/
	function PULSE_BLIP(blip: Blip): void
	/**  **/
	function SHOW_NUMBER_ON_BLIP(blip: Blip, number: int): void
	/**  **/
	function HIDE_NUMBER_ON_BLIP(blip: Blip): void
	/**  **/
	function SHOW_HEIGHT_ON_BLIP(blip: Blip, toggle: boolean): void
	/** Adds a green checkmark on top of a blip. **/
	function SHOW_TICK_ON_BLIP(blip: Blip, toggle: boolean): void
	/** Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
	_SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP* **/
	function SHOW_GOLD_TICK_ON_BLIP(blip: Blip, toggle: boolean): void
	/** Adds the GTA: Online player heading indicator to a blip. **/
	function SHOW_HEADING_INDICATOR_ON_BLIP(blip: Blip, toggle: boolean): void
	/** Highlights a blip by a cyan color circle.
	
	Color can be changed with SET_BLIP_SECONDARY_COLOUR **/
	function SHOW_OUTLINE_INDICATOR_ON_BLIP(blip: Blip, toggle: boolean): void
	/** Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png
	.Indicating that that player is a friend (in GTA:O). This color can not be changed.
	To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP` **/
	function SHOW_FRIEND_INDICATOR_ON_BLIP(blip: Blip, toggle: boolean): void
	/** Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`. **/
	function SHOW_CREW_INDICATOR_ON_BLIP(blip: Blip, toggle: boolean): void
	/** Must be toggled before being queued for animation **/
	function SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(blip: Blip, toggle: boolean): void
	/**  **/
	function SET_BLIP_SHORT_HEIGHT_THRESHOLD(p0: any, p1: any): void
	/**  **/
	function SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(blip: Blip, p1: any): void
	/** Makes a blip go small when off the minimap. **/
	function SET_BLIP_AS_MINIMAL_ON_EDGE(blip: Blip, toggle: boolean): void
	/** Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png **/
	function SET_RADIUS_BLIP_EDGE(blip: Blip, toggle: boolean): void
	/**  **/
	function DOES_BLIP_EXIST(blip: Blip): boolean
	/** This native removes the current waypoint from the map.
	
	Example:
	C#:
	Function.Call(Hash.SET_WAYPOINT_OFF);
	
	C++:
	HUD::SET_WAYPOINT_OFF(); **/
	function SET_WAYPOINT_OFF(): void
	/**  **/
	function DELETE_WAYPOINTS_FROM_THIS_PLAYER(): void
	/**  **/
	function REFRESH_WAYPOINT(): void
	/**  **/
	function IS_WAYPOINT_ACTIVE(): boolean
	/**  **/
	function SET_NEW_WAYPOINT(x: float, y: float): void
	/**  **/
	function SET_BLIP_BRIGHT(blip: Blip, toggle: boolean): void
	/** As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors. **/
	function SET_BLIP_SHOW_CONE(blip: Blip, toggle: boolean, hudColorIndex: int): void
	/** Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS **/
	function REMOVE_COP_BLIP_FROM_PED(ped: EntityHandle): void
	/**  **/
	function SETUP_FAKE_CONE_DATA(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void
	/**  **/
	function REMOVE_FAKE_CONE_DATA(blip: Blip): void
	/**  **/
	function CLEAR_FAKE_CONE_ARRAY(): void
	/** This native is used to colorize certain map components like the army base at the top of the map.
	p2 appears to be always -1. If p2 is -1 then native wouldn't change the color. See https://gfycat.com/SkinnyPinkChupacabra **/
	function SET_MINIMAP_COMPONENT(componentId: int, toggle: boolean, overrideColor: int): boolean
	/**  **/
	function SET_MINIMAP_SONAR_SWEEP(toggle: boolean): void
	/**  **/
	function SHOW_ACCOUNT_PICKER(): void
	/**  **/
	function GET_MAIN_PLAYER_BLIP_ID(): Blip
	/**  **/
	function SET_PM_WARNINGSCREEN_ACTIVE(p0: boolean): void
	/**  **/
	function HIDE_LOADING_ON_FADE_THIS_FRAME(): void
	/** List of interior hashes: https://pastebin.com/1FUyXNqY
	Not for every interior zoom > 0 available. **/
	function SET_RADAR_AS_INTERIOR_THIS_FRAME(interior: Hash, x: float, y: float, z: int, zoom: int): void
	/**  **/
	function SET_INSIDE_VERY_SMALL_INTERIOR(toggle: boolean): void
	/**  **/
	function SET_INSIDE_VERY_LARGE_INTERIOR(toggle: boolean): void
	/**  **/
	function SET_RADAR_AS_EXTERIOR_THIS_FRAME(): void
	/** Sets the position of the arrow icon representing the player on both the minimap and world map.
	
	Too bad this wouldn't work over the network (obviously not). Could spoof where we would be. **/
	function SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(x: float, y: float): void
	/**  **/
	function SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(p0: any, p1: any, p2: any): void
	/**  **/
	function IS_PAUSEMAP_IN_INTERIOR_MODE(): boolean
	/**  **/
	function HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME(): void
	/**  **/
	function HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME(): void
	/** Toggles the Cayo Perico map. **/
	function SET_USE_ISLAND_MAP(toggle: boolean): void
	/** When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar. **/
	function DONT_TILT_MINIMAP_THIS_FRAME(): void
	/**  **/
	function DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME(): void
	/**  **/
	function SET_WIDESCREEN_FORMAT(p0: any): void
	/**  **/
	function DISPLAY_AREA_NAME(toggle: boolean): void
	/** "DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
	"DISPLAY_CASH(true);" disables cash amount rendering **/
	function DISPLAY_CASH(toggle: boolean): void
	/** Related to displaying cash on the HUD
	Always called before HUD::_SET_SINGLEPLAYER_HUD_CASH in decompiled scripts **/
	function USE_FAKE_MP_CASH(toggle: boolean): void
	/** Displays cash change notifications on HUD. **/
	function CHANGE_FAKE_MP_CASH(cash: int, bank: int): void
	/**  **/
	function DISPLAY_AMMO_THIS_FRAME(display: boolean): void
	/** Displays the crosshair for this frame. **/
	function DISPLAY_SNIPER_SCOPE_THIS_FRAME(): void
	/** Hides HUD and radar this frame and prohibits switching to other weapons (or accessing the weapon wheel) **/
	function HIDE_HUD_AND_RADAR_THIS_FRAME(): void
	/** Controls whether to display 'Cash'/'Bank' next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png) **/
	function ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(allow: boolean): void
	/**  **/
	function SET_MULTIPLAYER_WALLET_CASH(): void
	/**  **/
	function REMOVE_MULTIPLAYER_WALLET_CASH(): void
	/**  **/
	function SET_MULTIPLAYER_BANK_CASH(): void
	/**  **/
	function REMOVE_MULTIPLAYER_BANK_CASH(): void
	/** This native does absolutely nothing, just a nullsub **/
	function SET_MULTIPLAYER_HUD_CASH(p0: int, p1: int): void
	/** Removes multiplayer cash hud each frame **/
	function REMOVE_MULTIPLAYER_HUD_CASH(): void
	/**  **/
	function HIDE_HELP_TEXT_THIS_FRAME(): void
	/**  **/
	function IS_IME_IN_PROGRESS(): boolean
	/** The messages are localized strings.
	Examples:
	"No_bus_money"
	"Enter_bus"
	"Tour_help"
	"LETTERS_HELP2"
	"Dummy"
	
	**The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
	--------
	p1 doesn't seem to make a difference, regardless of the state it's in. 
	
	
	picture of where on the screen this is displayed?  **/
	function DISPLAY_HELP_TEXT_THIS_FRAME(message: string, p1: boolean): void
	/** Forces the weapon wheel to show/hide. **/
	function HUD_FORCE_WEAPON_WHEEL(show: boolean): void
	/** Displays "blazer_wheels_up" and "blazer_wheels_down" "weapon" icons when switching between jetski and quadbike modes. Works only on vehicles using "VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE" vehicle type. Needs to be called every time prior to switching modes, otherwise the icon will only appear when switching modes once. **/
	function HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL(): void
	/** Calling this each frame, stops the player from receiving a weapon via the weapon wheel. **/
	function HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME(): void
	/** Returns the weapon hash to the selected/highlighted weapon in the wheel **/
	function HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED(): Hash
	/** Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash **/
	function HUD_SET_WEAPON_WHEEL_TOP_SLOT(weaponHash: Hash): void
	/** Returns the weapon hash active in a specific weapon wheel slotList **/
	function HUD_GET_WEAPON_WHEEL_TOP_SLOT(weaponTypeIndex: int): Hash
	/** Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc **/
	function HUD_SHOWING_CHARACTER_SWITCH_SELECTION(toggle: boolean): void
	/** Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
	
	Doesn't seem like the flags are actually read by the game at all. **/
	function SET_GPS_FLAGS(p0: int, p1: float): void
	/** Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
	
	Doesn't seem like the flags are actually read by the game at all. **/
	function CLEAR_GPS_FLAGS(): void
	/**  **/
	function SET_RACE_TRACK_RENDER(toggle: boolean): void
	/** Does the same as SET_RACE_TRACK_RENDER(false); **/
	function CLEAR_GPS_RACE_TRACK(): void
	/** Starts a new GPS custom-route, allowing you to plot lines on the map.
	Lines are drawn directly between points.
	The GPS custom route works like the GPS multi route, except it does not follow roads.
	Example result: https://i.imgur.com/BDm5pzt.png
	hudColor: The HUD color of the GPS path.
	displayOnFoot: Draws the path regardless if the player is in a vehicle or not.
	followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed. **/
	function START_GPS_CUSTOM_ROUTE(hudColor: int, displayOnFoot: boolean, followPlayer: boolean): void
	/**  **/
	function ADD_POINT_TO_GPS_CUSTOM_ROUTE(x: float, y: float, z: float): void
	/** radarThickness: The width of the GPS route on the radar
	mapThickness: The width of the GPS route on the map **/
	function SET_GPS_CUSTOM_ROUTE_RENDER(toggle: boolean, radarThickness: int, mapThickness: int): void
	/**  **/
	function CLEAR_GPS_CUSTOM_ROUTE(): void
	/** Starts a new GPS multi-route, allowing you to create custom GPS paths.
	GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
	Once the player has passed a point, the GPS will no longer force its path through it.
	
	Works independently from the player-placed waypoint and blip routes.
	Example result: https://i.imgur.com/ZZHQatX.png
	hudColor: The HUD color of the GPS path.
	routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.
	displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not. **/
	function START_GPS_MULTI_ROUTE(hudColor: int, routeFromPlayer: boolean, displayOnFoot: boolean): void
	/**  **/
	function ADD_POINT_TO_GPS_MULTI_ROUTE(x: float, y: float, z: float): void
	/**  **/
	function SET_GPS_MULTI_ROUTE_RENDER(toggle: boolean): void
	/** Does the same as SET_GPS_MULTI_ROUTE_RENDER(false); **/
	function CLEAR_GPS_MULTI_ROUTE(): void
	/**  **/
	function CLEAR_GPS_PLAYER_WAYPOINT(): void
	/**  **/
	function SET_GPS_FLASHES(toggle: boolean): void
	/**  **/
	function SET_PLAYER_ICON_COLOUR(color: int): void
	/** adds a short flash to the Radar/Minimap
	Usage: UI.FLASH_MINIMAP_DISPLAY **/
	function FLASH_MINIMAP_DISPLAY(): void
	/**  **/
	function FLASH_MINIMAP_DISPLAY_WITH_COLOR(hudColorIndex: int): void
	/**  **/
	function TOGGLE_STEALTH_RADAR(toggle: boolean): void
	/**  **/
	function SET_MINIMAP_IN_SPECTATOR_MODE(toggle: boolean, ped: EntityHandle): void
	/**  **/
	function SET_MISSION_NAME(p0: boolean, name: string): void
	/**  **/
	function SET_MISSION_NAME_FOR_UGC_MISSION(p0: boolean, name: string): void
	/**  **/
	function SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(p0: boolean, p1: string, p2: string, p3: string, p4: string, p5: string, p6: string, p7: string, p8: string): void
	/**  **/
	function SET_MINIMAP_BLOCK_WAYPOINT(toggle: boolean): void
	/** Toggles the North Yankton map **/
	function SET_MINIMAP_IN_PROLOGUE(toggle: boolean): void
	/** If true, the entire map will be revealed.
	
	FOW = Fog of War **/
	function SET_MINIMAP_HIDE_FOW(toggle: boolean): void
	/**  **/
	function GET_MINIMAP_FOW_DISCOVERY_RATIO(): float
	/**  **/
	function GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(x: float, y: float, z: float): boolean
	/**  **/
	function SET_MINIMAP_FOW_DO_NOT_UPDATE(p0: boolean): void
	/** Up to eight coordinates may be revealed per frame **/
	function SET_MINIMAP_FOW_REVEAL_COORDINATE(x: float, y: float, z: float): void
	/** Not much is known so far on what it does _exactly_.
	All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
	You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
	You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
	Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this). **/
	function SET_MINIMAP_GOLF_COURSE(hole: int): void
	/**  **/
	function SET_MINIMAP_GOLF_COURSE_OFF(): void
	/** Locks the minimap to the specified angle in integer degrees.
	
	angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle. **/
	function LOCK_MINIMAP_ANGLE(angle: int): void
	/**  **/
	function UNLOCK_MINIMAP_ANGLE(): void
	/** Locks the minimap to the specified world position. **/
	function LOCK_MINIMAP_POSITION(x: float, y: float): void
	/**  **/
	function UNLOCK_MINIMAP_POSITION(): void
	/** Argument must be 0.0f or above 38.0f, or it will be ignored. **/
	function SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(altitude: float, p1: boolean, p2: any): void
	/**  **/
	function SET_HEALTH_HUD_DISPLAY_VALUES(health: int, capacity: int, wasAdded: boolean): void
	/**  **/
	function SET_MAX_HEALTH_HUD_DISPLAY(maximumValue: int): void
	/**  **/
	function SET_MAX_ARMOUR_HUD_DISPLAY(maximumValue: int): void
	/** Toggles the big minimap state like in GTA:Online. **/
	function SET_BIGMAP_ACTIVE(toggleBigMap: boolean, showFullMap: boolean): void
	/** Full list of components below
	
	HUD = 0;
	HUD_WANTED_STARS = 1;
	HUD_WEAPON_ICON = 2;
	HUD_CASH = 3;
	HUD_MP_CASH = 4;
	HUD_MP_MESSAGE = 5;
	HUD_VEHICLE_NAME = 6;
	HUD_AREA_NAME = 7;
	HUD_VEHICLE_CLASS = 8;
	HUD_STREET_NAME = 9;
	HUD_HELP_TEXT = 10;
	HUD_FLOATING_HELP_TEXT_1 = 11;
	HUD_FLOATING_HELP_TEXT_2 = 12;
	HUD_CASH_CHANGE = 13;
	HUD_RETICLE = 14;
	HUD_SUBTITLE_TEXT = 15;
	HUD_RADIO_STATIONS = 16;
	HUD_SAVING_GAME = 17;
	HUD_GAME_STREAM = 18;
	HUD_WEAPON_WHEEL = 19;
	HUD_WEAPON_WHEEL_STATS = 20;
	MAX_HUD_COMPONENTS = 21;
	MAX_HUD_WEAPONS = 22;
	MAX_SCRIPTED_HUD_COMPONENTS = 141; **/
	function IS_HUD_COMPONENT_ACTIVE(id: int): boolean
	/**  **/
	function IS_SCRIPTED_HUD_COMPONENT_ACTIVE(id: int): boolean
	/**  **/
	function HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id: int): void
	/**  **/
	function SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id: int): void
	/**  **/
	function IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(id: int): boolean
	/** This function hides various HUD (Heads-up Display) components.
	Listed below are the integers and the corresponding HUD component.
	- 1 : WANTED_STARS
	- 2 : WEAPON_ICON
	- 3 : CASH
	- 4 : MP_CASH
	- 5 : MP_MESSAGE
	- 6 : VEHICLE_NAME
	- 7 : AREA_NAME
	- 8 : VEHICLE_CLASS
	- 9 : STREET_NAME
	- 10 : HELP_TEXT
	- 11 : FLOATING_HELP_TEXT_1
	- 12 : FLOATING_HELP_TEXT_2
	- 13 : CASH_CHANGE
	- 14 : RETICLE
	- 15 : SUBTITLE_TEXT
	- 16 : RADIO_STATIONS
	- 17 : SAVING_GAME
	- 18 : GAME_STREAM
	- 19 : WEAPON_WHEEL
	- 20 : WEAPON_WHEEL_STATS
	- 21 : HUD_COMPONENTS
	- 22 : HUD_WEAPONS
	
	These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component. **/
	function HIDE_HUD_COMPONENT_THIS_FRAME(id: int): void
	/** This function hides various HUD (Heads-up Display) components.
	Listed below are the integers and the corresponding HUD component.
	- 1 : WANTED_STARS
	- 2 : WEAPON_ICON
	- 3 : CASH
	- 4 : MP_CASH
	- 5 : MP_MESSAGE
	- 6 : VEHICLE_NAME
	- 7 : AREA_NAME
	- 8 : VEHICLE_CLASS
	- 9 : STREET_NAME
	- 10 : HELP_TEXT
	- 11 : FLOATING_HELP_TEXT_1
	- 12 : FLOATING_HELP_TEXT_2
	- 13 : CASH_CHANGE
	- 14 : RETICLE
	- 15 : SUBTITLE_TEXT
	- 16 : RADIO_STATIONS
	- 17 : SAVING_GAME
	- 18 : GAME_STREAM
	- 19 : WEAPON_WHEEL
	- 20 : WEAPON_WHEEL_STATS
	- 21 : HUD_COMPONENTS
	- 22 : HUD_WEAPONS
	
	These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component. **/
	function SHOW_HUD_COMPONENT_THIS_FRAME(id: int): void
	/** Hides area and vehicle name HUD components for one frame. **/
	function HIDE_STREET_AND_CAR_NAMES_THIS_FRAME(): void
	/**  **/
	function RESET_RETICULE_VALUES(): void
	/**  **/
	function RESET_HUD_COMPONENT_VALUES(id: int): void
	/**  **/
	function SET_HUD_COMPONENT_POSITION(id: int, x: float, y: float): void
	/**  **/
	function GET_HUD_COMPONENT_POSITION(id: int): Vector3
	/** This native does absolutely nothing, just a nullsub **/
	function CLEAR_REMINDER_MESSAGE(): void
	/** World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD **/
	function GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(worldX: float, worldY: float, worldZ: float, screenX: FloatPointer, screenY: FloatPointer): int
	/** Shows a menu for reporting UGC content. **/
	function OPEN_REPORTUGC_MENU(): void
	/**  **/
	function FORCE_CLOSE_REPORTUGC_MENU(): void
	/**  **/
	function IS_REPORTUGC_MENU_OPEN(): boolean
	/**  **/
	function IS_FLOATING_HELP_TEXT_ON_SCREEN(hudIndex: int): boolean
	/**  **/
	function SET_FLOATING_HELP_TEXT_SCREEN_POSITION(hudIndex: int, x: float, y: float): void
	/**  **/
	function SET_FLOATING_HELP_TEXT_WORLD_POSITION(hudIndex: int, x: float, y: float, z: float): void
	/**  **/
	function SET_FLOATING_HELP_TEXT_TO_ENTITY(hudIndex: int, entity: EntityHandle, offsetX: float, offsetY: float): void
	/**  **/
	function SET_FLOATING_HELP_TEXT_STYLE(hudIndex: int, p1: int, p2: int, p3: int, p4: int, p5: int): void
	/**  **/
	function CLEAR_FLOATING_HELP(hudIndex: int, p1: boolean): void
	/** clanFlag: takes a number 0-5 **/
	function CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(player: Player, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, clanFlag: int, r: int, g: int, b: int): void
	/**  **/
	function IS_MP_GAMER_TAG_MOVIE_ACTIVE(): boolean
	/** clanFlag: takes a number 0-5 **/
	function CREATE_FAKE_MP_GAMER_TAG(ped: EntityHandle, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, clanFlag: int): int
	/**  **/
	function REMOVE_MP_GAMER_TAG(gamerTagId: int): void
	/**  **/
	function IS_MP_GAMER_TAG_ACTIVE(gamerTagId: int): boolean
	/**  **/
	function IS_MP_GAMER_TAG_FREE(gamerTagId: int): boolean
	/** enum eMpGamerTagComponent
	{
		MP_TAG_GAMER_NAME,
		MP_TAG_CREW_TAG,
		MP_TAG_HEALTH_ARMOUR,
		MP_TAG_BIG_TEXT,
		MP_TAG_AUDIO_ICON,
		MP_TAG_USING_MENU,
		MP_TAG_PASSIVE_MODE,
		MP_TAG_WANTED_STARS,
		MP_TAG_DRIVER,
		MP_TAG_CO_DRIVER,
		MP_TAG_TAGGED,
		MP_TAG_GAMER_NAME_NEARBY,
		MP_TAG_ARROW,
		MP_TAG_PACKAGES,
		MP_TAG_INV_IF_PED_FOLLOWING,
		MP_TAG_RANK_TEXT,
		MP_TAG_TYPING,
		MP_TAG_BAG_LARGE,
		MP_TAG_ARROW,
		MP_TAG_GANG_CEO,
		MP_TAG_GANG_BIKER,
		MP_TAG_BIKER_ARROW,
		MP_TAG_MC_ROLE_PRESIDENT,
		MP_TAG_MC_ROLE_VICE_PRESIDENT,
		MP_TAG_MC_ROLE_ROAD_CAPTAIN,
		MP_TAG_MC_ROLE_SARGEANT,
		MP_TAG_MC_ROLE_ENFORCER,
		MP_TAG_MC_ROLE_PROSPECT,
		MP_TAG_TRANSMITTER,
		MP_TAG_BOMB
	}; **/
	function SET_MP_GAMER_TAG_VISIBILITY(gamerTagId: int, component: int, toggle: boolean, p3: any): void
	/**  **/
	function SET_ALL_MP_GAMER_TAGS_VISIBILITY(gamerTagId: int, toggle: boolean): void
	/** Displays a bunch of icons above the players name, and level, and their name twice **/
	function SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(gamerTagId: int, toggle: boolean): void
	/**  **/
	function SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(gamerTagId: int, toggle: boolean): void
	/**  **/
	function SET_MP_GAMER_TAGS_POINT_HEALTH(gamerTagId: int, value: int, maximumValue: int): void
	/** Sets a gamer tag's component colour
	
	gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG
	Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple. **/
	function SET_MP_GAMER_TAG_COLOUR(gamerTagId: int, component: int, hudColorIndex: int): void
	/** Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
	Should be enabled as flag (2). Has 0 opacity by default.
	
	- This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
	-> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above. **/
	function SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(gamerTagId: int, hudColorIndex: int): void
	/** Sets flag's sprite transparency. 0-255. **/
	function SET_MP_GAMER_TAG_ALPHA(gamerTagId: int, component: int, alpha: int): void
	/** displays wanted star above head **/
	function SET_MP_GAMER_TAG_WANTED_LEVEL(gamerTagId: int, wantedlvl: int): void
	/**  **/
	function SET_MP_GAMER_TAG_NUM_PACKAGES(gamerTagId: int, p1: int): void
	/**  **/
	function SET_MP_GAMER_TAG_NAME(gamerTagId: int, string: string): void
	/**  **/
	function IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(gamerTagId: int): boolean
	/**  **/
	function SET_MP_GAMER_TAG_BIG_TEXT(gamerTagId: int, string: string): void
	/**  **/
	function GET_CURRENT_WEBPAGE_ID(): int
	/**  **/
	function GET_CURRENT_WEBSITE_ID(): int
	/** Returns the ActionScript flagValue.
	ActionScript flags are global flags that scaleforms use
	Flags found during testing
	0: Returns 1 if the web_browser keyboard is open, otherwise 0
	1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
	2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
	9: Returns the current selection on the mobile phone scaleform
	
	There are 20 flags in total. **/
	function GET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex: int): int
	/**  **/
	function RESET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex: int): void
	/**  **/
	function IS_WARNING_MESSAGE_READY_FOR_CONTROL(): boolean
	/** You can only use text entries. No custom text.
	
	Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
	errorCode: shows an error code at the bottom left if nonzero **/
	function SET_WARNING_MESSAGE(titleMsg: string, flags: int, promptMsg: string, p3: boolean, p4: int, p5: string, p6: string, showBackground: boolean, errorCode: int): void
	/** Shows a warning message on screen with a header.
	Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.
	Example: https://i.imgur.com/ITJt8bJ.png **/
	function SET_WARNING_MESSAGE_WITH_HEADER(entryHeader: string, entryLine1: string, instructionalKey: int, entryLine2: string, p4: boolean, p5: any, showBackground: Address, p7: Address, p8: boolean, p9: any): void
	/** You can use this native for custom input, without having to use any scaleform-related natives.
	The native must be called on tick.
	The entryHeader must be a valid label.
	For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.
	Notes:
	- additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer
	- additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text
	- additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text
	- showBackground: shows black background of the warning screen
	- errorCode: shows an error code at the bottom left if nonzero
	Example of usage:
	SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS("ALERT", "JL_INVITE_ND", 66, "", true, -1, -1, "Testing line 1", "Testing line 2", true, 0);
	Screenshot:
	https://imgur.com/a/IYA7vJ8 **/
	function SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(entryHeader: string, entryLine1: string, instructionalKey: int, entryLine2: string, p4: boolean, p5: any, additionalIntInfo: any, additionalTextInfoLine1: string, additionalTextInfoLine2: string, showBackground: boolean, errorCode: int): void
	/**  **/
	function SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(entryHeader: string, entryLine1: string, flags: int, entryLine2: string, p4: boolean, p5: any, p6: Address, p7: Address, showBg: boolean, p9: any, p10: any): void
	/** labelTitle: Label of the alert's title.
	labelMsg: Label of the alert's message.
	p2: This is an enum, check the description for a list.
	p3: This is an enum, check the description for a list.
	labelMsg2: Label of another message line
	p5: usually 0
	p6: usually -1
	p7: usually 0
	p8: unknown label
	p9: unknown label
	background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.
	errorCode: Error code, shown at the bottom left if set to value other than 0.
	
	instructionalKey enum list:
	Buttons = {
	      Empty = 0,
	      Select = 1, -- (RETURN)
	      Ok = 2, -- (RETURN)
	      Yes = 4, -- (RETURN)
	      Back = 8, -- (ESC)
	      Cancel = 16, -- (ESC)
	      No = 32, -- (ESC)
	      RetrySpace = 64, -- (SPACE)
	      Restart = 128, -- (SPACE)
	      Skip = 256, -- (SPACE)
	      Quit = 512, -- (ESC)
	      Adjust = 1024, -- (ARROWS)
	      SpaceKey = 2048, -- (SPACE)
	      Share = 4096, -- (SPACE)
	      SignIn = 8192, -- (SPACE)
	      Continue = 16384, -- (RETURN)
	      AdjustLeftRight = 32768, -- (SCROLL L/R)
	      AdjustUpDown = 65536, -- (SCROLL U/D)
	      Overwrite = 131072, -- (SPACE)
	      SocialClubSignup = 262144, -- (RETURN)
	      Confirm = 524288, -- (RETURN)
	      Queue = 1048576, -- (RETURN)
	      RetryReturn = 2097152, -- (RETURN)
	      BackEsc = 4194304, -- (ESC)
	      SocialClub = 8388608, -- (RETURN)
	      Spectate = 16777216, -- (SPACE)
	      OkEsc = 33554432, -- (ESC)
	      CancelTransfer = 67108864, -- (ESC)
	      LoadingSpinner = 134217728,
	      NoReturnToGTA = 268435456, -- (ESC)
	      CancelEsc = 536870912, -- (ESC)
	}
	
	Alt = {
	      Empty = 0,
	      No = 1, -- (SPACE)
	      Host = 2, -- (ESC)
	      SearchForJob = 4, -- (RETURN)
	      ReturnKey = 8, -- (TURN)
	      Freemode = 16, -- (ESC)
	}
	
	Example: https://i.imgur.com/TvmNF4k.png **/
	function SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(labelTitle: string, labelMessage: string, p2: int, p3: int, labelMessage2: string, p5: boolean, p6: int, p7: int, p8: string, p9: string, background: boolean, errorCode: int): void
	/** Has to do with the confirmation overlay (E.g. confirm exit) **/
	function GET_WARNING_SCREEN_MESSAGE_HASH(): Hash
	/** Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.
	Param names copied from the corresponding scaleform function "SET_LIST_ROW".
	Example: https://i.imgur.com/arKvOYx.png **/
	function SET_WARNING_MESSAGE_OPTION_ITEMS(index: int, name: string, cash: int, rp: int, lvl: int, colour: int): boolean
	/**  **/
	function SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(p0: any): boolean
	/**  **/
	function REMOVE_WARNING_MESSAGE_OPTION_ITEMS(): void
	/**  **/
	function IS_WARNING_MESSAGE_ACTIVE(): boolean
	/**  **/
	function CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE(): void
	/** If toggle is true, the map is shown in full screen
	If toggle is false, the map is shown in normal mode **/
	function CUSTOM_MINIMAP_SET_ACTIVE(toggle: boolean): void
	/** Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow). **/
	function CUSTOM_MINIMAP_SET_BLIP_OBJECT(spriteId: int): void
	/** Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points. **/
	function CUSTOM_MINIMAP_CREATE_BLIP(x: float, y: float, z: float): int
	/**  **/
	function CUSTOM_MINIMAP_CLEAR_BLIPS(): void
	/** Doesn't actually return anything. **/
	function FORCE_SONAR_BLIPS_THIS_FRAME(): boolean
	/**  **/
	function GET_NORTH_BLID_INDEX(): Blip
	/** Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
	Doesn't need to be called every frame.
	Preview: https://i.imgur.com/DfqKWfJ.png
	
	Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip. **/
	function DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(toggle: boolean): void
	/** This native does absolutely nothing, just a nullsub **/
	function DRAW_FRONTEND_BACKGROUND_THIS_FRAME(): void
	/**  **/
	function DRAW_HUD_OVER_FADE_THIS_FRAME(): void
	/** Does stuff like this:
	gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617
	
	Example:
	int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
	ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);
	
	BOOL p1 is a toggle to define the game in pause.
	int p2 is unknown but -1 always works, not sure why though.
	
	[30/03/2017] ins1de :
	
	the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.
	
	Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
	Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.
	- FE_MENU_VERSION_SP_PAUSE
	- FE_MENU_VERSION_MP_PAUSE
	- FE_MENU_VERSION_CREATOR_PAUSE
	- FE_MENU_VERSION_CUTSCENE_PAUSE
	- FE_MENU_VERSION_SAVEGAME
	- FE_MENU_VERSION_PRE_LOBBY
	- FE_MENU_VERSION_LOBBY
	- FE_MENU_VERSION_MP_CHARACTER_SELECT
	- FE_MENU_VERSION_MP_CHARACTER_CREATION
	- FE_MENU_VERSION_EMPTY
	- FE_MENU_VERSION_EMPTY_NO_BACKGROUND
	- FE_MENU_VERSION_TEXT_SELECTION
	- FE_MENU_VERSION_CORONA
	- FE_MENU_VERSION_CORONA_LOBBY
	- FE_MENU_VERSION_CORONA_JOINED_PLAYERS
	- FE_MENU_VERSION_CORONA_INVITE_PLAYERS
	- FE_MENU_VERSION_CORONA_INVITE_FRIENDS
	- FE_MENU_VERSION_CORONA_INVITE_CREWS
	- FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
	- FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
	- FE_MENU_VERSION_CORONA_RACE
	- FE_MENU_VERSION_CORONA_BETTING
	- FE_MENU_VERSION_JOINING_SCREEN
	- FE_MENU_VERSION_LANDING_MENU
	- FE_MENU_VERSION_LANDING_KEYMAPPING_MENU **/
	function ACTIVATE_FRONTEND_MENU(menuhash: Hash, togglePause: boolean, component: int): void
	/** Before using this native click the native above and look at the decription.
	
	Example:
	int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
	Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
	Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
	
	This native refreshes the frontend menu.
	
	p1 = Hash of Menu
	p2 = Unknown but always works with -1. **/
	function RESTART_FRONTEND_MENU(menuHash: Hash, p1: int): void
	/** if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background")) **/
	function GET_CURRENT_FRONTEND_MENU_VERSION(): Hash
	/**  **/
	function SET_PAUSE_MENU_ACTIVE(toggle: boolean): void
	/**  **/
	function DISABLE_FRONTEND_THIS_FRAME(): void
	/**  **/
	function SUPPRESS_FRONTEND_RENDERING_THIS_FRAME(): void
	/** Allows opening the pause menu this frame, when the player is dead. **/
	function ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME(): void
	/**  **/
	function SET_FRONTEND_ACTIVE(active: boolean): void
	/**  **/
	function IS_PAUSE_MENU_ACTIVE(): boolean
	/**  **/
	function IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN(): boolean
	/** Returns:
	
	0
	5
	10
	15
	20
	25
	30
	35
	 **/
	function GET_PAUSE_MENU_STATE(): int
	/**  **/
	function GET_PAUSE_MENU_POSITION(): Vector3
	/**  **/
	function IS_PAUSE_MENU_RESTARTING(): boolean
	/** Not present in retail version of the game, actual definiton seems to be
	_LOG_DEBUG_INFO(const char* category, const char* debugText); **/
	function FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(p0: string): void
	/**  **/
	function PAUSE_MENUCEPTION_GO_DEEPER(page: int): void
	/**  **/
	function PAUSE_MENUCEPTION_THE_KICK(): void
	/**  **/
	function PAUSE_TOGGLE_FULLSCREEN_MAP(p0: any): void
	/** Activates the specified frontend menu context.
	pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'. 
	The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
	The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
	This basically allows you to hide certain menu sections, or things like instructional buttons. **/
	function PAUSE_MENU_ACTIVATE_CONTEXT(contextHash: Hash): void
	/**  **/
	function PAUSE_MENU_DEACTIVATE_CONTEXT(contextHash: Hash): void
	/**  **/
	function PAUSE_MENU_IS_CONTEXT_ACTIVE(contextHash: Hash): boolean
	/**  **/
	function PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE(): boolean
	/**  **/
	function PAUSE_MENU_GET_HAIR_COLOUR_INDEX(): int
	/**  **/
	function PAUSE_MENU_GET_MOUSE_HOVER_INDEX(): int
	/**  **/
	function PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID(): int
	/**  **/
	function PAUSE_MENU_GET_MOUSE_CLICK_EVENT(p0: Address, p1: Address, p2: Address): boolean
	/**  **/
	function PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(p0: int): void
	/**  **/
	function PAUSE_MENU_SET_BUSY_SPINNER(p0: boolean, position: int, spinnerIndex: int): void
	/**  **/
	function PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(p0: boolean): void
	/**  **/
	function IS_FRONTEND_READY_FOR_CONTROL(): boolean
	/** Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.
	
	To enable the keys again, use `0x14621BB1DF14E2B2`. **/
	function TAKE_CONTROL_OF_FRONTEND(): void
	/** Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
	To disable the keys, use `0xEC9264727EEC0F28` **/
	function RELEASE_CONTROL_OF_FRONTEND(): void
	/**  **/
	function CODE_WANTS_SCRIPT_TO_TAKE_CONTROL(): boolean
	/**  **/
	function GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL(): int
	/**  **/
	function IS_NAVIGATING_MENU_CONTENT(): boolean
	/**  **/
	function HAS_MENU_TRIGGER_EVENT_OCCURRED(): boolean
	/**  **/
	function HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED(): boolean
	/**  **/
	function SET_SAVEGAME_LIST_UNIQUE_ID(p0: any): void
	/**  **/
	function GET_MENU_TRIGGER_EVENT_DETAILS(lastItemMenuId: IntPointer, selectedItemUniqueId: IntPointer): void
	/** lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
	selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
	selectedItemUniqueId: this is uniqueID of the currently selected menu item
	
	when the pausemenu is closed:
	lastItemMenuId = -1
	selectedItemMenuId = -1
	selectedItemUniqueId = 0
	
	when the header gains focus:
	lastItemMenuId updates as normal or 0 if the pausemenu was just opened
	selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
	selectedItemUniqueId = -1
	
	when focus is moved from the header to a pausemenu page:
	lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
	selectedItemMenuId = -1
	selectedItemUniqueId updates as normal **/
	function GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(lastItemMenuId: IntPointer, selectedItemMenuId: IntPointer, selectedItemUniqueId: IntPointer): void
	/**  **/
	function GET_PM_PLAYER_CREW_COLOR(r: IntPointer, g: IntPointer, b: IntPointer): boolean
	/**  **/
	function GET_MENU_PED_INT_STAT(p0: any, p1: Address): boolean
	/**  **/
	function GET_CHARACTER_MENU_PED_INT_STAT(p0: any, p1: Address, p2: any): boolean
	/**  **/
	function GET_MENU_PED_MASKED_INT_STAT(p0: Hash, p1: Address, p2: any, p3: int): boolean
	/**  **/
	function GET_CHARACTER_MENU_PED_MASKED_INT_STAT(p0: any, p1: Address, p2: any, p3: any, p4: any): boolean
	/**  **/
	function GET_MENU_PED_FLOAT_STAT(p0: any, p1: FloatPointer): boolean
	/**  **/
	function GET_CHARACTER_MENU_PED_FLOAT_STAT(p0: any, p1: Address, p2: any): boolean
	/** p0 was always 0xAE2602A3. **/
	function GET_MENU_PED_BOOL_STAT(p0: Hash, p1: Address): boolean
	/**  **/
	function CLEAR_PED_IN_PAUSE_MENU(): void
	/** p1 is either 1 or 2 in the PC scripts. **/
	function GIVE_PED_TO_PAUSE_MENU(ped: EntityHandle, p1: int): void
	/** Toggles the light state for the pause menu ped in frontend menus.
	
	This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.
	
	
	Example:
	Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png
	Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png **/
	function SET_PAUSE_MENU_PED_LIGHTING(state: boolean): void
	/** Toggles the pause menu ped sleep state for frontend menus.
	
	Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif
	
	`state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up. **/
	function SET_PAUSE_MENU_PED_SLEEP_STATE(state: boolean): void
	/**  **/
	function OPEN_ONLINE_POLICIES_MENU(): void
	/**  **/
	function ARE_ONLINE_POLICIES_UP_TO_DATE(): boolean
	/** Returns the same as IS_SOCIAL_CLUB_ACTIVE **/
	function IS_ONLINE_POLICIES_MENU_ACTIVE(): boolean
	/** Uses the `SOCIAL_CLUB2` scaleform. **/
	function OPEN_SOCIAL_CLUB_MENU(): void
	/**  **/
	function CLOSE_SOCIAL_CLUB_MENU(): void
	/** HUD::SET_SOCIAL_CLUB_TOUR("Gallery");
	HUD::SET_SOCIAL_CLUB_TOUR("Missions");
	HUD::SET_SOCIAL_CLUB_TOUR("General");
	HUD::SET_SOCIAL_CLUB_TOUR("Playlists"); **/
	function SET_SOCIAL_CLUB_TOUR(name: string): void
	/**  **/
	function IS_SOCIAL_CLUB_ACTIVE(): boolean
	/**  **/
	function SET_TEXT_INPUT_BOX_ENABLED(p0: boolean): void
	/**  **/
	function FORCE_CLOSE_TEXT_INPUT_BOX(): void
	/**  **/
	function SET_ALLOW_COMMA_ON_TEXT_INPUT(p0: any): void
	/**  **/
	function OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(gxtEntryHash: Hash): void
	/** Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active. **/
	function IS_MP_TEXT_CHAT_TYPING(): boolean
	/**  **/
	function CLOSE_MP_TEXT_CHAT(): void
	/**  **/
	function MP_TEXT_CHAT_IS_TEAM_JOB(p0: any): void
	/**  **/
	function OVERRIDE_MP_TEXT_CHAT_COLOR(p0: int, hudColor: int): void
	/** Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE. **/
	function MP_TEXT_CHAT_DISABLE(toggle: boolean): void
	/**  **/
	function FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(toggle: boolean): void
	/** This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
	
	See gtaforums.com/topic/884370-native-research-ai-blips for further information. **/
	function SET_PED_HAS_AI_BLIP(ped: EntityHandle, hasCone: boolean): void
	/** color: see SET_BLIP_COLOUR **/
	function SET_PED_HAS_AI_BLIP_WITH_COLOUR(ped: EntityHandle, hasCone: boolean, color: int): void
	/**  **/
	function DOES_PED_HAVE_AI_BLIP(ped: EntityHandle): boolean
	/**  **/
	function SET_PED_AI_BLIP_GANG_ID(ped: EntityHandle, gangId: int): void
	/**  **/
	function SET_PED_AI_BLIP_HAS_CONE(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_AI_BLIP_FORCED_ON(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_AI_BLIP_NOTICE_RANGE(ped: EntityHandle, range: float): void
	/**  **/
	function SET_PED_AI_BLIP_SPRITE(ped: EntityHandle, spriteId: int): void
	/**  **/
	function GET_AI_PED_PED_BLIP_INDEX(ped: EntityHandle): Blip
	/** Returns the current AI BLIP for the specified ped **/
	function GET_AI_PED_VEHICLE_BLIP_INDEX(ped: EntityHandle): Blip
	/**  **/
	function HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE(): boolean
	/**  **/
	function SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT(): void
	/** If toggle is true, hides special ability bar / character name in the pause menu
	If toggle is false, shows special ability bar / character name in the pause menu **/
	function SET_PLAYER_IS_IN_DIRECTOR_MODE(toggle: boolean): void
	/**  **/
	function SET_DIRECTOR_MODE_AVAILABLE(toggle: boolean): void
	/**  **/
	function HIDE_HUDMARKERS_THIS_FRAME(): void
}

/** @noSelf **/
declare namespace INTERIOR {
	/**  **/
	function GET_INTERIOR_HEADING(interior: Interior): float
	/**  **/
	function GET_INTERIOR_LOCATION_AND_NAMEHASH(interior: Interior, position: Vector3Pointer, nameHash: Address): void
	/** Returns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too. **/
	function GET_INTERIOR_GROUP_ID(interior: Interior): int
	/**  **/
	function GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(interior: Interior, x: float, y: float, z: float): Vector3
	/**  **/
	function IS_INTERIOR_SCENE(): boolean
	/**  **/
	function IS_VALID_INTERIOR(interior: Interior): boolean
	/**  **/
	function CLEAR_ROOM_FOR_ENTITY(entity: EntityHandle): void
	/**  **/
	function FORCE_ROOM_FOR_ENTITY(entity: EntityHandle, interior: Interior, roomHashKey: Hash): void
	/** Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside. **/
	function GET_ROOM_KEY_FROM_ENTITY(entity: EntityHandle): Hash
	/** Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY **/
	function GET_KEY_FOR_ENTITY_IN_ROOM(entity: EntityHandle): Hash
	/** Returns the handle of the interior that the entity is in. Returns 0 if outside. **/
	function GET_INTERIOR_FROM_ENTITY(entity: EntityHandle): Interior
	/**  **/
	function RETAIN_ENTITY_IN_INTERIOR(entity: EntityHandle, interior: Interior): void
	/** Immediately removes entity from an interior. Like sets entity to `limbo` room. **/
	function CLEAR_INTERIOR_STATE_OF_ENTITY(entity: EntityHandle): void
	/**  **/
	function FORCE_ACTIVATING_TRACKING_ON_ENTITY(p0: any, p1: any): void
	/**  **/
	function FORCE_ROOM_FOR_GAME_VIEWPORT(interiorID: int, roomHashKey: Hash): void
	/** Example of use (carmod_shop)
	INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME("V_CarModRoom"); **/
	function SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(roomName: string): void
	/** Usage: INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID())); **/
	function SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(roomHashKey: Hash): void
	/**  **/
	function GET_ROOM_KEY_FOR_GAME_VIEWPORT(): Hash
	/**  **/
	function CLEAR_ROOM_FOR_GAME_VIEWPORT(): void
	/** Returns the current interior id from gameplay camera **/
	function GET_INTERIOR_FROM_PRIMARY_VIEW(): Interior
	/** Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
	
	Example for VB.NET
	Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z) **/
	function GET_INTERIOR_AT_COORDS(x: float, y: float, z: float): Interior
	/**  **/
	function ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(pickup: Pickup, roomName: string): void
	/**  **/
	function PIN_INTERIOR_IN_MEMORY(interior: Interior): void
	/** Does something similar to INTERIOR::DISABLE_INTERIOR.
	
	You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.  **/
	function UNPIN_INTERIOR(interior: Interior): void
	/**  **/
	function IS_INTERIOR_READY(interior: Interior): boolean
	/** Only used once in the entire game scripts.
	Does not actually return anything. **/
	function SET_INTERIOR_IN_USE(interior: Interior): boolean
	/** Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
	
	Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))
	
	Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
	
	Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type. **/
	function GET_INTERIOR_AT_COORDS_WITH_TYPE(x: float, y: float, z: float, interiorType: string): Interior
	/** Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE **/
	function GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(x: float, y: float, z: float, typeHash: Hash): Interior
	/**  **/
	function ACTIVATE_INTERIOR_GROUPS_USING_CAMERA(): void
	/** Returns true if the collision at the specified coords is marked as being outside (false if there's an interior) **/
	function IS_COLLISION_MARKED_OUTSIDE(x: float, y: float, z: float): boolean
	/**  **/
	function GET_INTERIOR_FROM_COLLISION(x: float, y: float, z: float): Interior
	/**  **/
	function ENABLE_STADIUM_PROBES_THIS_FRAME(p0: any): void
	/** More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
	
	Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json **/
	function ACTIVATE_INTERIOR_ENTITY_SET(interior: Interior, entitySetName: string): void
	/** Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json **/
	function DEACTIVATE_INTERIOR_ENTITY_SET(interior: Interior, entitySetName: string): void
	/** Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json **/
	function IS_INTERIOR_ENTITY_SET_ACTIVE(interior: Interior, entitySetName: string): boolean
	/** Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json **/
	function SET_INTERIOR_ENTITY_SET_TINT_INDEX(interior: Interior, entitySetName: string, color: int): void
	/**  **/
	function REFRESH_INTERIOR(interior: Interior): void
	/** This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
	
	More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/ **/
	function ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(mapObjectHash: Hash): void
	/**  **/
	function ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(mapObjectHash: Hash): void
	/** Example: 
	This removes the interior from the strip club and when trying to walk inside the player just falls:
	
	INTERIOR::DISABLE_INTERIOR(118018, true); **/
	function DISABLE_INTERIOR(interior: Interior, toggle: boolean): void
	/**  **/
	function IS_INTERIOR_DISABLED(interior: Interior): boolean
	/** Does something similar to INTERIOR::DISABLE_INTERIOR **/
	function CAP_INTERIOR(interior: Interior, toggle: boolean): void
	/**  **/
	function IS_INTERIOR_CAPPED(interior: Interior): boolean
	/**  **/
	function DISABLE_METRO_SYSTEM(toggle: boolean): void
	/** Jenkins hash _might_ be 0xFC227584. **/
	function SET_IS_EXTERIOR_ONLY(entity: EntityHandle, toggle: boolean): void
}

/** @noSelf **/
declare namespace ITEMSET {
	/**  **/
	function CREATE_ITEMSET(p0: boolean): ScriptHandle
	/**  **/
	function DESTROY_ITEMSET(itemset: ScriptHandle): void
	/**  **/
	function IS_ITEMSET_VALID(itemset: ScriptHandle): boolean
	/**  **/
	function ADD_TO_ITEMSET(item: ScriptHandle, itemset: ScriptHandle): boolean
	/**  **/
	function REMOVE_FROM_ITEMSET(item: ScriptHandle, itemset: ScriptHandle): void
	/**  **/
	function GET_ITEMSET_SIZE(itemset: ScriptHandle): int
	/**  **/
	function GET_INDEXED_ITEM_IN_ITEMSET(index: int, itemset: ScriptHandle): ScriptHandle
	/**  **/
	function IS_IN_ITEMSET(item: ScriptHandle, itemset: ScriptHandle): boolean
	/**  **/
	function CLEAN_ITEMSET(itemset: ScriptHandle): void
}

/** @noSelf **/
declare namespace LOADINGSCREEN {
	/** This function is hard-coded to always return 0. **/
	function LOBBY_AUTO_MULTIPLAYER_MENU(): boolean
	/**  **/
	function LOBBY_AUTO_MULTIPLAYER_FREEMODE(): boolean
	/**  **/
	function LOBBY_SET_AUTO_MULTIPLAYER(toggle: boolean): void
	/**  **/
	function LOBBY_AUTO_MULTIPLAYER_EVENT(): boolean
	/**  **/
	function LOBBY_SET_AUTO_MULTIPLAYER_EVENT(toggle: boolean): void
	/**  **/
	function LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB(): boolean
	/**  **/
	function LOBBY_SET_AUTO_MP_RANDOM_JOB(toggle: boolean): void
	/**  **/
	function SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(toggle: boolean): void
}

/** @noSelf **/
declare namespace LOCALIZATION {
	/** Same return values as GET_CURRENT_LANGUAGE **/
	function LOCALIZATION_GET_SYSTEM_LANGUAGE(): int
	/** 0 = american (en-US)
	1 = french (fr-FR)
	2 = german (de-DE)
	3 = italian (it-IT)
	4 = spanish (es-ES)
	5 = brazilian (pt-BR)
	6 = polish (pl-PL)
	7 = russian (ru-RU)
	8 = korean (ko-KR)
	9 = chinesetrad (zh-TW)
	10 = japanese (ja-JP)
	11 = mexican (es-MX)
	12 = chinesesimp (zh-CN) **/
	function GET_CURRENT_LANGUAGE(): int
	/** Possible return values: 0, 1, 2 **/
	function LOCALIZATION_GET_SYSTEM_DATE_TYPE(): int
}

/** @noSelf **/
declare namespace MISC {
	/**  **/
	function GET_ALLOCATED_STACK_SIZE(): int
	/**  **/
	function GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(stackSize: int): int
	/**  **/
	function SET_RANDOM_SEED(seed: int): void
	/** Maximum value is 1.
	At a value of 0 the game will still run at a minimum time scale.
	
	Slow Motion 1: 0.6
	Slow Motion 2: 0.4
	Slow Motion 3: 0.2 **/
	function SET_TIME_SCALE(timeScale: float): void
	/** If true, the player can't save the game. 
	
	
	If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
	
	^ also, if the mission flag is already set, the function does nothing at all **/
	function SET_MISSION_FLAG(toggle: boolean): void
	/**  **/
	function GET_MISSION_FLAG(): boolean
	/** If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
	Does nothing if the mission flag is set. **/
	function SET_RANDOM_EVENT_FLAG(toggle: boolean): void
	/**  **/
	function GET_RANDOM_EVENT_FLAG(): boolean
	/** Returns pointer to an empty string. **/
	function GET_CONTENT_TO_LOAD(): string
	/** Does nothing (it's a nullsub). Seems to be PS4 specific. **/
	function ACTIVITY_FEED_CREATE(p0: string, p1: string): void
	/** Does nothing (it's a nullsub). Seems to be PS4 specific. **/
	function ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(p0: string): void
	/** Does nothing (it's a nullsub). Seems to be PS4 specific. **/
	function ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(p0: string): void
	/** Does nothing (it's a nullsub). Seems to be PS4 specific. **/
	function ACTIVITY_FEED_ADD_INT_TO_CAPTION(p0: any): void
	/** Does nothing (it's a nullsub). Seems to be PS4 specific. **/
	function ACTIVITY_FEED_LARGE_IMAGE_URL(p0: string): void
	/** Does nothing (it's a nullsub). Seems to be PS4 specific. **/
	function ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(p0: string, p1: string): void
	/** Does nothing (it's a nullsub). Seems to be PS4 specific. **/
	function ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(p0: string): void
	/** Does nothing (it's a nullsub). Seems to be PS4 specific. **/
	function ACTIVITY_FEED_POST(): void
	/** Does nothing (it's a nullsub). Seems to be PS4 specific.
	
	Used only once in the scripts (ingamehud) with p0 = "AF_GAMEMODE" **/
	function ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(p0: string): void
	/** Hardcoded to return false. **/
	function HAS_RESUMED_FROM_SUSPEND(): boolean
	/** Sets GtaThread+0x14A **/
	function SET_SCRIPT_HIGH_PRIO(toggle: boolean): void
	/** Sets bit 3 in GtaThread+0x150 **/
	function SET_THIS_IS_A_TRIGGER_SCRIPT(toggle: boolean): void
	/**  **/
	function INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(p0: string): void
	/**  **/
	function GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(p0: Address, p1: Address, p2: any, p3: boolean): boolean
	/** Returns current weather name hash **/
	function GET_PREV_WEATHER_TYPE_HASH_NAME(): Hash
	/** Returns weather name hash **/
	function GET_NEXT_WEATHER_TYPE_HASH_NAME(): Hash
	/**  **/
	function IS_PREV_WEATHER_TYPE(weatherType: string): boolean
	/**  **/
	function IS_NEXT_WEATHER_TYPE(weatherType: string): boolean
	/** The following weatherTypes are used in the scripts:
	"CLEAR"
	"EXTRASUNNY"
	"CLOUDS"
	"OVERCAST"
	"RAIN"
	"CLEARING"
	"THUNDER"
	"SMOG"
	"FOGGY"
	"XMAS"
	"SNOW"
	"SNOWLIGHT"
	"BLIZZARD"
	"HALLOWEEN"
	"NEUTRAL" **/
	function SET_WEATHER_TYPE_PERSIST(weatherType: string): void
	/** The following weatherTypes are used in the scripts:
	"CLEAR"
	"EXTRASUNNY"
	"CLOUDS"
	"OVERCAST"
	"RAIN"
	"CLEARING"
	"THUNDER"
	"SMOG"
	"FOGGY"
	"XMAS"
	"SNOW"
	"SNOWLIGHT"
	"BLIZZARD"
	"HALLOWEEN"
	"NEUTRAL" **/
	function SET_WEATHER_TYPE_NOW_PERSIST(weatherType: string): void
	/** The following weatherTypes are used in the scripts:
	"CLEAR"
	"EXTRASUNNY"
	"CLOUDS"
	"OVERCAST"
	"RAIN"
	"CLEARING"
	"THUNDER"
	"SMOG"
	"FOGGY"
	"XMAS"
	"SNOW"
	"SNOWLIGHT"
	"BLIZZARD"
	"HALLOWEEN"
	"NEUTRAL" **/
	function SET_WEATHER_TYPE_NOW(weatherType: string): void
	/**  **/
	function SET_WEATHER_TYPE_OVERTIME_PERSIST(weatherType: string, time: float): void
	/**  **/
	function SET_RANDOM_WEATHER_TYPE(): void
	/**  **/
	function CLEAR_WEATHER_TYPE_PERSIST(): void
	/**  **/
	function CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(milliseconds: int): void
	/**  **/
	function GET_CURR_WEATHER_STATE(weatherType1: Address, weatherType2: Address, percentWeather2: FloatPointer): void
	/** Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
	
	execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
	
	Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:
	
	CLEAR  0x36A83D84
	EXTRASUNNY  0x97AA0A79
	CLOUDS  0x30FDAF5C
	OVERCAST    0xBB898D2D
	RAIN    0x54A69840
	CLEARING    0x6DB1A50D
	THUNDER 0xB677829F
	SMOG    0x10DCF4B5
	FOGGY   0xAE737644
	XMAS    0xAAC9C895
	SNOWLIGHT   0x23FB812B
	BLIZZARD    0x27EA2814
	
	
	
	
	
	/ * OLD INVALID INFO BELOW * /
	Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.
	
	If an invalid hash is specified for sourceWeather, the current weather type will be used.
	If an invalid hash is specified for targetWeather, the next weather type will be used.
	If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition. **/
	function SET_CURR_WEATHER_STATE(weatherType1: Hash, weatherType2: Hash, percentWeather2: float): void
	/** Appears to have an optional bool parameter that is unused in the scripts.
	
	If you pass true, something will be set to zero. **/
	function SET_OVERRIDE_WEATHER(weatherType: string): void
	/** Identical to SET_OVERRIDE_WEATHER but has an additional BOOL param that sets some weather var to 0 if true **/
	function SET_OVERRIDE_WEATHEREX(weatherType: string, p1: boolean): void
	/**  **/
	function CLEAR_OVERRIDE_WEATHER(): void
	/**  **/
	function WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(amplitude: float): void
	/**  **/
	function WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(minAmplitude: float): void
	/**  **/
	function WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(maxAmplitude: float): void
	/**  **/
	function WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(minAmplitude: float): void
	/**  **/
	function WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(amplitude: float): void
	/**  **/
	function WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(minAmplitude: float): void
	/**  **/
	function WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(maxAmplitude: float): void
	/**  **/
	function WATER_OVERRIDE_SET_RIPPLEBUMPINESS(bumpiness: float): void
	/**  **/
	function WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(minBumpiness: float): void
	/**  **/
	function WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(maxBumpiness: float): void
	/**  **/
	function WATER_OVERRIDE_SET_RIPPLEDISTURB(disturb: float): void
	/** This seems to edit the water wave, intensity around your current location.
	
	0.0f = Normal
	1.0f = So Calm and Smooth, a boat will stay still.
	3.0f = Really Intense. **/
	function WATER_OVERRIDE_SET_STRENGTH(strength: float): void
	/**  **/
	function WATER_OVERRIDE_FADE_IN(p0: float): void
	/**  **/
	function WATER_OVERRIDE_FADE_OUT(p0: float): void
	/** Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game. **/
	function SET_WIND(speed: float): void
	/** Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game. **/
	function SET_WIND_SPEED(speed: float): void
	/**  **/
	function GET_WIND_SPEED(): float
	/** The wind direction in radians
	180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game. **/
	function SET_WIND_DIRECTION(direction: float): void
	/**  **/
	function GET_WIND_DIRECTION(): Vector3
	/** With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
	With an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
	To use the rain intensity of the current weather, call this native with `-1f` as `intensity`. **/
	function SET_RAIN(intensity: float): void
	/**  **/
	function GET_RAIN_LEVEL(): float
	/**  **/
	function SET_SNOW(level: float): void
	/**  **/
	function GET_SNOW_LEVEL(): float
	/** creates single lightning+thunder at random position **/
	function FORCE_LIGHTNING_FLASH(): void
	/**  **/
	function SET_CLOUD_SETTINGS_OVERRIDE(p0: string): void
	/**  **/
	function PRELOAD_CLOUD_HAT(name: string): void
	/** The following cloudhats are useable:
	altostratus
	Cirrus
	cirrocumulus
	Clear 01
	Cloudy 01
	Contrails
	Horizon
	horizonband1
	horizonband2
	horizonband3
	horsey
	Nimbus
	Puffs
	RAIN
	Snowy 01
	Stormy 01
	stratoscumulus
	Stripey
	shower
	Wispy
	 **/
	function LOAD_CLOUD_HAT(name: string, transitionTime: float): void
	/**  **/
	function UNLOAD_CLOUD_HAT(name: string, p1: float): void
	/**  **/
	function UNLOAD_ALL_CLOUD_HATS(): void
	/**  **/
	function SET_CLOUDS_ALPHA(opacity: float): void
	/**  **/
	function GET_CLOUDS_ALPHA(): float
	/**  **/
	function GET_GAME_TIMER(): int
	/**  **/
	function GET_FRAME_TIME(): float
	/**  **/
	function GET_SYSTEM_TIME_STEP(): float
	/**  **/
	function GET_FRAME_COUNT(): int
	/**  **/
	function GET_RANDOM_FLOAT_IN_RANGE(startRange: float, endRange: float): float
	/**  **/
	function GET_RANDOM_INT_IN_RANGE(startRange: int, endRange: int): int
	/**  **/
	function GET_RANDOM_MWC_INT_IN_RANGE(startRange: int, endRange: int): int
	/** Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!
	
	x: Position on the X-axis to get ground elevation at.
	y: Position on the Y-axis to get ground elevation at.
	z: Position on the Z-axis to get ground elevation at.
	groundZ: The ground elevation at the specified position.
	ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket
	
	Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance. **/
	function GET_GROUND_Z_FOR_3D_COORD(x: float, y: float, z: float, groundZ: FloatPointer, ignoreWater: boolean, p5: boolean): boolean
	/**  **/
	function GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(x: float, y: float, z: float, groundZ: FloatPointer, normal: Vector3Pointer): boolean
	/**  **/
	function GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(x: float, y: float, z: float, groundZ: FloatPointer, p4: boolean, p5: boolean): boolean
	/**  **/
	function ASIN(p0: float): float
	/**  **/
	function ACOS(p0: float): float
	/**  **/
	function TAN(p0: float): float
	/**  **/
	function ATAN(p0: float): float
	/**  **/
	function ATAN2(p0: float, p1: float): float
	/** Returns the distance between two three-dimensional points, optionally ignoring the Z values.
	If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
	
	Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates. **/
	function GET_DISTANCE_BETWEEN_COORDS(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, useZ: boolean): float
	/**  **/
	function GET_ANGLE_BETWEEN_2D_VECTORS(x1: float, y1: float, x2: float, y2: float): float
	/** dx = x1 - x2
	dy = y1 - y2 **/
	function GET_HEADING_FROM_VECTOR_2D(dx: float, dy: float): float
	/** returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates **/
	function GET_RATIO_OF_CLOSEST_POINT_ON_LINE(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, x3: float, y3: float, z3: float, clamp: boolean): float
	/** clamp: sets whether the product should be clamped between the given coordinates **/
	function GET_CLOSEST_POINT_ON_LINE(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, x3: float, y3: float, z3: float, clamp: boolean): Vector3
	/**  **/
	function GET_LINE_PLANE_INTERSECTION(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: FloatPointer): boolean
	/**  **/
	function GET_POINT_AREA_OVERLAP(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any, p10: any, p11: any, p12: any, p13: any): boolean
	/** This sets bit [offset] of [address] to on.
	
	The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
	
	Example:
	MISC::SET_BIT(&bitAddress, 1);
	
	To check if this bit has been enabled:
	MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards
	
	Please note, this method may assign a value to [address] when used. **/
	function SET_BIT(address: IntPointer, offset: int): void
	/** This sets bit [offset] of [address] to off.
	
	Example:
	MISC::CLEAR_BIT(&bitAddress, 1);
	
	To check if this bit has been enabled:
	MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards **/
	function CLEAR_BIT(address: IntPointer, offset: int): void
	/** This native converts its past string to hash. It is hashed using jenkins one at a time method. **/
	function GET_HASH_KEY(string: string): Hash
	/** This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12 **/
	function SLERP_NEAR_QUATERNION(t: float, x: float, y: float, z: float, w: float, x1: float, y1: float, z1: float, w1: float, outX: FloatPointer, outY: FloatPointer, outZ: FloatPointer, outW: FloatPointer): void
	/**  **/
	function IS_AREA_OCCUPIED(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: any, p12: boolean): boolean
	/**  **/
	function IS_AREA_OCCUPIED_SLOW(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any, p10: any, p11: any, p12: any): boolean
	/** `range`: The range, seems to not be very accurate during testing.
	`p4`: Unknown, when set to true it seems to always return true no matter what I try.
	`checkVehicle`: Check for any vehicles in that area.
	`checkPeds`: Check for any peds in that area.
	`ignoreEntity`: This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities.
	The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
	
	Returns true if there is anything in that location matching the provided parameters. **/
	function IS_POSITION_OCCUPIED(x: float, y: float, z: float, range: float, p4: boolean, checkVehicles: boolean, checkPeds: boolean, p7: boolean, p8: boolean, ignoreEntity: EntityHandle, p10: boolean): boolean
	/**  **/
	function IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: any): boolean
	/** Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false); **/
	function CLEAR_AREA(X: float, Y: float, Z: float, radius: float, p4: boolean, ignoreCopCars: boolean, ignoreObjects: boolean, p7: boolean): void
	/** MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.  **/
	function CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x: float, y: float, z: float, radius: float, p4: boolean, p5: boolean, p6: boolean, p7: boolean): void
	/** Example:
	CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false); **/
	function CLEAR_AREA_OF_VEHICLES(x: float, y: float, z: float, radius: float, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: any): void
	/**  **/
	function CLEAR_ANGLED_AREA_OF_VEHICLES(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: boolean, p12: any, p13: any): void
	/** I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.  **/
	function CLEAR_AREA_OF_OBJECTS(x: float, y: float, z: float, radius: float, flags: int): void
	/** Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1); **/
	function CLEAR_AREA_OF_PEDS(x: float, y: float, z: float, radius: float, flags: int): void
	/** flags appears to always be 0 **/
	function CLEAR_AREA_OF_COPS(x: float, y: float, z: float, radius: float, flags: int): void
	/** flags is usually 0 in the scripts. **/
	function CLEAR_AREA_OF_PROJECTILES(x: float, y: float, z: float, radius: float, flags: int): void
	/** Possibly used to clear scenario points. **/
	function CLEAR_SCENARIO_SPAWN_HISTORY(): void
	/** ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false) **/
	function SET_SAVE_MENU_ACTIVE(ignoreVehicle: boolean): void
	/**  **/
	function GET_STATUS_OF_MANUAL_SAVE(): int
	/**  **/
	function SET_CREDITS_ACTIVE(toggle: boolean): void
	/**  **/
	function SET_CREDITS_FADE_OUT_WITH_SCREEN(toggle: boolean): void
	/**  **/
	function HAVE_CREDITS_REACHED_END(): boolean
	/**  **/
	function TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(scriptName: string): void
	/**  **/
	function NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME(): void
	/** Returns the index of the newly created hospital spawn point.
	
	p3 might be radius? **/
	function ADD_HOSPITAL_RESTART(x: float, y: float, z: float, p3: float, p4: any): int
	/** The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were. **/
	function DISABLE_HOSPITAL_RESTART(hospitalIndex: int, toggle: boolean): void
	/**  **/
	function ADD_POLICE_RESTART(p0: float, p1: float, p2: float, p3: float, p4: any): int
	/** Disables the spawn point at the police house on the specified index.
	
	policeIndex: The police house index.
	toggle: true to enable the spawn point, false to disable.
	
	- Nacorpio **/
	function DISABLE_POLICE_RESTART(policeIndex: int, toggle: boolean): void
	/**  **/
	function SET_RESTART_COORD_OVERRIDE(x: float, y: float, z: float, heading: float): void
	/**  **/
	function CLEAR_RESTART_COORD_OVERRIDE(): void
	/**  **/
	function PAUSE_DEATH_ARREST_RESTART(toggle: boolean): void
	/**  **/
	function IGNORE_NEXT_RESTART(toggle: boolean): void
	/** Sets whether the game should fade out after the player dies. **/
	function SET_FADE_OUT_AFTER_DEATH(toggle: boolean): void
	/** Sets whether the game should fade out after the player is arrested. **/
	function SET_FADE_OUT_AFTER_ARREST(toggle: boolean): void
	/** Sets whether the game should fade in after the player dies or is arrested. **/
	function SET_FADE_IN_AFTER_DEATH_ARREST(toggle: boolean): void
	/**  **/
	function SET_FADE_IN_AFTER_LOAD(toggle: boolean): void
	/**  **/
	function REGISTER_SAVE_HOUSE(p0: float, p1: float, p2: float, p3: float, p4: Address, p5: any, p6: any): int
	/**  **/
	function SET_SAVE_HOUSE(p0: any, p1: boolean, p2: boolean): void
	/**  **/
	function OVERRIDE_SAVE_HOUSE(p0: boolean, p1: float, p2: float, p3: float, p4: float, p5: boolean, p6: float, p7: float): boolean
	/**  **/
	function GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(p0: Vector3Pointer, p1: FloatPointer, fadeInAfterLoad: BoolPointer, p3: BoolPointer): boolean
	/**  **/
	function DO_AUTO_SAVE(): void
	/** Returns true if profile setting 208 is equal to 0. **/
	function GET_IS_AUTO_SAVE_OFF(): boolean
	/**  **/
	function IS_AUTO_SAVE_IN_PROGRESS(): boolean
	/**  **/
	function HAS_CODE_REQUESTED_AUTOSAVE(): boolean
	/**  **/
	function CLEAR_CODE_REQUESTED_AUTOSAVE(): void
	/**  **/
	function BEGIN_REPLAY_STATS(p0: any, p1: any): void
	/**  **/
	function ADD_REPLAY_STAT_VALUE(value: any): void
	/**  **/
	function END_REPLAY_STATS(): void
	/**  **/
	function HAVE_REPLAY_STATS_BEEN_STORED(): boolean
	/**  **/
	function GET_REPLAY_STAT_MISSION_ID(): int
	/**  **/
	function GET_REPLAY_STAT_MISSION_TYPE(): int
	/**  **/
	function GET_REPLAY_STAT_COUNT(): int
	/**  **/
	function GET_REPLAY_STAT_AT_INDEX(index: int): int
	/**  **/
	function CLEAR_REPLAY_STATS(): void
	/**  **/
	function QUEUE_MISSION_REPEAT_LOAD(): boolean
	/** Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
	Returns 1 if the message isn't currently on screen **/
	function QUEUE_MISSION_REPEAT_SAVE(): boolean
	/**  **/
	function QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST(): boolean
	/**  **/
	function GET_STATUS_OF_MISSION_REPEAT_SAVE(): int
	/**  **/
	function IS_MEMORY_CARD_IN_USE(): boolean
	/**  **/
	function SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, damage: int, p7: boolean, weaponHash: Hash, ownerPed: EntityHandle, isAudible: boolean, isInvisible: boolean, speed: float): void
	/** entity - entity to ignore **/
	function SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, damage: int, p7: boolean, weaponHash: Hash, ownerPed: EntityHandle, isAudible: boolean, isInvisible: boolean, speed: float, entity: EntityHandle, p14: any): void
	/** entity - entity to ignore
	targetEntity - entity to home in on, if the weapon hash provided supports homing **/
	function SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, damage: int, p7: boolean, weaponHash: Hash, ownerPed: EntityHandle, isAudible: boolean, isInvisible: boolean, speed: float, entity: EntityHandle, p14: boolean, p15: boolean, targetEntity: EntityHandle, p17: boolean, p18: any, p19: any, p20: any): void
	/** Gets the dimensions of a model.
	
	Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
	
	Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17); **/
	function GET_MODEL_DIMENSIONS(modelHash: Hash, minimum: Vector3Pointer, maximum: Vector3Pointer): void
	/** Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.
	
	Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect. **/
	function SET_FAKE_WANTED_LEVEL(fakeWantedLevel: int): void
	/**  **/
	function GET_FAKE_WANTED_LEVEL(): int
	/**  **/
	function USING_MISSION_CREATOR(toggle: boolean): void
	/**  **/
	function ALLOW_MISSION_CREATOR_WARP(toggle: boolean): void
	/**  **/
	function SET_MINIGAME_IN_PROGRESS(toggle: boolean): void
	/**  **/
	function IS_MINIGAME_IN_PROGRESS(): boolean
	/**  **/
	function IS_THIS_A_MINIGAME_SCRIPT(): boolean
	/** This function is hard-coded to always return 0. **/
	function IS_SNIPER_INVERTED(): boolean
	/** Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used. **/
	function SHOULD_USE_METRIC_MEASUREMENTS(): boolean
	/**  **/
	function GET_PROFILE_SETTING(profileSetting: int): int
	/**  **/
	function ARE_STRINGS_EQUAL(string1: string, string2: string): boolean
	/** Compares two strings up to a specified number of characters.
	
	Parameters:
	str1 - String to be compared.
	str2 - String to be compared.
	matchCase - Comparison will be case-sensitive.
	maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
	
	Returns:
	A value indicating the relationship between the strings:
	<0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
	0 - The contents of both strings are equal.
	>0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)
	
	Examples:
	MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal
	MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal
	MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal
	MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'
	MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal
	
	When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
	MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'
	MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A' **/
	function COMPARE_STRINGS(str1: string, str2: string, matchCase: boolean, maxLength: int): int
	/**  **/
	function ABSI(value: int): int
	/**  **/
	function ABSF(value: float): float
	/** Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box. **/
	function IS_SNIPER_BULLET_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): boolean
	/** Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
	
	- Nacorpio
	
	
	ownedByPlayer = only projectiles fired by the player will be detected. **/
	function IS_PROJECTILE_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, ownedByPlayer: boolean): boolean
	/** Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box. **/
	function IS_PROJECTILE_TYPE_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, type: int, ownedByPlayer: boolean): boolean
	/** See IS_POINT_IN_ANGLED_AREA for the definition of an angled area. **/
	function IS_PROJECTILE_TYPE_IN_ANGLED_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float, p7: any, ownedByPlayer: boolean): boolean
	/**  **/
	function IS_PROJECTILE_TYPE_WITHIN_DISTANCE(x: float, y: float, z: float, projectileHash: Hash, radius: float, ownedByPlayer: boolean): boolean
	/**  **/
	function GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, projectileHash: Hash, projectilePos: Vector3Pointer, ownedByPlayer: boolean): boolean
	/**  **/
	function GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(ped: EntityHandle, weaponHash: Hash, distance: float, outCoords: Vector3Pointer, p4: boolean): boolean
	/**  **/
	function GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(ped: EntityHandle, weaponHash: Hash, distance: float, outCoords: Vector3Pointer, outProjectile: Address, p5: boolean): boolean
	/** For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA
	See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
	Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area. **/
	function IS_BULLET_IN_ANGLED_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float, ownedByPlayer: boolean): boolean
	/**  **/
	function IS_BULLET_IN_AREA(x: float, y: float, z: float, radius: float, ownedByPlayer: boolean): boolean
	/**  **/
	function IS_BULLET_IN_BOX(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, ownedByPlayer: boolean): boolean
	/** p3 - possibly radius? **/
	function HAS_BULLET_IMPACTED_IN_AREA(x: float, y: float, z: float, p3: float, p4: boolean, p5: boolean): boolean
	/**  **/
	function HAS_BULLET_IMPACTED_IN_BOX(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: boolean, p7: boolean): boolean
	/** PS4 **/
	function IS_ORBIS_VERSION(): boolean
	/** XBOX ONE **/
	function IS_DURANGO_VERSION(): boolean
	/**  **/
	function IS_XBOX360_VERSION(): boolean
	/**  **/
	function IS_PS3_VERSION(): boolean
	/**  **/
	function IS_PC_VERSION(): boolean
	/**  **/
	function IS_STEAM_VERSION(): boolean
	/** Used to block some of the prostitute stuff due to laws in Australia. **/
	function IS_AUSSIE_VERSION(): boolean
	/**  **/
	function IS_JAPANESE_VERSION(): boolean
	/**  **/
	function IS_XBOX_PLATFORM(): boolean
	/** Xbox Series (Scarlett) version... **/
	function IS_SCARLETT_VERSION(): boolean
	/**  **/
	function IS_SCE_PLATFORM(): boolean
	/** PS5 (Prospero) version... **/
	function IS_PROSPERO_VERSION(): boolean
	/**  **/
	function IS_STRING_NULL(string: string): boolean
	/**  **/
	function IS_STRING_NULL_OR_EMPTY(string: string): boolean
	/** Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
	
	If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns. **/
	function STRING_TO_INT(string: string, outInteger: IntPointer): boolean
	/**  **/
	function SET_BITS_IN_RANGE(variable: IntPointer, rangeStart: int, rangeEnd: int, p3: int): void
	/**  **/
	function GET_BITS_IN_RANGE(variable: int, rangeStart: int, rangeEnd: int): int
	/** See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones. **/
	function ADD_STUNT_JUMP(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, x3: float, y3: float, z3: float, x4: float, y4: float, z4: float, camX: float, camY: float, camZ: float, p15: int, p16: int, p17: int): int
	/** Creates a new stunt jump.
	
	The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.
	
	Info about the specific 'parameter sections':
	
	
	**x1, y1, z1, x2, y2, z2 and radius1:**
	
	First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.
	
	
	**x3, y3, z3, x4, y4, z4 and radius2:**
	
	Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).
	
	
	**camX, camY and camZ:**
	
	The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.
	
	
	**unk1, unk2 and unk3:**
	
	Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.
	
	Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY **/
	function ADD_STUNT_JUMP_ANGLED(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, radius1: float, x3: float, y3: float, z3: float, x4: float, y4: float, z4: float, radius2: float, camX: float, camY: float, camZ: float, p17: int, p18: int, p19: int): int
	/** Toggles some stunt jump stuff. **/
	function TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(toggle: boolean): void
	/**  **/
	function DELETE_STUNT_JUMP(p0: int): void
	/**  **/
	function ENABLE_STUNT_JUMP_SET(p0: int): void
	/**  **/
	function DISABLE_STUNT_JUMP_SET(p0: int): void
	/**  **/
	function SET_STUNT_JUMPS_CAN_TRIGGER(toggle: boolean): void
	/**  **/
	function IS_STUNT_JUMP_IN_PROGRESS(): boolean
	/**  **/
	function IS_STUNT_JUMP_MESSAGE_SHOWING(): boolean
	/**  **/
	function GET_NUM_SUCCESSFUL_STUNT_JUMPS(): int
	/**  **/
	function GET_TOTAL_SUCCESSFUL_STUNT_JUMPS(): int
	/**  **/
	function CANCEL_STUNT_JUMP(): void
	/** Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe **/
	function SET_GAME_PAUSED(toggle: boolean): void
	/**  **/
	function SET_THIS_SCRIPT_CAN_BE_PAUSED(toggle: boolean): void
	/**  **/
	function SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(toggle: boolean): void
	/** This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
	
	INT_SCORES_SCORTED was a hash collision **/
	function HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(hash: Hash, amount: int): boolean
	/** Get inputted "Cheat code", for example:
	
	while (TRUE)
	{
	    if (MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${fugitive}))
	    {
	       // Do something.
	    }
	    SYSTEM::WAIT(0);
	}
	
	Calling this will also set the last saved string hash to zero.
	 **/
	function HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(hash: Hash): boolean
	/**  **/
	function OVERRIDE_FREEZE_FLAGS(p0: boolean): void
	/** Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
	Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
	
	In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data. **/
	function SET_INSTANCE_PRIORITY_MODE(p0: int): void
	/** Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE. **/
	function SET_INSTANCE_PRIORITY_HINT(flag: int): void
	/** This function is hard-coded to always return 0. **/
	function IS_FRONTEND_FADING(): boolean
	/** spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called **/
	function POPULATE_NOW(): void
	/**  **/
	function GET_INDEX_OF_CURRENT_LEVEL(): int
	/** level can be from 0 to 3
	0: 9.8 - normal
	1: 2.4 - low
	2: 0.1 - very low
	3: 0.0 - off **/
	function SET_GRAVITY_LEVEL(level: int): void
	/**  **/
	function START_SAVE_DATA(p0: Address, p1: any, p2: boolean): void
	/**  **/
	function STOP_SAVE_DATA(): void
	/**  **/
	function GET_SIZE_OF_SAVE_DATA(p0: boolean): int
	/**  **/
	function REGISTER_INT_TO_SAVE(p0: Address, name: string): void
	/**  **/
	function REGISTER_INT64_TO_SAVE(p0: Address, name: string): void
	/**  **/
	function REGISTER_ENUM_TO_SAVE(p0: Address, name: string): void
	/**  **/
	function REGISTER_FLOAT_TO_SAVE(p0: Address, name: string): void
	/**  **/
	function REGISTER_BOOL_TO_SAVE(p0: Address, name: string): void
	/**  **/
	function REGISTER_TEXT_LABEL_TO_SAVE(p0: Address, name: string): void
	/** MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1, "tlPlateText");
	MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1C, "tlPlateText_pending");
	MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f10B, "tlCarAppPlateText"); **/
	function REGISTER_TEXT_LABEL_15_TO_SAVE(p0: Address, name: string): void
	/** Only found 3 times in decompiled scripts.
	
	MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(a_0, "Movie_Name_For_This_Player");
	MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._fB, "Ringtone_For_This_Player");
	MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._f1EC4._f12[v_A/ *6* /], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15" **/
	function REGISTER_TEXT_LABEL_23_TO_SAVE(p0: Address, name: string): void
	/** Only found 2 times in decompiled scripts.
	
	MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f1F5A._f6[0/ *8* /], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"
	MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f4B4[v_1A/ *8* /], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name" **/
	function REGISTER_TEXT_LABEL_31_TO_SAVE(p0: Address, name: string): void
	/** MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "Thumb_label");
	MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f10, "Photo_label");
	MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "GXTlabel");
	MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f21, "StringComp");
	MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f43, "SecondStringComp");
	MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f53, "ThirdStringComp");
	MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f32, "SenderStringComp");
	MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f726[v_1A/ *16* /], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"
	MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f4B, "PAID_PLAYER");
	MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f5B, "RADIO_STATION"); **/
	function REGISTER_TEXT_LABEL_63_TO_SAVE(p0: Address, name: string): void
	/**  **/
	function START_SAVE_STRUCT_WITH_SIZE(p0: Address, size: int, structName: string): void
	/**  **/
	function STOP_SAVE_STRUCT(): void
	/**  **/
	function START_SAVE_ARRAY_WITH_SIZE(p0: Address, size: int, arrayName: string): void
	/**  **/
	function STOP_SAVE_ARRAY(): void
	/**  **/
	function COPY_SCRIPT_STRUCT(dst: Address, src: Address, size: int): void
	/** https://alloc8or.re/gta5/doc/enums/DispatchType.txt **/
	function ENABLE_DISPATCH_SERVICE(dispatchService: int, toggle: boolean): void
	/**  **/
	function BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(dispatchService: int, toggle: boolean): void
	/**  **/
	function GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(dispatchService: int): int
	/** As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. 
	
	Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
	
	Side Note 2: I say it breaks as if you call this proper,
	if(CREATE_INCIDENT) etc it will return false if you do as I said above.
	===================================================== **/
	function CREATE_INCIDENT(dispatchService: int, x: float, y: float, z: float, numUnits: int, radius: float, outIncidentID: IntPointer, p7: any, p8: any): boolean
	/** As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. 
	
	Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
	
	Side Note 2: I say it breaks as if you call this proper,
	if(CREATE_INCIDENT) etc it will return false if you do as I said above.
	===================================================== **/
	function CREATE_INCIDENT_WITH_ENTITY(dispatchService: int, ped: EntityHandle, numUnits: int, radius: float, outIncidentID: IntPointer, p5: any, p6: any): boolean
	/** Delete an incident with a given id.
	
	=======================================================
	Correction, I have change this to int, instead of int*
	as it doesn't use a pointer to the createdIncident.
	If you try it you will crash (or) freeze.
	======================================================= **/
	function DELETE_INCIDENT(incidentId: int): void
	/** =======================================================
	Correction, I have change this to int, instead of int*
	as it doesn't use a pointer to the createdIncident.
	If you try it you will crash (or) freeze.
	======================================================= **/
	function IS_INCIDENT_VALID(incidentId: int): boolean
	/**  **/
	function SET_INCIDENT_REQUESTED_UNITS(incidentId: int, dispatchService: int, numUnits: int): void
	/**  **/
	function SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(incidentId: int, p1: float): void
	/** Finds a position ahead of the player by predicting the players next actions.
	The positions match path finding node positions.
	When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take. **/
	function FIND_SPAWN_POINT_IN_DIRECTION(posX: float, posY: float, posZ: float, fwdVecX: float, fwdVecY: float, fwdVecZ: float, distance: float, spawnPoint: Vector3Pointer): boolean
	/**  **/
	function ADD_POP_MULTIPLIER_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, p6: float, p7: float, p8: boolean, p9: boolean): int
	/**  **/
	function DOES_POP_MULTIPLIER_AREA_EXIST(id: int): boolean
	/**  **/
	function REMOVE_POP_MULTIPLIER_AREA(id: int, p1: boolean): void
	/**  **/
	function IS_POP_MULTIPLIER_AREA_NETWORKED(id: int): boolean
	/** This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE **/
	function ADD_POP_MULTIPLIER_SPHERE(x: float, y: float, z: float, radius: float, pedMultiplier: float, vehicleMultiplier: float, p6: boolean, p7: boolean): int
	/**  **/
	function DOES_POP_MULTIPLIER_SPHERE_EXIST(id: int): boolean
	/** Removes population multiplier sphere **/
	function REMOVE_POP_MULTIPLIER_SPHERE(id: int, p1: boolean): void
	/** Makes the ped jump around like they're in a tennis match **/
	function ENABLE_TENNIS_MODE(ped: EntityHandle, toggle: boolean, p2: boolean): void
	/**  **/
	function IS_TENNIS_MODE(ped: EntityHandle): boolean
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function PLAY_TENNIS_SWING_ANIM(ped: EntityHandle, animDict: string, animName: string, p3: float, p4: float, p5: boolean): void
	/**  **/
	function GET_TENNIS_SWING_ANIM_COMPLETE(ped: EntityHandle): boolean
	/**  **/
	function GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(ped: EntityHandle): boolean
	/**  **/
	function GET_TENNIS_SWING_ANIM_SWUNG(ped: EntityHandle): boolean
	/**  **/
	function PLAY_TENNIS_DIVE_ANIM(ped: EntityHandle, p1: int, p2: float, p3: float, p4: float, p5: boolean): void
	/** From the scripts:
	
	MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(sub_aa49(a_0), "ForcedStopDirection", v_E);
	
	Related to tennis mode. **/
	function SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(ped: EntityHandle, p1: string, p2: float): void
	/**  **/
	function RESET_DISPATCH_SPAWN_LOCATION(): void
	/**  **/
	function SET_DISPATCH_SPAWN_LOCATION(x: float, y: float, z: float): void
	/**  **/
	function RESET_DISPATCH_IDEAL_SPAWN_DISTANCE(): void
	/**  **/
	function SET_DISPATCH_IDEAL_SPAWN_DISTANCE(p0: float): void
	/**  **/
	function RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0: any): void
	/**  **/
	function SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0: any, p1: float): void
	/**  **/
	function SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(p0: any, p1: float): void
	/** To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
	See IS_POINT_IN_ANGLED_AREA for the definition of an angled area. **/
	function ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float): int
	/**  **/
	function ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(x1: float, y1: float, x2: float, y2: float): int
	/**  **/
	function REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(p0: int): void
	/**  **/
	function RESET_DISPATCH_SPAWN_BLOCKING_AREAS(): void
	/**  **/
	function RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(): void
	/**  **/
	function SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(p0: int, p1: int): void
	/**  **/
	function ADD_TACTICAL_NAV_MESH_POINT(x: float, y: float, z: float): void
	/**  **/
	function CLEAR_TACTICAL_NAV_MESH_POINTS(): void
	/** Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs. **/
	function SET_RIOT_MODE_ENABLED(toggle: boolean): void
	/**  **/
	function DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(p0: int, windowTitle: string, p2: Address, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, defaultConcat4: string, defaultConcat5: string, defaultConcat6: string, defaultConcat7: string, maxInputLength: int): void
	/** sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.
	
	NOTE: windowTitle uses text labels, and an invalid value will display nothing.
	
	www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474
	
	windowTitle's
	-----------------
	CELL_EMAIL_BOD  =   "Enter your Eyefind message"
	CELL_EMAIL_BODE =   "Message too long. Try again"
	CELL_EMAIL_BODF    =   "Forbidden message. Try again"
	CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
	CELL_EMAIL_SODE =   "Subject too long. Try again"
	CELL_EMAIL_SODF    =   "Forbidden text. Try again"
	CELL_EMASH_BOD   =   "Enter your Eyefind message"
	CELL_EMASH_BODE =   "Message too long. Try again"
	CELL_EMASH_BODF    =   "Forbidden message. Try again"
	CELL_EMASH_SOD    =   "Enter your Eyefind subject"
	CELL_EMASH_SODE =   "Subject too long. Try again"
	CELL_EMASH_SODF    =   "Forbidden Text. Try again"
	FMMC_KEY_TIP10   =   "Enter Synopsis"
	FMMC_KEY_TIP12  =   "Enter Custom Team Name"
	FMMC_KEY_TIP12F =   "Forbidden Text. Try again"
	FMMC_KEY_TIP12N  =   "Custom Team Name"
	FMMC_KEY_TIP8 =   "Enter Message"
	FMMC_KEY_TIP8F   =   "Forbidden Text. Try again"
	FMMC_KEY_TIP8FS  =   "Invalid Message. Try again"
	FMMC_KEY_TIP8S  =   "Enter Message"
	FMMC_KEY_TIP9    =   "Enter Outfit Name"
	FMMC_KEY_TIP9F   =   "Invalid Outfit Name. Try again"
	FMMC_KEY_TIP9N  =   "Outfit Name"
	PM_NAME_CHALL  =   "Enter Challenge Name" **/
	function DISPLAY_ONSCREEN_KEYBOARD(p0: int, windowTitle: string, p2: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, maxInputLength: int): void
	/** Returns the current status of the onscreen keyboard, and updates the output.
	
	Status Codes:
	
	-1: Keyboard isn't active
	0: User still editing
	1: User has finished editing
	2: User has canceled editing **/
	function UPDATE_ONSCREEN_KEYBOARD(): int
	/** Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick. **/
	function GET_ONSCREEN_KEYBOARD_RESULT(): string
	/** DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
	Use FORCE_CLOSE_TEXT_INPUT_BOX instead. **/
	function CANCEL_ONSCREEN_KEYBOARD(): void
	/** p0 was always 2 in R* scripts.
	Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved. **/
	function NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(p0: int): void
	/** Appears to remove stealth kill action from memory **/
	function ACTION_MANAGER_ENABLE_ACTION(hash: Hash, enable: boolean): void
	/** GET_GAME_TIMER() / 1000 **/
	function GET_REAL_WORLD_TIME(): int
	/**  **/
	function SUPRESS_RANDOM_EVENT_THIS_FRAME(eventType: int, suppress: boolean): void
	/**  **/
	function SET_EXPLOSIVE_AMMO_THIS_FRAME(player: Player): void
	/**  **/
	function SET_FIRE_AMMO_THIS_FRAME(player: Player): void
	/**  **/
	function SET_EXPLOSIVE_MELEE_THIS_FRAME(player: Player): void
	/**  **/
	function SET_SUPER_JUMP_THIS_FRAME(player: Player): void
	/**  **/
	function SET_BEAST_JUMP_THIS_FRAME(player: Player): void
	/**  **/
	function SET_FORCED_JUMP_THIS_FRAME(player: Player): void
	/**  **/
	function HAS_GAME_INSTALLED_THIS_SESSION(): boolean
	/**  **/
	function SET_TICKER_JOHNMARSTON_IS_DONE(): void
	/**  **/
	function ARE_PROFILE_SETTINGS_VALID(): boolean
	/**  **/
	function PREVENT_ARREST_STATE_THIS_FRAME(): void
	/** Sets the localplayer playerinfo state back to playing (State 0)
	
	States are:
	-1: "Invalid"
	0: "Playing"
	1: "Died"
	2: "Arrested"
	3: "Failed Mission"
	4: "Left Game"
	5: "Respawn"
	6: "In MP Cutscene" **/
	function FORCE_GAME_STATE_PLAYING(): void
	/**  **/
	function SCRIPT_RACE_INIT(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function SCRIPT_RACE_SHUTDOWN(): void
	/**  **/
	function SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(player: Player, p1: IntPointer, p2: IntPointer): boolean
	/**  **/
	function START_END_USER_BENCHMARK(): void
	/**  **/
	function STOP_END_USER_BENCHMARK(): void
	/**  **/
	function RESET_END_USER_BENCHMARK(): void
	/** Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics. **/
	function SAVE_END_USER_BENCHMARK(): void
	/** Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE **/
	function UI_STARTED_END_USER_BENCHMARK(): boolean
	/** Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU **/
	function LANDING_SCREEN_STARTED_END_USER_BENCHMARK(): boolean
	/** Returns true if command line option '-benchmark' is set. **/
	function IS_COMMANDLINE_END_USER_BENCHMARK(): boolean
	/** Returns value of the '-benchmarkIterations' command line option. **/
	function GET_BENCHMARK_ITERATIONS(): int
	/** Returns value of the '-benchmarkPass' command line option. **/
	function GET_BENCHMARK_PASS(): int
	/** In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game. **/
	function RESTART_GAME(): void
	/** Exits the game and downloads a fresh social club update on next restart. **/
	function QUIT_GAME(): void
	/** Hardcoded to always return true. **/
	function HAS_ASYNC_INSTALL_FINISHED(): boolean
	/**  **/
	function CLEANUP_ASYNC_INSTALL(): void
	/** aka "constrained" **/
	function PLM_IS_IN_CONSTRAINED_MODE(): boolean
	/** Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds. **/
	function PLM_GET_CONSTRAINED_DURATION_MS(): int
	/** If toggle is true, the ped's head is shown in the pause menu
	If toggle is false, the ped's head is not shown in the pause menu **/
	function SET_PLAYER_IS_IN_ANIMAL_FORM(toggle: boolean): void
	/** Although we don't have a jenkins hash for this one, the name is 100% confirmed. **/
	function GET_IS_PLAYER_IN_ANIMAL_FORM(): boolean
	/**  **/
	function SET_PLAYER_IS_REPEATING_A_MISSION(toggle: boolean): void
	/** Does nothing (it's a nullsub). **/
	function DISABLE_SCREEN_DIMMING_THIS_FRAME(): void
	/**  **/
	function GET_CITY_DENSITY(): float
	/**  **/
	function USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE(): void
	/**  **/
	function SET_CONTENT_ID_INDEX(contentId: Hash, index: int): void
	/**  **/
	function GET_CONTENT_ID_INDEX(contentId: Hash): int
}

/** @noSelf **/
declare namespace MOBILE {
	/** Creates a mobile phone of the specified type.
	
	Possible phone types:
	
	0 - Default phone / Michael's phone
	1 - Trevor's phone
	2 - Franklin's phone
	3 - Unused police phone
	4 - Prologue phone
	
	Higher values may crash your game. **/
	function CREATE_MOBILE_PHONE(phoneType: int): void
	/** Destroys the currently active mobile phone. **/
	function DESTROY_MOBILE_PHONE(): void
	/** The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone. **/
	function SET_MOBILE_PHONE_SCALE(scale: float): void
	/** Last parameter is unknown and always zero. **/
	function SET_MOBILE_PHONE_ROTATION(rotX: float, rotY: float, rotZ: float, p3: any): void
	/**  **/
	function GET_MOBILE_PHONE_ROTATION(rotation: Vector3Pointer, p1: EntityHandle): void
	/**  **/
	function SET_MOBILE_PHONE_POSITION(posX: float, posY: float, posZ: float): void
	/**  **/
	function GET_MOBILE_PHONE_POSITION(position: Vector3Pointer): void
	/** If bool Toggle = true so the mobile is hide to screen.
	If bool Toggle = false so the mobile is show to screen. **/
	function SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(toggle: boolean): void
	/** This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
	
	
	I can confirm the above. This function is hard-coded to always return 1. **/
	function CAN_PHONE_BE_SEEN_ON_SCREEN(): boolean
	/**  **/
	function SET_MOBILE_PHONE_DOF_STATE(toggle: boolean): void
	/** For move the finger of player, the value of int goes 1 at 5. **/
	function CELL_SET_INPUT(direction: int): void
	/** if the bool "Toggle" is "true" so the phone is lean.
	if the bool "Toggle" is "false" so the phone is not lean. **/
	function CELL_HORIZONTAL_MODE_TOGGLE(toggle: boolean): void
	/**  **/
	function CELL_CAM_ACTIVATE(p0: boolean, p1: boolean): void
	/**  **/
	function CELL_CAM_ACTIVATE_SELFIE_MODE(toggle: boolean): void
	/**  **/
	function CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(toggle: boolean): void
	/**  **/
	function CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(p0: float): void
	/**  **/
	function CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(p0: float): void
	/**  **/
	function CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(p0: float): void
	/**  **/
	function CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(p0: float): void
	/**  **/
	function CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(p0: float): void
	/**  **/
	function CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(p0: float): void
	/**  **/
	function CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(p0: float): void
	/**  **/
	function CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(p0: float): void
	/**  **/
	function CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(entity: EntityHandle): boolean
	/**  **/
	function GET_MOBILE_PHONE_RENDER_ID(renderId: IntPointer): void
}

/** @noSelf **/
declare namespace MONEY {
	/**  **/
	function NETWORK_INITIALIZE_CASH(wallet: int, bank: int): void
	/** Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash); **/
	function NETWORK_DELETE_CHARACTER(characterSlot: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_MANUAL_DELETE_CHARACTER(characterSlot: int): void
	/**  **/
	function NETWORK_GET_PLAYER_IS_HIGH_EARNER(): boolean
	/**  **/
	function NETWORK_CLEAR_CHARACTER_WALLET(characterSlot: int): void
	/**  **/
	function NETWORK_GIVE_PLAYER_JOBSHARE_CASH(amount: int, gamerHandle: Address): void
	/**  **/
	function NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(value: int, gamerHandle: Address): void
	/**  **/
	function NETWORK_CAN_SHARE_JOB_CASH(): boolean
	/** index
	-------
	See function sub_1005 in am_boat_taxi.ysc
	
	context
	----------
	"BACKUP_VAGOS"
	"BACKUP_LOST"
	"BACKUP_FAMILIES"
	"HIRE_MUGGER"
	"HIRE_MERCENARY"
	"BUY_CARDROPOFF"
	"HELI_PICKUP"
	"BOAT_PICKUP"
	"CLEAR_WANTED"
	"HEAD_2_HEAD"
	"CHALLENGE"
	"SHARE_LAST_JOB"
	"DEFAULT"
	
	reason
	---------
	"NOTREACHTARGET"
	"TARGET_ESCAPE"
	"DELIVERY_FAIL"
	"NOT_USED"
	"TEAM_QUIT"
	"SERVER_ERROR"
	"RECEIVE_LJ_L"
	"CHALLENGE_PLAYER_LEFT"
	"DEFAULT"
	
	unk
	-----
	Unknown bool value
	
	 **/
	function NETWORK_REFUND_CASH(index: int, context: string, reason: string, unk: boolean): void
	/**  **/
	function NETWORK_DEDUCT_CASH(amount: int, p1: string, p2: string, p3: boolean, p4: boolean, p5: boolean): void
	/**  **/
	function NETWORK_MONEY_CAN_BET(amount: int, p1: boolean, p2: boolean): boolean
	/**  **/
	function NETWORK_CAN_BET(amount: int): boolean
	/** GTAO_CASINO_HOUSE
	GTAO_CASINO_INSIDETRACK
	GTAO_CASINO_LUCKYWHEEL
	GTAO_CASINO_BLACKJACK
	GTAO_CASINO_ROULETTE
	GTAO_CASINO_SLOTS
	GTAO_CASINO_PURCHASE_CHIPS
	
	NETWORK_C* **/
	function NETWORK_CASINO_CAN_BET(hash: Hash): boolean
	/**  **/
	function NETWORK_CASINO_CAN_BET_PVC(): boolean
	/**  **/
	function NETWORK_CASINO_CAN_BET_AMOUNT(p0: any): boolean
	/**  **/
	function NETWORK_CASINO_CAN_BUY_CHIPS_PVC(): boolean
	/**  **/
	function NETWORK_CASINO_BUY_CHIPS(p0: int, p1: int): boolean
	/**  **/
	function NETWORK_CASINO_SELL_CHIPS(p0: int, p1: int): boolean
	/** Does nothing (it's a nullsub). **/
	function NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE(): void
	/**  **/
	function CAN_PAY_AMOUNT_TO_BOSS(p0: int, p1: int, amount: int, p3: IntPointer): boolean
	/**  **/
	function NETWORK_EARN_FROM_PICKUP(amount: int): void
	/**  **/
	function NETWORK_EARN_FROM_CASHING_OUT(amount: int): void
	/**  **/
	function NETWORK_EARN_FROM_GANGATTACK_PICKUP(amount: int): void
	/**  **/
	function NETWORK_EARN_ASSASSINATE_TARGET_KILLED(amount: int): void
	/** For the money bags that drop a max of $40,000. Often called 40k bags.
	
	Most likely NETWORK_EARN_FROM_ROB*** **/
	function NETWORK_EARN_FROM_ROB_ARMORED_CARS(amount: int): void
	/**  **/
	function NETWORK_EARN_FROM_CRATE_DROP(amount: int): void
	/**  **/
	function NETWORK_EARN_FROM_BETTING(amount: int, p1: string): void
	/**  **/
	function NETWORK_EARN_FROM_JOB(amount: int, p1: string): void
	/**  **/
	function NETWORK_EARN_FROM_JOBX2(amount: int, p1: string): void
	/**  **/
	function NETWORK_EARN_FROM_PREMIUM_JOB(amount: int, p1: string): void
	/**  **/
	function NETWORK_EARN_FROM_BEND_JOB(amount: int, heistHash: string): void
	/**  **/
	function NETWORK_EARN_FROM_CHALLENGE_WIN(p0: any, p1: Address, p2: boolean): void
	/**  **/
	function NETWORK_EARN_FROM_BOUNTY(amount: int, gamerHandle: Address, p2: Address, p3: any): void
	/**  **/
	function NETWORK_EARN_FROM_IMPORT_EXPORT(amount: int, modelHash: Hash): void
	/**  **/
	function NETWORK_EARN_FROM_HOLDUPS(amount: int): void
	/**  **/
	function NETWORK_EARN_FROM_PROPERTY(amount: int, propertyName: Hash): void
	/** DSPORT **/
	function NETWORK_EARN_FROM_AI_TARGET_KILL(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_FROM_NOT_BADSPORT(amount: int): void
	/**  **/
	function NETWORK_EARN_FROM_ROCKSTAR(amount: int): void
	/**  **/
	function NETWORK_EARN_FROM_VEHICLE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void
	/**  **/
	function NETWORK_EARN_FROM_PERSONAL_VEHICLE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void
	/**  **/
	function NETWORK_EARN_FROM_DAILY_OBJECTIVES(p0: int, p1: string, p2: int): void
	/** Example for p1: "AM_DISTRACT_COPS" **/
	function NETWORK_EARN_FROM_AMBIENT_JOB(p0: int, p1: string, p2: Address): void
	/**  **/
	function NETWORK_EARN_FROM_JOB_BONUS(p0: any, p1: Address, p2: Address): void
	/**  **/
	function NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_HEIST_AWARD(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_FIRST_TIME_BONUS(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_GOON(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_BOSS(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_AGENCY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_FROM_WAREHOUSE(amount: int, id: int): void
	/**  **/
	function NETWORK_EARN_FROM_CONTRABAND(amount: int, p1: any): void
	/**  **/
	function NETWORK_EARN_FROM_DESTROYING_CONTRABAND(p0: any): void
	/**  **/
	function NETWORK_EARN_FROM_SMUGGLER_WORK(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_EARN_FROM_HANGAR_TRADE(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_PURCHASE_CLUB_HOUSE(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_FROM_BUSINESS_PRODUCT(amount: int, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_FROM_VEHICLE_EXPORT(amount: int, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_SMUGGLER_AGENCY(amount: int, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_BOUNTY_HUNTER_REWARD(p0: any): void
	/**  **/
	function NETWORK_EARN_FROM_BUSINESS_BATTLE(p0: any): void
	/**  **/
	function NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(p0: any, p1: int): void
	/**  **/
	function NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(p0: any): void
	/**  **/
	function NETWORK_EARN_FROM_BUSINESS_HUB_SELL(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_FROM_FMBB_BOSS_WORK(p0: any): void
	/**  **/
	function NETWORK_EARN_FMBB_WAGE_BONUS(p0: any): void
	/**  **/
	function NETWORK_CAN_SPEND_MONEY(p0: any, p1: boolean, p2: boolean, p3: boolean, p4: any, p5: any): boolean
	/**  **/
	function NETWORK_CAN_SPEND_MONEY2(p0: any, p1: boolean, p2: boolean, p3: boolean, p4: Address, p5: any, p6: any): boolean
	/**  **/
	function NETWORK_BUY_ITEM(amount: int, item: Hash, p2: any, p3: any, p4: boolean, item_name: string, p6: any, p7: any, p8: any, p9: boolean): void
	/**  **/
	function NETWORK_SPENT_TAXI(amount: int, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_PAY_EMPLOYEE_WAGE(p0: any, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_PAY_MATCH_ENTRY_FEE(amount: int, matchId: string, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPENT_BETTING(amount: int, p1: int, matchId: string, p3: boolean, p4: boolean): void
	/**  **/
	function NETWORK_SPENT_WAGER(p0: any, p1: any, amount: int): void
	/**  **/
	function NETWORK_SPENT_IN_STRIPCLUB(p0: any, p1: boolean, p2: any, p3: boolean): void
	/**  **/
	function NETWORK_BUY_HEALTHCARE(cost: int, p1: boolean, p2: boolean): void
	/** p1 = 0 (always)
	p2 = 1 (always) **/
	function NETWORK_BUY_AIRSTRIKE(cost: int, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_BUY_BACKUP_GANG(p0: int, p1: int, p2: boolean, p3: boolean): void
	/** p1 = 0 (always)
	p2 = 1 (always) **/
	function NETWORK_BUY_HELI_STRIKE(cost: int, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_AMMO_DROP(p0: any, p1: boolean, p2: boolean, p3: any): void
	/** p1 is just an assumption. p2 was false and p3 was true. **/
	function NETWORK_BUY_BOUNTY(amount: int, victim: Player, p2: boolean, p3: boolean, p4: any): void
	/**  **/
	function NETWORK_BUY_PROPERTY(cost: int, propertyName: Hash, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_BUY_SMOKES(p0: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_HELI_PICKUP(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_BOAT_PICKUP(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_BULL_SHARK(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_CASH_DROP(amount: int, p1: boolean, p2: boolean): void
	/** Only used once in a script (am_contact_requests)
	p1 = 0
	p2 = 1 **/
	function NETWORK_SPENT_HIRE_MUGGER(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_ROBBED_BY_MUGGER(amount: int, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_HIRE_MERCENARY(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_BUY_WANTEDLEVEL(p0: any, p1: Address, p2: boolean, p3: boolean, p4: any): void
	/**  **/
	function NETWORK_SPENT_BUY_OFFTHERADAR(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_BUY_REVEAL_PLAYERS(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_CARWASH(p0: any, p1: any, p2: any, p3: boolean, p4: boolean): void
	/**  **/
	function NETWORK_SPENT_CINEMA(p0: any, p1: any, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPENT_TELESCOPE(p0: any, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_HOLDUPS(p0: any, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_BUY_PASSIVE_MODE(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_BANK_INTEREST(p0: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_PROSTITUTES(p0: any, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_ARREST_BAIL(p0: any, p1: boolean, p2: boolean): void
	/** According to how I understood this in the freemode script alone,
	The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
	
	The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
	
	The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
	
	The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
	
	The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
	bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost. **/
	function NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(amount: int, vehicleModel: Hash, gamerHandle: Address, notBankrupt: boolean, hasTheMoney: boolean): void
	/**  **/
	function NETWORK_SPENT_CALL_PLAYER(p0: any, p1: Address, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPENT_BOUNTY(p0: any, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_FROM_ROCKSTAR(p0: int, p1: boolean, p2: boolean): void
	/** Hardcoded to return 0. **/
	function NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS(amount: int): int
	/** This isn't a hash collision. **/
	function PROCESS_CASH_GIFT(p0: IntPointer, p1: IntPointer, p2: string): string
	/**  **/
	function NETWORK_SPENT_MOVE_SUBMARINE(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_SPENT_PLAYER_HEALTHCARE(p0: int, p1: int, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPENT_NO_COPS(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_CARGO_SOURCING(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/**  **/
	function NETWORK_SPENT_REQUEST_JOB(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPENT_REQUEST_HEIST(p0: any, p1: boolean, p2: boolean, p3: any): void
	/** The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
	
	The last 3 parameters are, 
	2,0,1 in the am_ferriswheel.c
	1,0,1 in the am_rollercoaster.c
	 **/
	function NETWORK_BUY_FAIRGROUND_RIDE(amount: int, p1: any, p2: boolean, p3: boolean, p4: any): void
	/**  **/
	function NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS(): boolean
	/**  **/
	function NETWORK_SPENT_JOB_SKIP(amount: int, matchId: string, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPENT_BOSS_GOON(amount: int, p1: boolean, p2: boolean): boolean
	/**  **/
	function NETWORK_SPEND_GOON(p0: int, p1: int, amount: int): void
	/**  **/
	function NETWORK_SPEND_BOSS(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_SPENT_MOVE_YACHT(amount: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_RENAME_ORGANIZATION(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_BUY_CONTRABAND_MISSION(p0: int, p1: int, p2: Hash, p3: boolean, p4: boolean): void
	/**  **/
	function NETWORK_SPENT_PA_SERVICE_HELI(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PA_SERVICE_VEHICLE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PA_SERVICE_SNACK(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PA_SERVICE_DANCER(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PA_SERVICE_IMPOUND(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_SPENT_PA_HELI_PICKUP(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(amount: int, data: Address, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_JUKEBOX(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PURCHASE_CLUB_HOUSE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_CLUB_HOUSE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_MC_ABILITY(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_CHANGE_APPEARANCE(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_SPENT_VEHICLE_EXPORT_MODS(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void
	/**  **/
	function NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_IMPORT_EXPORT_REPAIR(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_SPENT_PURCHASE_HANGAR(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_HANGAR(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_HANGAR_UTILITY_CHARGES(amount: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_HANGAR_STAFF_CHARGES(amount: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_BUY_TRUCK(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_TRUCK(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_BUY_BUNKER(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPRADE_BUNKER(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_FROM_SELL_BUNKER(amount: int, bunkerHash: Hash): void
	/**  **/
	function NETWORK_SPENT_BALLISTIC_EQUIPMENT(amount: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_EARN_RDR_BONUS(amount: int, p1: any): void
	/**  **/
	function NETWORK_EARN_WAGE_PAYMENT(amount: int, p1: any): void
	/**  **/
	function NETWORK_EARN_WAGE_PAYMENT_BONUS(amount: int): void
	/**  **/
	function NETWORK_SPENT_BUY_BASE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_BASE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_BUY_TILTROTOR(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_TILTROTOR(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_EMPLOY_ASSASSINS(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_GANGOPS_CANNON(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_GANGOPS_SKIP_MISSION(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_SELL_BASE(amount: int, baseNameHash: Hash): void
	/**  **/
	function NETWORK_EARN_TARGET_REFUND(amount: int, p1: int): void
	/**  **/
	function NETWORK_EARN_GANGOPS_WAGES(amount: int, p1: int): void
	/**  **/
	function NETWORK_EARN_GANGOPS_WAGES_BONUS(amount: int, p1: int): void
	/**  **/
	function NETWORK_EARN_DAR_CHALLENGE(amount: int, p1: any): void
	/**  **/
	function NETWORK_EARN_DOOMSDAY_FINALE_BONUS(amount: int, vehicleHash: Hash): void
	/**  **/
	function NETWORK_EARN_GANGOPS_AWARD(amount: int, unk: string, p2: any): void
	/**  **/
	function NETWORK_EARN_GANGOPS_ELITE(amount: int, unk: string, actIndex: int): void
	/**  **/
	function NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(earnedMoney: int): void
	/**  **/
	function NETWORK_SPEND_GANGOPS_START_STRAND(type: int, amount: int, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPEND_GANGOPS_TRIP_SKIP(amount: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(amount: int): void
	/**  **/
	function NETWORK_EARN_GANGOPS_SETUP(amount: int, unk: string): void
	/**  **/
	function NETWORK_EARN_GANGOPS_FINALE(amount: int, unk: string): void
	/**  **/
	function NETWORK_SPEND_GANGOPS_REPAIR_COST(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_NIGHTCLUB(p0: any): void
	/**  **/
	function NETWORK_EARN_NIGHTCLUB_DANCING(p0: any): void
	/**  **/
	function NETWORK_EARN_BB_EVENT_BONUS(amount: int): void
	/**  **/
	function NETWORK_SPENT_PURCHASE_HACKER_TRUCK(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_HACKER_TRUCK(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_HACKER_TRUCK(p0: any, amount: int, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void
	/**  **/
	function NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/**  **/
	function NETWORK_SPENT_RDR_HATCHET_BONUS(amount: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(player: Player, amount: int, p1: any, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(amount: int, p1: any, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPEND_BOUNTY_HUNTER_MISSION(amount: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPENT_REHIRE_DJ(amount: int, p1: any, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPENT_ARENA_JOIN_SPECTATOR(amount: int, p1: any, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(amount: int, p1: any): void
	/**  **/
	function NETWORK_EARN_ARENA_CAREER_PROGRESSION(amount: int, p1: any): void
	/**  **/
	function NETWORK_SPEND_MAKE_IT_RAIN(amount: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_SPEND_BUY_ARENA(amount: int, p1: boolean, p2: boolean, p3: string): void
	/**  **/
	function NETWORK_SPEND_UPGRADE_ARENA(amount: int, p1: boolean, p2: boolean, p3: string): void
	/**  **/
	function NETWORK_SPEND_ARENA_SPECTATOR_BOX(amount: int, p1: any, p2: boolean, p3: boolean): void
	/**  **/
	function NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(amount: int, p1: any, p2: boolean): void
	/**  **/
	function NETWORK_EARN_SPIN_THE_WHEEL_CASH(amount: int): void
	/**  **/
	function NETWORK_SPEND_ARENA_PREMIUM(amount: int, p1: boolean, p2: boolean): void
	/**  **/
	function NETWORK_EARN_ARENA_WAR(amount: int, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(amount: int): void
	/**  **/
	function NETWORK_EARN_ARENA_WAR_EVENT_CARGO(amount: int): void
	/**  **/
	function NETWORK_EARN_RC_TIME_TRIAL(amount: int): void
	/**  **/
	function NETWORK_EARN_DAILY_OBJECTIVE_EVENT(amount: int): void
	/**  **/
	function NETWORK_SPEND_CASINO_MEMBERSHIP(amount: int, p1: boolean, p2: boolean, p3: int): void
	/**  **/
	function NETWORK_SPEND_BUY_CASINO(amount: int, p1: boolean, p2: boolean, data: Address): void
	/**  **/
	function NETWORK_SPEND_UPGRADE_CASINO(amount: int, p1: boolean, p2: boolean, data: Address): void
	/**  **/
	function NETWORK_SPEND_CASINO_GENERIC(amount: int, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_EARN_CASINO_TIME_TRIAL_WIN(amount: int): void
	/**  **/
	function NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(amount: int): void
	/**  **/
	function NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(amount: int): void
	/**  **/
	function NETWORK_EARN_SELL_PRIZE_VEHICLE(amount: int, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_CASINO_MISSION_REWARD(amount: int): void
	/**  **/
	function NETWORK_EARN_CASINO_STORY_MISSION_REWARD(amount: int): void
	/**  **/
	function NETWORK_EARN_CASINO_MISSION_PARTICIPATION(amount: int): void
	/**  **/
	function NETWORK_EARN_CASINO_AWARD(amount: int, hash: Hash): void
	/**  **/
	function NETWORK_SPEND_BUY_ARCADE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_UPGRADE_ARCADE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_CASINO_HEIST(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any, p10: any): void
	/**  **/
	function NETWORK_SPEND_ARCADE_MGMT(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_SPEND_PLAY_ARCADE(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_SPEND_ARCADE(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_EARN_CASINO_HEIST(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void
	/**  **/
	function NETWORK_EARN_UPGRADE_ARCADE(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_ARCADE(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_EARN_COLLECTABLES(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_CHALLENGE(amount: int, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_CASINO_HEIST_AWARDS(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_EARN_COLLECTABLE_ITEM(amount: int, p1: any): void
	/**  **/
	function NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(amount: int, p1: any): void
	/**  **/
	function NETWORK_EARN_YATCH_MISSION(amount: int, p1: any): void
	/**  **/
	function NETWORK_EARN_DISPATCH_CALL(amount: int, p1: any): void
	/**  **/
	function NETWORK_SPEND_BEACH_PARTY(p0: any): void
	/**  **/
	function NETWORK_SPEND_SUBMARINE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/**  **/
	function NETWORK_SPEND_CASINO_CLUB(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void
	/**  **/
	function NETWORK_SPEND_BUY_SUB(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_UPGRADE_SUB(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_ISLAND_HEIST(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_ISLAND_HEIST(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/**  **/
	function NETWORK_EARN_BEACH_PARTY_LOST_FOUND(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(p0: any, p1: any): void
	/**  **/
	function NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_SPEND_CAR_CLUB_BAR(p0: any, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPEND_AUTOSHOP_MODIFY(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_SPEND_CAR_CLUB_TAKEOVER(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_BUY_AUTOSHOP(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_UPGRADE_AUTOSHOP(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_AUTOSHOP_BUSINESS(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_AUTOSHOP_INCOME(p0: any, p1: int): void
	/**  **/
	function NETWORK_EARN_CARCLUB_MEMBERSHIP(p0: any): void
	/**  **/
	function NETWORK_EARN_DAILY_VEHICLE(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_DAILY_VEHICLE_BONUS(p0: any): void
	/**  **/
	function NETWORK_EARN_TUNER_AWARD(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_TUNER_ROBBERY(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_EARN_UPGRADE_AUTOSHOP(p0: any, p1: any): void
	/**  **/
	function NETWORK_SPEND_INTERACTION_MENU_ABILITY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_SET_COMMON_FIELDS(p0: any, p1: any, p2: any, p3: boolean): void
	/**  **/
	function NETWORK_SPEND_SET_DISCOUNT(p0: boolean): void
	/**  **/
	function NETWORK_SPEND_BUY_AGENCY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_UPGRADE_AGENCY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_AGENCY(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_SPEND_HIDDEN(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_SOURCE_BIKE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_COMP_SUV(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_SUV_FST_TRVL(p0: int, p1: boolean, p2: boolean, p3: any): void
	/**  **/
	function NETWORK_SPEND_SUPPLY(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_BIKE_SHOP(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_SPEND_VEHICLE_REQUESTED(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function NETWORK_SPEND_GUNRUNNING(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_AGENCY_SAFE(p0: any): void
	/**  **/
	function NETWORK_EARN_AWARD_CONTRACT(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_AGENCY_CONTRACT(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_AWARD_PHONE(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_AGENCY_PHONE(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_EARN_AWARD_FIXER_MISSION(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_FIXER_PREP(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_FIXER_FINALE(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_AWARD_SHORT_TRIP(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_FIXER_RIVAL_DELIVERY(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_UPGRADE_AGENCY(p0: any, p1: any): void
	/**  **/
	function NETWORK_SPEND_APARTMENT_UTILITIES(amount: int, p1: boolean, p2: boolean, data: Address): void
	/**  **/
	function NETWORK_SPEND_BUSINESS_PROPERTY_FEES(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_SIGHTSEEING_REWARD(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_EARN_BIKER_SHOP(p0: any, p1: any): void
	/**  **/
	function NETWORK_EARN_BIKER(p0: any): void
	/**  **/
	function NETWORK_YOHAN_SOURCE_GOODS(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function NETWORK_GET_VC_BANK_BALANCE(): int
	/**  **/
	function NETWORK_GET_VC_WALLET_BALANCE(characterSlot: int): int
	/**  **/
	function NETWORK_GET_VC_BALANCE(): int
	/**  **/
	function NETWORK_GET_EVC_BALANCE(): int
	/**  **/
	function NETWORK_GET_PVC_BALANCE(): int
	/**  **/
	function NETWORK_GET_STRING_WALLET_BALANCE(characterSlot: int): string
	/**  **/
	function NETWORK_GET_STRING_BANK_BALANCE(): string
	/**  **/
	function NETWORK_GET_STRING_BANK_WALLET_BALANCE(): string
	/** Returns true if wallet balance >= amount. **/
	function NETWORK_GET_CAN_SPEND_FROM_WALLET(amount: int, characterSlot: int): boolean
	/** Returns true if bank balance >= amount. **/
	function NETWORK_GET_CAN_SPEND_FROM_BANK(amount: int): boolean
	/** Returns true if bank balance + wallet balance >= amount. **/
	function NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(amount: int, characterSlot: int): boolean
	/** Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE. **/
	function NETWORK_GET_PVC_TRANSFER_BALANCE(): int
	/** Returns false if amount > wallet balance or daily transfer limit has been hit. **/
	function NETWORK_GET_CAN_TRANSFER_CASH(amount: int): boolean
	/**  **/
	function NETWORK_CAN_RECEIVE_PLAYER_CASH(p0: any, p1: any, p2: any, p3: any): boolean
	/** Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE. **/
	function NETWORK_GET_REMAINING_TRANSFER_BALANCE(): int
	/** Does nothing and always returns 0. **/
	function WITHDRAW_VC(amount: int): int
	/** Does nothing and always returns false. **/
	function DEPOSIT_VC(amount: int): boolean
	/** This function is hard-coded to always return 1. **/
	function HAS_VC_WITHDRAWAL_COMPLETED(p0: any): boolean
	/** This function is hard-coded to always return 1. **/
	function WAS_VC_WITHDRAWAL_SUCCESSFUL(p0: any): boolean
}

/** @noSelf **/
declare namespace NETSHOPPING {
	/**  **/
	function NET_GAMESERVER_USE_SERVER_TRANSACTIONS(): boolean
	/**  **/
	function NET_GAMESERVER_CATALOG_ITEM_IS_VALID(name: string): boolean
	/**  **/
	function NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(hash: Hash): boolean
	/** bool is always true in game scripts **/
	function NET_GAMESERVER_GET_PRICE(itemHash: Hash, categoryHash: Hash, p2: boolean): int
	/**  **/
	function NET_GAMESERVER_CATALOG_IS_VALID(): boolean
	/**  **/
	function NET_GAMESERVER_IS_CATALOG_CURRENT(): boolean
	/**  **/
	function NET_GAMESERVER_GET_CATALOG_CLOUD_CRC(): Hash
	/**  **/
	function NET_GAMESERVER_REFRESH_SERVER_CATALOG(): boolean
	/**  **/
	function NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(state: IntPointer): boolean
	/**  **/
	function NET_GAMESERVER_INIT_SESSION(): boolean
	/**  **/
	function NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(p0: IntPointer): boolean
	/**  **/
	function NET_GAMESERVER_START_SESSION(charSlot: int): boolean
	/**  **/
	function NET_GAMESERVER_START_SESSION_PENDING(): boolean
	/**  **/
	function NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(p0: IntPointer): boolean
	/**  **/
	function NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(p0: IntPointer): boolean
	/**  **/
	function NET_GAMESERVER_IS_SESSION_VALID(charSlot: int): boolean
	/**  **/
	function NET_GAMESERVER_CLEAR_SESSION(p0: int): boolean
	/**  **/
	function NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(charSlot: int): boolean
	/**  **/
	function NET_GAMESERVER_IS_SESSION_REFRESH_PENDING(): boolean
	/** Note: only one of the arguments can be set to true at a time **/
	function NET_GAMESERVER_START_SESSION_RESTART(inventory: boolean, playerbalance: boolean): boolean
	/**  **/
	function NET_GAMESERVER_TRANSACTION_IN_PROGRESS(): boolean
	/**  **/
	function NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(p0: IntPointer, p1: BoolPointer): boolean
	/**  **/
	function NET_GAMESERVER_BASKET_START(transactionId: IntPointer, categoryHash: Hash, actionHash: Hash, flags: int): boolean
	/**  **/
	function NET_GAMESERVER_BASKET_END(): boolean
	/**  **/
	function NET_GAMESERVER_BASKET_IS_ACTIVE(): boolean
	/**  **/
	function NET_GAMESERVER_BASKET_ADD_ITEM(itemData: Address, quantity: int): boolean
	/**  **/
	function NET_GAMESERVER_BASKET_IS_FULL(): boolean
	/**  **/
	function NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(p0: any, p1: Address): boolean
	/**  **/
	function NET_GAMESERVER_CHECKOUT_START(transactionId: int): boolean
	/**  **/
	function NET_GAMESERVER_BEGIN_SERVICE(transactionId: IntPointer, categoryHash: Hash, itemHash: Hash, actionTypeHash: Hash, value: int, flags: int): boolean
	/**  **/
	function NET_GAMESERVER_END_SERVICE(transactionId: int): boolean
	/**  **/
	function NET_GAMESERVER_DELETE_CHARACTER(slot: int, transfer: boolean, reason: Hash): boolean
	/**  **/
	function NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS(): int
	/**  **/
	function NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED(): boolean
	/**  **/
	function NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(charSlot: int, amount: int): boolean
	/**  **/
	function NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(charSlot: int, amount: int): boolean
	/** Same as 0x350AA5EBC03D3BD2 **/
	function NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS(): int
	/** Same as 0x23789E777D14CE44 **/
	function NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS(): int
	/** Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED **/
	function NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED(): boolean
	/**  **/
	function NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(p0: int): boolean
}

/** @noSelf **/
declare namespace NETWORK {
	/** Online version is defined here: update\update.rpf\common\data\version.txt
	
	Example:
	
	[ONLINE_VERSION_NUMBER]
	1.33
	
	_GET_ONLINE_VERSION() will return "1.33" **/
	function GET_ONLINE_VERSION(): string
	/** Returns whether the player is signed into Social Club. **/
	function NETWORK_IS_SIGNED_IN(): boolean
	/** Returns whether the game is not in offline mode.
	
	seemed not to work for some ppl **/
	function NETWORK_IS_SIGNED_ONLINE(): boolean
	/** This function is hard-coded to always return 1. **/
	function NETWORK_IS_NP_AVAILABLE(): boolean
	/** This function is hard-coded to always return 1. **/
	function NETWORK_IS_NP_PENDING(): boolean
	/** Hardcoded to return zero.
	
	==== PS4 specific info ====
	
	Returns some sort of unavailable reason:
	-1 = REASON_INVALID
	 0 = REASON_OTHER
	 1 = REASON_SYSTEM_UPDATE
	 2 = REASON_GAME_UPDATE
	 3 = REASON_SIGNED_OUT
	 4 = REASON_AGE
	 5 = REASON_CONNECTION
	
	================================= **/
	function NETWORK_GET_NP_UNAVAILABLE_REASON(): int
	/** This function is hard-coded to always return 1. **/
	function NETWORK_IS_CONNETED_TO_NP_PRESENCE(): boolean
	/** This function is hard-coded to always return 0. **/
	function NETWORK_IS_LOGGED_IN_TO_PSN(): boolean
	/** Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials. **/
	function NETWORK_HAS_VALID_ROS_CREDENTIALS(): boolean
	/**  **/
	function NETWORK_IS_REFRESHING_ROS_CREDENTIALS(): boolean
	/**  **/
	function NETWORK_IS_CLOUD_AVAILABLE(): boolean
	/**  **/
	function NETWORK_HAS_SOCIAL_CLUB_ACCOUNT(): boolean
	/**  **/
	function NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT(): boolean
	/** If you are host, returns true else returns false. **/
	function NETWORK_IS_HOST(): boolean
	/**  **/
	function NETWORK_GET_HOST_PLAYER_INDEX(): Player
	/**  **/
	function NETWORK_WAS_GAME_SUSPENDED(): boolean
	/**  **/
	function NETWORK_HAVE_ONLINE_PRIVILEGES(): boolean
	/**  **/
	function NETWORK_HAS_AGE_RESTRICTIONS(): boolean
	/**  **/
	function NETWORK_HAVE_USER_CONTENT_PRIVILEGES(p0: int): boolean
	/**  **/
	function NETWORK_HAVE_COMMUNICATION_PRIVILEGES(p0: int, player: Player): boolean
	/**  **/
	function NETWORK_CHECK_ONLINE_PRIVILEGES(p0: any, p1: boolean): boolean
	/**  **/
	function NETWORK_CHECK_USER_CONTENT_PRIVILEGES(p0: int, p1: int, p2: boolean): boolean
	/**  **/
	function NETWORK_CHECK_COMMUNICATION_PRIVILEGES(p0: int, p1: int, p2: boolean): boolean
	/**  **/
	function NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(p0: any, p1: any, p2: any): boolean
	/**  **/
	function NETWORK_IS_USING_ONLINE_PROMOTION(): boolean
	/**  **/
	function NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN(): boolean
	/**  **/
	function NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV(): boolean
	/**  **/
	function NETWORK_GET_AGE_GROUP(): int
	/**  **/
	function NETWORK_CHECK_PRIVILEGES(p0: any, p1: any, p2: any): boolean
	/** Hardcoded to return false. **/
	function NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS(): boolean
	/**  **/
	function NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED(): void
	/** Hardcoded to return true. **/
	function NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT(): boolean
	/**  **/
	function NETWORK_HAVE_PLATFORM_SUBSCRIPTION(): boolean
	/**  **/
	function NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING(): boolean
	/**  **/
	function NETWORK_SHOW_ACCOUNT_UPGRADE_UI(): void
	/**  **/
	function NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL(): boolean
	/**  **/
	function NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED(): boolean
	/**  **/
	function NETWORK_CAN_BAIL(): boolean
	/**  **/
	function NETWORK_BAIL(p0: int, p1: int, p2: int): void
	/**  **/
	function NETWORK_ON_RETURN_TO_SINGLE_PLAYER(): void
	/**  **/
	function NETWORK_TRANSITION_START(p0: int, p1: any, p2: any, p3: any): boolean
	/**  **/
	function NETWORK_TRANSITION_ADD_STAGE(hash: Hash, p1: int, p2: int, state: int, p4: int): boolean
	/**  **/
	function NETWORK_TRANSITION_FINISH(p0: any, p1: any, p2: any): boolean
	/** 11 - Need to download tunables.
	12 - Need to download background script.
	
	Returns 1 if the multiplayer is loaded, otherwhise 0. **/
	function NETWORK_CAN_ACCESS_MULTIPLAYER(loadingState: IntPointer): boolean
	/**  **/
	function NETWORK_IS_MULTIPLAYER_DISABLED(): boolean
	/**  **/
	function NETWORK_CAN_ENTER_MULTIPLAYER(): boolean
	/** unknown params
	
	p0 = 0, 2, or 999 (The global is 999 by default.)
	p1 = 0 (Always in every script it's found in atleast.)
	p2 = 0, 3, or 4 (Based on a var that is determined by a function.)
	p3 = maxPlayers (It's obvious in x360 scripts it's always 18)
	p4 = 0 (Always in every script it's found in atleast.)
	p5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)
	p5 is reset to 0 if,
	Global_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 && Global_1312631 = true/1) those are passed. **/
	function NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(p0: any, p1: any, p2: any, maxPlayers: int, p4: any, p5: any): boolean
	/**  **/
	function NETWORK_SESSION_DO_FRIEND_MATCHMAKING(p0: int, p1: int, maxPlayers: int, p3: boolean): boolean
	/** p4 seems to be unused in 1.60/build 2628 **/
	function NETWORK_SESSION_DO_CREW_MATCHMAKING(crewId: int, p1: int, p2: int, maxPlayers: int, p4: boolean): boolean
	/**  **/
	function NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(p0: any, p1: any, p2: any, p3: any, p4: any): boolean
	/** Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session. **/
	function NETWORK_SESSION_HOST(p0: int, maxPlayers: int, p2: boolean): boolean
	/**  **/
	function NETWORK_SESSION_HOST_CLOSED(p0: int, maxPlayers: int): boolean
	/** Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session. **/
	function NETWORK_SESSION_HOST_FRIENDS_ONLY(p0: int, maxPlayers: int): boolean
	/**  **/
	function NETWORK_SESSION_IS_CLOSED_FRIENDS(): boolean
	/**  **/
	function NETWORK_SESSION_IS_CLOSED_CREW(): boolean
	/**  **/
	function NETWORK_SESSION_IS_SOLO(): boolean
	/**  **/
	function NETWORK_SESSION_IS_PRIVATE(): boolean
	/** p0 is always false and p1 varies.
	NETWORK_SESSION_END(0, 1)
	NETWORK_SESSION_END(0, 0)
	Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later." **/
	function NETWORK_SESSION_END(p0: boolean, p1: boolean): boolean
	/**  **/
	function NETWORK_SESSION_LEAVE(p0: any): boolean
	/** Only works as host. **/
	function NETWORK_SESSION_KICK_PLAYER(player: Player): void
	/**  **/
	function NETWORK_SESSION_GET_KICK_VOTE(player: Player): boolean
	/**  **/
	function NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(p0: any, p1: any, p2: any): boolean
	/**  **/
	function NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION(): boolean
	/**  **/
	function NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION(): boolean
	/**  **/
	function NETWORK_SESSION_SET_MATCHMAKING_GROUP(matchmakingGroup: int): void
	/** playerType is an unsigned int from 0 to 4
	0 = regular joiner
	4 = spectator **/
	function NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(playerType: int, playerCount: int): void
	/**  **/
	function NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(p0: int): int
	/** groupId range: [0, 4] **/
	function NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(groupId: int): void
	/**  **/
	function NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(p0: any): void
	/**  **/
	function NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(p0: any): void
	/**  **/
	function NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(p0: boolean): void
	/**  **/
	function NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(p0: any): void
	/**  **/
	function NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(p0: boolean): void
	/**  **/
	function NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(p0: any): void
	/**  **/
	function NETWORK_SESSION_SET_NUM_BOSSES(p0: any): void
	/**  **/
	function NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN(): void
	/**  **/
	function NETWORK_SESSION_VALIDATE_JOIN(p0: boolean): void
	/** .. **/
	function NETWORK_ADD_FOLLOWERS(p0: IntPointer, p1: int): void
	/**  **/
	function NETWORK_CLEAR_FOLLOWERS(): void
	/**  **/
	function NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(hours: IntPointer, minutes: IntPointer, seconds: IntPointer): void
	/**  **/
	function NETWORK_SESSION_SET_GAMEMODE(p0: any): void
	/**  **/
	function NETWORK_SESSION_GET_HOST_AIM_PREFERENCE(): int
	/**  **/
	function NETWORK_FIND_GAMERS_IN_CREW(crewId: int): boolean
	/** Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.
	There can be up to 15 attributes, they are as follows:
	
	0 = Races
	1 = Parachuting
	2 = Horde
	3 = Darts
	4 = Arm Wrestling
	5 = Tennis
	6 = Golf
	7 = Shooting Range
	8 = Deathmatch
	9 = MPPLY_MCMWIN/MPPLY_CRMISSION **/
	function NETWORK_FIND_MATCHED_GAMERS(attribute: int, fallbackLimit: float, lowerLimit: float, upperLimit: float): boolean
	/**  **/
	function NETWORK_IS_FINDING_GAMERS(): boolean
	/**  **/
	function NETWORK_DID_FIND_GAMERS_SUCCEED(): boolean
	/**  **/
	function NETWORK_GET_NUM_FOUND_GAMERS(): int
	/**  **/
	function NETWORK_GET_FOUND_GAMER(p0: Address, p1: any): boolean
	/**  **/
	function NETWORK_CLEAR_FOUND_GAMERS(): void
	/**  **/
	function NETWORK_QUEUE_GAMER_FOR_STATUS(p0: Address): boolean
	/**  **/
	function NETWORK_GET_GAMER_STATUS_FROM_QUEUE(): boolean
	/**  **/
	function NETWORK_IS_GETTING_GAMER_STATUS(): boolean
	/**  **/
	function NETWORK_DID_GET_GAMER_STATUS_SUCCEED(): boolean
	/**  **/
	function NETWORK_GET_GAMER_STATUS_RESULT(p0: Address, p1: any): boolean
	/**  **/
	function NETWORK_CLEAR_GET_GAMER_STATUS(): void
	/**  **/
	function NETWORK_SESSION_JOIN_INVITE(): void
	/**  **/
	function NETWORK_SESSION_CANCEL_INVITE(): void
	/**  **/
	function NETWORK_SESSION_FORCE_CANCEL_INVITE(): void
	/**  **/
	function NETWORK_HAS_PENDING_INVITE(): boolean
	/**  **/
	function NETWORK_HAS_CONFIRMED_INVITE(): boolean
	/** Triggers a CEventNetworkInviteConfirmed event **/
	function NETWORK_REQUEST_INVITE_CONFIRMED_EVENT(): boolean
	/**  **/
	function NETWORK_SESSION_WAS_INVITED(): boolean
	/**  **/
	function NETWORK_SESSION_GET_INVITER(gamerHandle: Address): void
	/** Seems to be true while "Getting GTA Online session details" shows up. **/
	function NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE(): boolean
	/**  **/
	function NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION(): boolean
	/**  **/
	function NETWORK_SUPPRESS_INVITE(toggle: boolean): void
	/**  **/
	function NETWORK_BLOCK_INVITES(toggle: boolean): void
	/**  **/
	function NETWORK_BLOCK_JOIN_QUEUE_INVITES(toggle: boolean): void
	/**  **/
	function NETWORK_SET_CAN_RECEIVE_RS_INVITES(p0: boolean): void
	/**  **/
	function NETWORK_STORE_INVITE_THROUGH_RESTART(): void
	/**  **/
	function NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(p0: boolean): void
	/**  **/
	function NETWORK_SET_SCRIPT_READY_FOR_EVENTS(toggle: boolean): void
	/**  **/
	function NETWORK_IS_OFFLINE_INVITE_PENDING(): boolean
	/**  **/
	function NETWORK_CLEAR_OFFLINE_INVITE_PENDING(): void
	/** Loads up the map that is loaded when beeing in mission creator
	Player gets placed in a mix between online/offline mode
	p0 is always 2 in R* scripts.
	
	Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812 **/
	function NETWORK_SESSION_HOST_SINGLE_PLAYER(p0: int): void
	/**  **/
	function NETWORK_SESSION_LEAVE_SINGLE_PLAYER(): void
	/**  **/
	function NETWORK_IS_GAME_IN_PROGRESS(): boolean
	/**  **/
	function NETWORK_IS_SESSION_ACTIVE(): boolean
	/**  **/
	function NETWORK_IS_IN_SESSION(): boolean
	/** This checks if player is playing on gta online or not.
	Please add an if and block your mod if this is "true". **/
	function NETWORK_IS_SESSION_STARTED(): boolean
	/**  **/
	function NETWORK_IS_SESSION_BUSY(): boolean
	/**  **/
	function NETWORK_CAN_SESSION_END(): boolean
	/**  **/
	function NETWORK_GET_GAME_MODE(): int
	/**  **/
	function NETWORK_SESSION_MARK_VISIBLE(toggle: boolean): void
	/**  **/
	function NETWORK_SESSION_IS_VISIBLE(): boolean
	/**  **/
	function NETWORK_SESSION_BLOCK_JOIN_REQUESTS(toggle: boolean): void
	/**  **/
	function NETWORK_SESSION_CHANGE_SLOTS(p0: int, p1: boolean): void
	/**  **/
	function NETWORK_SESSION_GET_PRIVATE_SLOTS(): int
	/**  **/
	function NETWORK_SESSION_VOICE_HOST(): boolean
	/**  **/
	function NETWORK_SESSION_VOICE_LEAVE(): boolean
	/**  **/
	function NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(gamerHandle: Address): void
	/**  **/
	function NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(p0: boolean, p1: int): void
	/**  **/
	function NETWORK_SESSION_VOICE_SET_TIMEOUT(timeout: int): void
	/**  **/
	function NETWORK_SESSION_IS_IN_VOICE_SESSION(): boolean
	/**  **/
	function NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE(): boolean
	/**  **/
	function NETWORK_SESSION_IS_VOICE_SESSION_BUSY(): boolean
	/** Message is limited to 64 characters. **/
	function NETWORK_SEND_TEXT_MESSAGE(message: string, gamerHandle: Address): boolean
	/**  **/
	function NETWORK_SET_ACTIVITY_SPECTATOR(toggle: boolean): void
	/**  **/
	function NETWORK_IS_ACTIVITY_SPECTATOR(): boolean
	/**  **/
	function NETWORK_SET_ACTIVITY_PLAYER_MAX(p0: any): void
	/**  **/
	function NETWORK_SET_ACTIVITY_SPECTATOR_MAX(maxSpectators: int): void
	/**  **/
	function NETWORK_GET_ACTIVITY_PLAYER_NUM(p0: boolean): int
	/**  **/
	function NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(gamerHandle: Address): boolean
	/** p0: Unknown int
	p1: Unknown int
	p2: Unknown int
	p3: Unknown int
	p4: Unknown always 0 in decompiled scripts
	p5: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
	p6: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
	p7: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
	p8: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
	p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?
	
	From what I can tell it looks like it does the following:
	Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
	You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`. **/
	function NETWORK_HOST_TRANSITION(p0: int, p1: int, p2: int, p3: int, p4: any, p5: boolean, p6: boolean, p7: int, p8: any, p9: int): boolean
	/**  **/
	function NETWORK_DO_TRANSITION_QUICKMATCH(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): boolean
	/**  **/
	function NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): boolean
	/**  **/
	function NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(p0: any, p1: any, p2: any, p3: any, p4: Address, p5: any, p6: any, p7: any): boolean
	/**  **/
	function NETWORK_JOIN_GROUP_ACTIVITY(): boolean
	/**  **/
	function NETWORK_CLEAR_GROUP_ACTIVITY(): void
	/**  **/
	function NETWORK_RETAIN_ACTIVITY_GROUP(): void
	/**  **/
	function NETWORK_IS_TRANSITION_CLOSED_FRIENDS(): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_CLOSED_CREW(): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_SOLO(): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_PRIVATE(): boolean
	/**  **/
	function NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS(): int
	/**  **/
	function NETWORK_MARK_AS_PREFERRED_ACTIVITY(p0: boolean): void
	/**  **/
	function NETWORK_MARK_AS_WAITING_ASYNC(p0: boolean): void
	/**  **/
	function NETWORK_SET_IN_PROGRESS_FINISH_TIME(p0: any): void
	/**  **/
	function NETWORK_SET_TRANSITION_CREATOR_HANDLE(p0: Address): void
	/**  **/
	function NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE(): void
	/**  **/
	function NETWORK_INVITE_GAMERS_TO_TRANSITION(p0: Address, p1: any): boolean
	/**  **/
	function NETWORK_SET_GAMER_INVITED_TO_TRANSITION(gamerHandle: Address): void
	/**  **/
	function NETWORK_LEAVE_TRANSITION(): boolean
	/**  **/
	function NETWORK_LAUNCH_TRANSITION(): boolean
	/** Appears to set whether a transition should be started when the session is migrating. **/
	function NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(toggle: boolean): void
	/**  **/
	function NETWORK_CANCEL_TRANSITION_MATCHMAKING(): void
	/**  **/
	function NETWORK_BAIL_TRANSITION(p0: int, p1: int, p2: int): void
	/**  **/
	function NETWORK_DO_TRANSITION_TO_GAME(p0: boolean, maxPlayers: int): boolean
	/**  **/
	function NETWORK_DO_TRANSITION_TO_NEW_GAME(p0: boolean, maxPlayers: int, p2: boolean): boolean
	/** p2 is true 3/4 of the occurrences I found.
	'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32. **/
	function NETWORK_DO_TRANSITION_TO_FREEMODE(p0: Address, p1: any, p2: boolean, players: int, p4: boolean): boolean
	/**  **/
	function NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(p0: Address, p1: any, players: int, p3: boolean, p4: boolean, p5: boolean): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_TO_GAME(): boolean
	/** Returns count. **/
	function NETWORK_GET_TRANSITION_MEMBERS(data: Address, dataCount: int): int
	/**  **/
	function NETWORK_APPLY_TRANSITION_PARAMETER(p0: int, p1: int): void
	/**  **/
	function NETWORK_APPLY_TRANSITION_PARAMETER_STRING(p0: int, string: string, p2: boolean): void
	/**  **/
	function NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(gamerHandle: Address, p1: string, p2: int, p3: int, p4: boolean): boolean
	/**  **/
	function NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(p0: Address): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_HOST(): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_GET_TRANSITION_HOST(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_IS_IN_TRANSITION(): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_STARTED(): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_BUSY(): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_MATCHMAKING(): boolean
	/**  **/
	function NETWORK_IS_TRANSITION_LEAVE_POSTPONED(): boolean
	/**  **/
	function NETWORK_TRANSITION_SET_IN_PROGRESS(p0: any): void
	/**  **/
	function NETWORK_TRANSITION_SET_CONTENT_CREATOR(p0: any): void
	/**  **/
	function NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(p0: any): void
	/**  **/
	function NETWORK_OPEN_TRANSITION_MATCHMAKING(): void
	/**  **/
	function NETWORK_CLOSE_TRANSITION_MATCHMAKING(): void
	/**  **/
	function NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING(): boolean
	/**  **/
	function NETWORK_SET_TRANSITION_VISIBILITY_LOCK(p0: boolean, p1: boolean): void
	/**  **/
	function NETWORK_IS_TRANSITION_VISIBILITY_LOCKED(): boolean
	/**  **/
	function NETWORK_SET_TRANSITION_ACTIVITY_ID(p0: any): void
	/**  **/
	function NETWORK_CHANGE_TRANSITION_SLOTS(p0: any, p1: any): void
	/**  **/
	function NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(p0: boolean): void
	/**  **/
	function NETWORK_HAS_PLAYER_STARTED_TRANSITION(player: Player): boolean
	/**  **/
	function NETWORK_ARE_TRANSITION_DETAILS_VALID(p0: any): boolean
	/** int handle[76];
	          NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
	          Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
	          NETWORK_JOIN_TRANSITION(uVar2);
	nothing doin. **/
	function NETWORK_JOIN_TRANSITION(player: Player): boolean
	/**  **/
	function NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(p0: Address): boolean
	/**  **/
	function NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(p0: Address): boolean
	/**  **/
	function NETWORK_IS_ACTIVITY_SESSION(): boolean
	/**  **/
	function NETWORK_DISABLE_REALTIME_MULTIPLAYER(): void
	/** Does nothing. It's just a nullsub. **/
	function NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(toggle: boolean): void
	/**  **/
	function NETWORK_SEND_INVITE_VIA_PRESENCE(gamerHandle: Address, p1: string, p2: any, p3: any): boolean
	/**  **/
	function NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(gamerHandle: Address, p1: string, p2: any, p3: any): boolean
	/** Contains the string "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho. **/
	function NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(gamerHandle: Address, p1: string, p2: any, p3: any): boolean
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(p0: any): int
	/**  **/
	function NETWORK_GET_NUM_PRESENCE_INVITES(): int
	/**  **/
	function NETWORK_ACCEPT_PRESENCE_INVITE(p0: any): boolean
	/**  **/
	function NETWORK_REMOVE_PRESENCE_INVITE(p0: any): boolean
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_ID(p0: any): int
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_INVITER(p0: any): string
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_HANDLE(p0: any, p1: Address): boolean
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_SESSION_ID(p0: any): int
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(p0: any): string
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(p0: any): int
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(p0: any): int
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(p0: any): boolean
	/**  **/
	function NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(p0: any): boolean
	/**  **/
	function NETWORK_HAS_FOLLOW_INVITE(): boolean
	/**  **/
	function NETWORK_ACTION_FOLLOW_INVITE(): boolean
	/**  **/
	function NETWORK_CLEAR_FOLLOW_INVITE(): boolean
	/**  **/
	function NETWORK_REMOVE_AND_CANCEL_ALL_INVITES(): void
	/**  **/
	function NETWORK_REMOVE_TRANSITION_INVITE(p0: Address): void
	/**  **/
	function NETWORK_REMOVE_ALL_TRANSITION_INVITE(): void
	/**  **/
	function NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES(): void
	/**  **/
	function NETWORK_INVITE_GAMERS(p0: Address, p1: any, p2: Address, p3: Address): boolean
	/**  **/
	function NETWORK_HAS_INVITED_GAMER(p0: Address): boolean
	/**  **/
	function NETWORK_HAS_MADE_INVITE_DECISION(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_GET_INVITE_REPLY_STATUS(p0: any): int
	/**  **/
	function NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(p0: Address): boolean
	/**  **/
	function NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(p0: Address): boolean
	/**  **/
	function NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(p0: Address): void
	/**  **/
	function NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(p0: any, p1: Address): boolean
	/**  **/
	function NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(p0: any, p1: any): boolean
	/**  **/
	function NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(p0: Address, p1: Address): void
	/**  **/
	function FILLOUT_PM_PLAYER_LIST(gamerHandle: Address, p1: any, p2: any): boolean
	/**  **/
	function FILLOUT_PM_PLAYER_LIST_WITH_NAMES(p0: Address, p1: Address, p2: any, p3: any): boolean
	/**  **/
	function REFRESH_PLAYER_LIST_STATS(p0: int): boolean
	/**  **/
	function NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(p0: Address): boolean
	/** Hardcoded to return false. **/
	function NETWORK_IS_IN_PLATFORM_PARTY(): boolean
	/**  **/
	function NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT(): int
	/**  **/
	function NETWORK_GET_PLATFORM_PARTY_MEMBERS(data: Address, dataSize: int): int
	/** Hardcoded to return false. **/
	function NETWORK_IS_IN_PLATFORM_PARTY_CHAT(): boolean
	/** This would be nice to see if someone is in party chat, but 2 sad notes.
	1) It only becomes true if said person is speaking in that party at the time.
	2) It will never, become true unless you are in that party with said person. **/
	function NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN(): boolean
	/**  **/
	function NETWORK_IS_QUEUING_FOR_SESSION_JOIN(): boolean
	/**  **/
	function NETWORK_CLEAR_QUEUED_JOIN_REQUEST(): void
	/**  **/
	function NETWORK_SEND_QUEUED_JOIN_REQUEST(): void
	/**  **/
	function NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS(): void
	/**  **/
	function NETWORK_SEED_RANDOM_NUMBER_GENERATOR(seed: int): void
	/**  **/
	function NETWORK_GET_RANDOM_INT(): int
	/** Same as GET_RANDOM_INT_IN_RANGE **/
	function NETWORK_GET_RANDOM_INT_RANGED(rangeStart: int, rangeEnd: int): int
	/**  **/
	function NETWORK_PLAYER_IS_CHEATER(): boolean
	/**  **/
	function NETWORK_PLAYER_GET_CHEATER_REASON(): int
	/**  **/
	function NETWORK_PLAYER_IS_BADSPORT(): boolean
	/** p1 = 6 **/
	function TRIGGER_PLAYER_CRC_HACKER_CHECK(player: Player, p1: int, scriptHash: Hash): boolean
	/**  **/
	function TRIGGER_TUNING_CRC_HACKER_CHECK(player: Player, p1: string, p2: string): boolean
	/**  **/
	function TRIGGER_FILE_CRC_HACKER_CHECK(player: Player, p1: string): boolean
	/**  **/
	function REMOTE_CHEATER_PLAYER_DETECTED(player: Player, a: int, b: int): boolean
	/**  **/
	function BAD_SPORT_PLAYER_LEFT_DETECTED(gamerHandle: Address, event: int, amountReceived: int): boolean
	/**  **/
	function NETWORK_ADD_INVALID_OBJECT_MODEL(modelHash: Hash): void
	/**  **/
	function NETWORK_REMOVE_INVALID_OBJECT_MODEL(modelHash: Hash): void
	/**  **/
	function NETWORK_CLEAR_INVALID_OBJECT_MODELS(): void
	/**  **/
	function NETWORK_APPLY_PED_SCAR_DATA(ped: EntityHandle, p1: int): void
	/**  **/
	function NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(maxNumMissionParticipants: int, p1: boolean, instanceId: int): void
	/**  **/
	function NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(p0: any, p1: boolean, p2: any): boolean
	/**  **/
	function NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT(): boolean
	/**  **/
	function NETWORK_GET_MAX_NUM_PARTICIPANTS(): int
	/**  **/
	function NETWORK_GET_NUM_PARTICIPANTS(): int
	/**  **/
	function NETWORK_GET_SCRIPT_STATUS(): int
	/**  **/
	function NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(vars: IntPointer, numVars: int, debugName: string): void
	/**  **/
	function NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(vars: IntPointer, numVars: int, debugName: string): void
	/**  **/
	function NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(p0: any, p1: any, p2: any): void
	/**  **/
	function NETWORK_FINISH_BROADCASTING_DATA(): void
	/**  **/
	function NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA(): boolean
	/**  **/
	function NETWORK_GET_PLAYER_INDEX(player: Player): Player
	/**  **/
	function NETWORK_GET_PARTICIPANT_INDEX(index: int): int
	/** Returns the Player associated to a given Ped when in an online session. **/
	function NETWORK_GET_PLAYER_INDEX_FROM_PED(ped: EntityHandle): Player
	/** Returns the amount of players connected in the current session. Only works when connected to a session/server. **/
	function NETWORK_GET_NUM_CONNECTED_PLAYERS(): int
	/**  **/
	function NETWORK_IS_PLAYER_CONNECTED(player: Player): boolean
	/**  **/
	function NETWORK_GET_TOTAL_NUM_PLAYERS(): int
	/**  **/
	function NETWORK_IS_PARTICIPANT_ACTIVE(p0: int): boolean
	/**  **/
	function NETWORK_IS_PLAYER_ACTIVE(player: Player): boolean
	/**  **/
	function NETWORK_IS_PLAYER_A_PARTICIPANT(player: Player): boolean
	/**  **/
	function NETWORK_IS_HOST_OF_THIS_SCRIPT(): boolean
	/**  **/
	function NETWORK_GET_HOST_OF_THIS_SCRIPT(): Player
	/** scriptName examples:
	"freemode", "AM_CR_SecurityVan", ...
	
	Most of the time, these values are used:
	instance_id = -1
	position_hash = 0 **/
	function NETWORK_GET_HOST_OF_SCRIPT(scriptName: string, instance_id: int, position_hash: int): Player
	/**  **/
	function NETWORK_SET_MISSION_FINISHED(): void
	/**  **/
	function NETWORK_IS_SCRIPT_ACTIVE(scriptName: string, instance_id: int, p2: boolean, position_hash: int): boolean
	/**  **/
	function NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(scriptHash: Hash, p1: int, p2: boolean, p3: int): boolean
	/**  **/
	function NETWORK_IS_THREAD_A_NETWORK_SCRIPT(threadId: int): boolean
	/**  **/
	function NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(scriptName: string, instance_id: int, position_hash: int): int
	/**  **/
	function NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT(): int
	/**  **/
	function NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT(): Hash
	/**  **/
	function NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(player: Player, script: string, instance_id: int): boolean
	/**  **/
	function NETWORK_PREVENT_SCRIPT_HOST_MIGRATION(): void
	/**  **/
	function NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT(): void
	/** Return the local Participant ID **/
	function PARTICIPANT_ID(): Player
	/** Return the local Participant ID.
	
	This native is exactly the same as 'PARTICIPANT_ID' native. **/
	function PARTICIPANT_ID_TO_INT(): int
	/**  **/
	function NETWORK_GET_KILLER_OF_PLAYER(player: Player, weaponHash: Address): Player
	/**  **/
	function NETWORK_GET_DESTROYER_OF_NETWORK_ID(netId: int, weaponHash: Address): Player
	/**  **/
	function NETWORK_GET_DESTROYER_OF_ENTITY(entity: EntityHandle, weaponHash: Address): Player
	/** NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD) **/
	function NETWORK_GET_ASSISTED_KILL_OF_ENTITY(player: Player, entity: EntityHandle, p2: IntPointer): boolean
	/**  **/
	function NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(player: Player, entity: EntityHandle, p2: IntPointer): boolean
	/**  **/
	function NETWORK_GET_ENTITY_KILLER_OF_PLAYER(player: Player, weaponHash: Address): EntityHandle
	/**  **/
	function NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(missionId: string): void
	/** mpSettingSpawn:
	
	enum eMpSettingSpawn
	{
		MP_SETTING_SPAWN_NULL,
		MP_SETTING_SPAWN_PROPERTY,
		MP_SETTING_SPAWN_LAST_POSITION,
		MP_SETTING_SPAWN_GARAGE,
		MP_SETTING_SPAWN_RANDOM,
		MP_SETTING_SPAWN_PRIVATE_YACHT,
		MP_SETTING_SPAWN_OFFICE,
		MP_SETTING_SPAWN_CLUBHOUSE,
		MP_SETTING_SPAWN_IE_WAREHOUSE,
		MP_SETTING_SPAWN_BUNKER,
		MP_SETTING_SPAWN_HANGAR,
		MP_SETTING_SPAWN_DEFUNCT_BASE,
		MP_SETTING_SPAWN_NIGHTCLUB,
		MP_SETTING_SPAWN_ARENA_GARAGE,
		MP_SETTING_SPAWN_CASINO_APARTMENT,
		MP_SETTING_SPAWN_ARCADE,
		MP_SETTING_SPAWN_SUBMARINE,
		MP_SETTING_SPAWN_CAR_MEET,
		MP_SETTING_SPAWN_AUTO_SHOP,
		MP_SETTING_SPAWN_FIXER_HQ,
		MP_SETTING_SPAWN_MAX,
	}; **/
	function NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(mpSettingSpawn: Hash): void
	/** Used by MetricVEHICLE_DIST_DRIVEN **/
	function NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(toggle: boolean): void
	/**  **/
	function NETWORK_RESURRECT_LOCAL_PLAYER(x: float, y: float, z: float, heading: float, unk: boolean, changetime: boolean, p6: boolean, p7: int, p8: int): void
	/**  **/
	function NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(time: int): void
	/**  **/
	function NETWORK_IS_LOCAL_PLAYER_INVINCIBLE(): boolean
	/**  **/
	function NETWORK_DISABLE_INVINCIBLE_FLASHING(player: Player, toggle: boolean): void
	/**  **/
	function NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(ped: EntityHandle): void
	/**  **/
	function NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(toggle: boolean): void
	/**  **/
	function NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(entity: EntityHandle): boolean
	/**  **/
	function NETWORK_GET_NETWORK_ID_FROM_ENTITY(entity: EntityHandle): int
	/**  **/
	function NETWORK_GET_ENTITY_FROM_NETWORK_ID(netId: int): EntityHandle
	/**  **/
	function NETWORK_GET_ENTITY_IS_NETWORKED(entity: EntityHandle): boolean
	/**  **/
	function NETWORK_GET_ENTITY_IS_LOCAL(entity: EntityHandle): boolean
	/**  **/
	function NETWORK_REGISTER_ENTITY_AS_NETWORKED(entity: EntityHandle): void
	/**  **/
	function NETWORK_UNREGISTER_NETWORKED_ENTITY(entity: EntityHandle): void
	/**  **/
	function NETWORK_DOES_NETWORK_ID_EXIST(netId: int): boolean
	/**  **/
	function NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(netId: int): boolean
	/**  **/
	function NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netId: int): boolean
	/**  **/
	function NETWORK_HAS_CONTROL_OF_NETWORK_ID(netId: int): boolean
	/** Returns true if the specified network id is controlled by someone else. **/
	function NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(netId: int): boolean
	/**  **/
	function NETWORK_REQUEST_CONTROL_OF_ENTITY(entity: EntityHandle): boolean
	/**  **/
	function NETWORK_REQUEST_CONTROL_OF_DOOR(doorID: int): boolean
	/**  **/
	function NETWORK_HAS_CONTROL_OF_ENTITY(entity: EntityHandle): boolean
	/**  **/
	function NETWORK_HAS_CONTROL_OF_PICKUP(pickup: Pickup): boolean
	/**  **/
	function NETWORK_HAS_CONTROL_OF_DOOR(doorHash: Hash): boolean
	/**  **/
	function NETWORK_IS_DOOR_NETWORKED(doorHash: Hash): boolean
	/** calls from vehicle to net.
	 **/
	function VEH_TO_NET(vehicle: EntityHandle): int
	/** gets the network id of a ped **/
	function PED_TO_NET(ped: EntityHandle): int
	/** Lets objects spawn online simply do it like this:
	
	int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0)); **/
	function OBJ_TO_NET(object: EntityHandle): int
	/**  **/
	function NET_TO_VEH(netHandle: int): EntityHandle
	/** gets the ped id of a network id **/
	function NET_TO_PED(netHandle: int): EntityHandle
	/** gets the object id of a network id **/
	function NET_TO_OBJ(netHandle: int): EntityHandle
	/** gets the entity id of a network id **/
	function NET_TO_ENT(netHandle: int): EntityHandle
	/**  **/
	function NETWORK_GET_LOCAL_HANDLE(gamerHandle: Address, gamerHandleSize: int): void
	/**  **/
	function NETWORK_HANDLE_FROM_USER_ID(userId: string, gamerHandle: Address, gamerHandleSize: int): void
	/**  **/
	function NETWORK_HANDLE_FROM_MEMBER_ID(memberId: string, gamerHandle: Address, gamerHandleSize: int): void
	/**  **/
	function NETWORK_HANDLE_FROM_PLAYER(player: Player, gamerHandle: Address, gamerHandleSize: int): void
	/**  **/
	function NETWORK_HASH_FROM_PLAYER_HANDLE(player: Player): Hash
	/**  **/
	function NETWORK_HASH_FROM_GAMER_HANDLE(gamerHandle: Address): Hash
	/**  **/
	function NETWORK_HANDLE_FROM_FRIEND(friendIndex: int, gamerHandle: Address, gamerHandleSize: int): void
	/**  **/
	function NETWORK_GAMERTAG_FROM_HANDLE_START(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_GAMERTAG_FROM_HANDLE_PENDING(): boolean
	/**  **/
	function NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED(): boolean
	/**  **/
	function NETWORK_GET_GAMERTAG_FROM_HANDLE(gamerHandle: Address): string
	/** Hardcoded to return -1. **/
	function NETWORK_DISPLAYNAMES_FROM_HANDLES_START(p0: Address, p1: any): int
	/** This function is hard-coded to always return 0. **/
	function NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(p0: any, p1: any, p2: any): int
	/**  **/
	function NETWORK_ARE_HANDLES_THE_SAME(gamerHandle1: Address, gamerHandle2: Address): boolean
	/**  **/
	function NETWORK_IS_HANDLE_VALID(gamerHandle: Address, gamerHandleSize: int): boolean
	/**  **/
	function NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(gamerHandle: Address): Player
	/**  **/
	function NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(gamerHandle: Address): string
	/**  **/
	function NETWORK_IS_GAMER_IN_MY_SESSION(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_SHOW_PROFILE_UI(gamerHandle: Address): void
	/** Returns the name of a given player. Returns "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist. **/
	function NETWORK_PLAYER_GET_NAME(player: Player): string
	/** Returns a string of the player's Rockstar Id. 
	Takes a 24 char buffer. Returns the buffer or "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist. **/
	function NETWORK_PLAYER_GET_USERID(player: Player, userID: IntPointer): string
	/** Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.
	Returns always false in Singleplayer.
	
	No longer used for dev checks since first mods were released on PS3 & 360.
	R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,
	if that is present it will unlock dev stuff. **/
	function NETWORK_PLAYER_IS_ROCKSTAR_DEV(player: Player): boolean
	/**  **/
	function NETWORK_PLAYER_INDEX_IS_CHEATER(player: Player): boolean
	/**  **/
	function NETWORK_ENTITY_GET_OBJECT_ID(entity: EntityHandle): int
	/** I've had this return the player's ped handle sometimes, but also other random entities.
	Whatever p0 is, it's at least not synced to other players.
	At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
	But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).
	
	Returns an entity handle or -1, value changes based on p0's value. **/
	function NETWORK_GET_ENTITY_FROM_OBJECT_ID(p0: any): EntityHandle
	/**  **/
	function NETWORK_IS_INACTIVE_PROFILE(p0: Address): boolean
	/**  **/
	function NETWORK_GET_MAX_FRIENDS(): int
	/**  **/
	function NETWORK_GET_FRIEND_COUNT(): int
	/**  **/
	function NETWORK_GET_FRIEND_NAME(friendIndex: int): string
	/**  **/
	function NETWORK_GET_FRIEND_DISPLAY_NAME(friendIndex: int): string
	/**  **/
	function NETWORK_IS_FRIEND_ONLINE(name: string): boolean
	/**  **/
	function NETWORK_IS_FRIEND_HANDLE_ONLINE(gamerHandle: Address): boolean
	/** In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param. **/
	function NETWORK_IS_FRIEND_IN_SAME_TITLE(friendName: string): boolean
	/**  **/
	function NETWORK_IS_FRIEND_IN_MULTIPLAYER(friendName: string): boolean
	/**  **/
	function NETWORK_IS_FRIEND(gamerHandle: Address): boolean
	/** This function is hard-coded to always return 0. **/
	function NETWORK_IS_PENDING_FRIEND(p0: any): boolean
	/**  **/
	function NETWORK_IS_ADDING_FRIEND(): boolean
	/**  **/
	function NETWORK_ADD_FRIEND(gamerHandle: Address, message: string): boolean
	/**  **/
	function NETWORK_IS_FRIEND_INDEX_ONLINE(friendIndex: int): boolean
	/**  **/
	function NETWORK_SET_PLAYER_IS_PASSIVE(toggle: boolean): void
	/**  **/
	function NETWORK_GET_PLAYER_OWNS_WAYPOINT(player: Player): boolean
	/**  **/
	function NETWORK_CAN_SET_WAYPOINT(): boolean
	/**  **/
	function NETWORK_IGNORE_REMOTE_WAYPOINTS(): void
	/**  **/
	function NETWORK_SET_SCRIPT_AUTOMUTED(p0: any): boolean
	/**  **/
	function NETWORK_HAS_AUTOMUTE_OVERRIDE(): boolean
	/**  **/
	function NETWORK_HAS_HEADSET(): boolean
	/**  **/
	function NETWORK_SET_LOOK_AT_TALKERS(p0: boolean): void
	/**  **/
	function NETWORK_IS_PUSH_TO_TALK_ACTIVE(): boolean
	/**  **/
	function NETWORK_GAMER_HAS_HEADSET(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_IS_GAMER_TALKING(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_PERMISSIONS_HAS_GAMER_RECORD(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_CAN_COMMUNICATE_WITH_GAMER(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_CAN_TEXT_CHAT_WITH_GAMER(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_IS_GAMER_MUTED_BY_ME(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_AM_I_MUTED_BY_GAMER(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_IS_GAMER_BLOCKED_BY_ME(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_AM_I_BLOCKED_BY_GAMER(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_CAN_VIEW_GAMER_USER_CONTENT(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_CAN_SEND_LOCAL_INVITE(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_CAN_RECEIVE_LOCAL_INVITE(gamerHandle: Address): boolean
	/** returns true if someone is screaming or talking in a microphone **/
	function NETWORK_IS_PLAYER_TALKING(player: Player): boolean
	/**  **/
	function NETWORK_PLAYER_HAS_HEADSET(player: Player): boolean
	/**  **/
	function NETWORK_IS_PLAYER_MUTED_BY_ME(player: Player): boolean
	/**  **/
	function NETWORK_AM_I_MUTED_BY_PLAYER(player: Player): boolean
	/**  **/
	function NETWORK_IS_PLAYER_BLOCKED_BY_ME(player: Player): boolean
	/**  **/
	function NETWORK_AM_I_BLOCKED_BY_PLAYER(player: Player): boolean
	/**  **/
	function NETWORK_GET_PLAYER_LOUDNESS(player: Player): float
	/**  **/
	function NETWORK_SET_TALKER_PROXIMITY(value: float): void
	/**  **/
	function NETWORK_GET_TALKER_PROXIMITY(): float
	/**  **/
	function NETWORK_SET_VOICE_ACTIVE(toggle: boolean): void
	/**  **/
	function NETWORK_REMAIN_IN_GAME_CHAT(p0: boolean): void
	/**  **/
	function NETWORK_OVERRIDE_TRANSITION_CHAT(p0: boolean): void
	/**  **/
	function NETWORK_SET_TEAM_ONLY_CHAT(toggle: boolean): void
	/**  **/
	function NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(p0: any): void
	/**  **/
	function NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(p0: any, p1: any): boolean
	/**  **/
	function NETWORK_OVERRIDE_TEAM_RESTRICTIONS(team: int, toggle: boolean): void
	/**  **/
	function NETWORK_SET_OVERRIDE_SPECTATOR_MODE(toggle: boolean): void
	/**  **/
	function NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(toggle: boolean): void
	/**  **/
	function NETWORK_SET_PROXIMITY_AFFECTS_TEAM(toggle: boolean): void
	/**  **/
	function NETWORK_SET_NO_SPECTATOR_CHAT(toggle: boolean): void
	/**  **/
	function NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(toggle: boolean): void
	/** Could possibly bypass being muted or automatically muted **/
	function NETWORK_OVERRIDE_CHAT_RESTRICTIONS(player: Player, toggle: boolean): void
	/** This is used alongside the native,
	'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info. **/
	function NETWORK_OVERRIDE_SEND_RESTRICTIONS(player: Player, toggle: boolean): void
	/**  **/
	function NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(toggle: boolean): void
	/** R* uses this to hear all player when spectating. 
	It allows you to hear other online players when their chat is on none, crew and or friends **/
	function NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(player: Player, toggle: boolean): void
	/** p0 is always false in scripts. **/
	function NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(toggle: boolean): void
	/**  **/
	function NETWORK_SET_VOICE_CHANNEL(channel: int): void
	/**  **/
	function NETWORK_CLEAR_VOICE_CHANNEL(): void
	/**  **/
	function NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(x: float, y: float, z: float): void
	/**  **/
	function NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE(): void
	/**  **/
	function NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(player: Player): void
	/**  **/
	function NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(player: Player): void
	/** NETWORK_GET_M[A-U] **/
	function NETWORK_GET_MUTE_COUNT_FOR_PLAYER(p0: Player, p1: FloatPointer, p2: FloatPointer): void
	/**  **/
	function NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(toggle: boolean): void
	/** Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash. **/
	function NETWORK_TEXT_CHAT_IS_TYPING(): boolean
	/** Starts a new singleplayer game (at the prologue). **/
	function SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME(): void
	/** In singleplayer this will re-load your game.
	
	In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.
	
	You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.
	
	Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game. **/
	function SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE(): boolean
	/**  **/
	function NETWORK_SET_FRIENDLY_FIRE_OPTION(toggle: boolean): void
	/** This native does absolutely nothing, just a nullsub **/
	function NETWORK_SET_RICH_PRESENCE(p0: int, p1: int, p2: any, p3: any): void
	/** This native does absolutely nothing, just a nullsub **/
	function NETWORK_SET_RICH_PRESENCE_STRING(p0: int, textLabel: string): void
	/**  **/
	function NETWORK_GET_TIMEOUT_TIME(): int
	/** p4 and p5 are always 0 in scripts **/
	function NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(player: Player, x: float, y: float, z: float, p4: boolean, p5: boolean): void
	/**  **/
	function NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(player: Player, p1: boolean): void
	/** entity must be a valid entity; ped can be NULL **/
	function REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(entity: EntityHandle, ped: EntityHandle): void
	/**  **/
	function NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(p0: any, p1: any): void
	/**  **/
	function NETWORK_IS_ANY_PLAYER_NEAR(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): boolean
	/**  **/
	function NETWORK_CLAN_SERVICE_IS_VALID(): boolean
	/**  **/
	function NETWORK_CLAN_PLAYER_IS_ACTIVE(gamerHandle: Address): boolean
	/** bufferSize is 35 in the scripts.
	
	bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.
	
	the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
	
	https://pastebin.com/cSZniHak **/
	function NETWORK_CLAN_PLAYER_GET_DESC(clanDesc: Address, bufferSize: int, gamerHandle: Address): boolean
	/** bufferSize is 35 in the scripts. **/
	function NETWORK_CLAN_IS_ROCKSTAR_CLAN(clanDesc: Address, bufferSize: int): boolean
	/** bufferSize is 35 in the scripts. **/
	function NETWORK_CLAN_GET_UI_FORMATTED_TAG(clanDesc: Address, bufferSize: int, formattedTag: string): void
	/**  **/
	function NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT(): int
	/**  **/
	function NETWORK_CLAN_GET_MEMBERSHIP_DESC(memberDesc: Address, p1: int): boolean
	/**  **/
	function NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(gamerHandle: Address): boolean
	/**  **/
	function NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(p0: Address): boolean
	/**  **/
	function NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING(): boolean
	/**  **/
	function NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(p0: IntPointer): boolean
	/**  **/
	function NETWORK_CLAN_GET_MEMBERSHIP_COUNT(p0: IntPointer): int
	/**  **/
	function NETWORK_CLAN_GET_MEMBERSHIP_VALID(p0: IntPointer, p1: any): boolean
	/**  **/
	function NETWORK_CLAN_GET_MEMBERSHIP(p0: IntPointer, clanMembership: Address, p2: int): boolean
	/**  **/
	function NETWORK_CLAN_JOIN(clanDesc: int): boolean
	/** Only documented...
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(animDict: string, animName: string): boolean
	/**  **/
	function NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(p0: int, p1: string): boolean
	/**  **/
	function NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED(): boolean
	/**  **/
	function NETWORK_CLAN_GET_EMBLEM_TXD_NAME(netHandle: Address, txdName: string): boolean
	/**  **/
	function NETWORK_CLAN_REQUEST_EMBLEM(p0: any): boolean
	/**  **/
	function NETWORK_CLAN_IS_EMBLEM_READY(p0: any, p1: Address): boolean
	/**  **/
	function NETWORK_CLAN_RELEASE_EMBLEM(p0: any): void
	/**  **/
	function NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR(): boolean
	/**  **/
	function NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL(): void
	/**  **/
	function NETWORK_GET_PRIMARY_CLAN_DATA_START(p0: Address, p1: any): boolean
	/**  **/
	function NETWORK_GET_PRIMARY_CLAN_DATA_PENDING(): boolean
	/**  **/
	function NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS(): boolean
	/**  **/
	function NETWORK_GET_PRIMARY_CLAN_DATA_NEW(p0: Address, p1: Address): boolean
	/** Whether or not another player is allowed to take control of the entity **/
	function SET_NETWORK_ID_CAN_MIGRATE(netId: int, toggle: boolean): void
	/**  **/
	function SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(netId: int, toggle: boolean): void
	/**  **/
	function SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(netId: int, player: Player, toggle: boolean): void
	/** "No Reassign" in CPhysicalScriptGameStateDataNode **/
	function SET_NETWORK_ID_CAN_BE_REASSIGNED(netId: int, toggle: boolean): void
	/**  **/
	function NETWORK_SET_ENTITY_CAN_BLEND(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(object: EntityHandle, toggle: boolean): void
	/** if set to true other network players can't see it
	if set to false other network player can see it
	=========================================
	^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
	
	pc or last gen?
	
	^^ last-gen **/
	function NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(netId: int, p1: boolean, p2: boolean): void
	/**  **/
	function SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(netId: int, p1: boolean, p2: boolean): void
	/**  **/
	function SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(p0: any, p1: any): void
	/**  **/
	function SET_NETWORK_CUTSCENE_ENTITIES(toggle: boolean): void
	/** Getter for SET_NETWORK_CUTSCENE_ENTITIES. **/
	function ARE_CUTSCENE_ENTITIES_NETWORKED(): boolean
	/**  **/
	function SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(netId: int, state: boolean): void
	/**  **/
	function IS_NETWORK_ID_OWNED_BY_PARTICIPANT(netId: int): boolean
	/**  **/
	function SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(p0: boolean, p1: boolean): void
	/**  **/
	function SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(p0: boolean): void
	/**  **/
	function SET_LOCAL_PLAYER_VISIBLE_LOCALLY(p0: boolean): void
	/**  **/
	function SET_PLAYER_INVISIBLE_LOCALLY(player: Player, toggle: boolean): void
	/**  **/
	function SET_PLAYER_VISIBLE_LOCALLY(player: Player, toggle: boolean): void
	/** Hardcoded to not work in SP. **/
	function FADE_OUT_LOCAL_PLAYER(p0: boolean): void
	/** normal - transition like when your coming out of LSC
	slow - transition like when you walk into a mission
	  **/
	function NETWORK_FADE_OUT_ENTITY(entity: EntityHandle, normal: boolean, slow: boolean): void
	/** state - 0 does 5 fades
	state - 1 does 6 fades
	
	p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY **/
	function NETWORK_FADE_IN_ENTITY(entity: EntityHandle, state: boolean, p2: any): void
	/**  **/
	function NETWORK_IS_PLAYER_FADING(player: Player): boolean
	/**  **/
	function NETWORK_IS_ENTITY_FADING(entity: EntityHandle): boolean
	/**  **/
	function IS_PLAYER_IN_CUTSCENE(player: Player): boolean
	/**  **/
	function SET_ENTITY_VISIBLE_IN_CUTSCENE(p0: any, p1: boolean, p2: boolean): void
	/** Makes the provided entity visible for yourself for the current frame. **/
	function SET_ENTITY_LOCALLY_INVISIBLE(entity: EntityHandle): void
	/**  **/
	function SET_ENTITY_LOCALLY_VISIBLE(entity: EntityHandle): void
	/**  **/
	function IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(netID: int): boolean
	/**  **/
	function ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(netID: int, toggle: boolean): void
	/**  **/
	function IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(player: Player): boolean
	/**  **/
	function ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(player: Player, toggle: boolean): void
	/**  **/
	function IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(p0: float, p1: float, p2: float, p3: float): boolean
	/**  **/
	function IS_SPHERE_VISIBLE_TO_PLAYER(p0: any, p1: float, p2: float, p3: float, p4: float): boolean
	/**  **/
	function RESERVE_NETWORK_MISSION_OBJECTS(amount: int): void
	/**  **/
	function RESERVE_NETWORK_MISSION_PEDS(amount: int): void
	/**  **/
	function RESERVE_NETWORK_MISSION_VEHICLES(amount: int): void
	/**  **/
	function RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(amount: int): void
	/**  **/
	function RESERVE_LOCAL_NETWORK_MISSION_PEDS(amount: int): void
	/**  **/
	function RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(amount: int): void
	/**  **/
	function CAN_REGISTER_MISSION_OBJECTS(amount: int): boolean
	/**  **/
	function CAN_REGISTER_MISSION_PEDS(amount: int): boolean
	/**  **/
	function CAN_REGISTER_MISSION_VEHICLES(amount: int): boolean
	/**  **/
	function CAN_REGISTER_MISSION_PICKUPS(amount: int): boolean
	/**  **/
	function CAN_REGISTER_MISSION_DOORS(p0: any): boolean
	/**  **/
	function CAN_REGISTER_MISSION_ENTITIES(ped_amt: int, vehicle_amt: int, object_amt: int, pickup_amt: int): boolean
	/** p0 appears to be for MP **/
	function GET_NUM_RESERVED_MISSION_OBJECTS(p0: boolean, p1: any): int
	/** p0 appears to be for MP **/
	function GET_NUM_RESERVED_MISSION_PEDS(p0: boolean, p1: any): int
	/** p0 appears to be for MP **/
	function GET_NUM_RESERVED_MISSION_VEHICLES(p0: boolean, p1: any): int
	/**  **/
	function GET_NUM_CREATED_MISSION_OBJECTS(p0: boolean): int
	/**  **/
	function GET_NUM_CREATED_MISSION_PEDS(p0: boolean): int
	/**  **/
	function GET_NUM_CREATED_MISSION_VEHICLES(p0: boolean): int
	/**  **/
	function GET_RESERVED_MISSION_ENTITIES_IN_AREA(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void
	/**  **/
	function GET_MAX_NUM_NETWORK_OBJECTS(): int
	/**  **/
	function GET_MAX_NUM_NETWORK_PEDS(): int
	/**  **/
	function GET_MAX_NUM_NETWORK_VEHICLES(): int
	/**  **/
	function GET_MAX_NUM_NETWORK_PICKUPS(): int
	/**  **/
	function NETWORK_SET_OBJECT_SCOPE_DISTANCE(object: EntityHandle, range: float): void
	/**  **/
	function NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(p0: any, p1: any): void
	/** A value between 1.0 and 5.0
	
	_NETWORK_SET_TASK_CUTSCENE_PROXIMITY_SCALE? **/
	function NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(p0: any): void
	/**  **/
	function GET_NETWORK_TIME(): int
	/** Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.
	Could be used for benchmarking since it can return times in ticks. **/
	function GET_NETWORK_TIME_ACCURATE(): int
	/**  **/
	function HAS_NETWORK_TIME_STARTED(): boolean
	/** Adds the first argument to the second. **/
	function GET_TIME_OFFSET(timeA: int, timeB: int): int
	/** Subtracts the second argument from the first, then returns whether the result is negative. **/
	function IS_TIME_LESS_THAN(timeA: int, timeB: int): boolean
	/** Subtracts the first argument from the second, then returns whether the result is negative. **/
	function IS_TIME_MORE_THAN(timeA: int, timeB: int): boolean
	/** Returns true if the two times are equal; otherwise returns false. **/
	function IS_TIME_EQUAL_TO(timeA: int, timeB: int): boolean
	/** Subtracts the second argument from the first. **/
	function GET_TIME_DIFFERENCE(timeA: int, timeB: int): int
	/**  **/
	function GET_TIME_AS_STRING(time: int): string
	/** Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X). **/
	function GET_CLOUD_TIME_AS_STRING(): string
	/** Returns POSIX timestamp, an int representing the cloud time. **/
	function GET_CLOUD_TIME_AS_INT(): int
	/** Takes the specified time and writes it to the structure specified in the second argument.
	
	struct date_time
	{
	    int year;
	    int PADDING1;
	    int month;
	    int PADDING2;
	    int day;
	    int PADDING3;
	    int hour;
	    int PADDING4;
	    int minute;
	    int PADDING5;
	    int second;
	    int PADDING6;
	}; **/
	function CONVERT_POSIX_TIME(posixTime: int, timeStructure: Address): void
	/**  **/
	function NETWORK_SET_IN_SPECTATOR_MODE(toggle: boolean, playerPed: EntityHandle): void
	/**  **/
	function NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(toggle: boolean, playerPed: EntityHandle, p2: boolean): void
	/**  **/
	function NETWORK_SET_IN_FREE_CAM_MODE(toggle: boolean): void
	/**  **/
	function NETWORK_SET_ANTAGONISTIC_TO_PLAYER(toggle: boolean, player: Player): void
	/**  **/
	function NETWORK_IS_IN_SPECTATOR_MODE(): boolean
	/**  **/
	function NETWORK_SET_IN_MP_CUTSCENE(p0: boolean, p1: boolean): void
	/**  **/
	function NETWORK_IS_IN_MP_CUTSCENE(): boolean
	/**  **/
	function NETWORK_IS_PLAYER_IN_MP_CUTSCENE(player: Player): boolean
	/**  **/
	function NETWORK_HIDE_PROJECTILE_IN_CUTSCENE(): void
	/**  **/
	function SET_NETWORK_VEHICLE_RESPOT_TIMER(netId: int, time: int, p2: any, p3: any): void
	/**  **/
	function SET_NETWORK_VEHICLE_AS_GHOST(vehicle: EntityHandle, toggle: boolean): void
	/** rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel **/
	function SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(vehicle: EntityHandle, multiplier: float): void
	/** Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper). **/
	function SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_LOCAL_PLAYER_AS_GHOST(toggle: boolean, p1: boolean): void
	/**  **/
	function IS_ENTITY_A_GHOST(entity: EntityHandle): boolean
	/**  **/
	function SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(p0: boolean): void
	/** Enables ghosting between specific players **/
	function SET_REMOTE_PLAYER_AS_GHOST(player: Player, p1: boolean): void
	/** Must be a value between 1 and 254 **/
	function SET_GHOST_ALPHA(alpha: int): void
	/** Resets the entity ghost alpha to the default value (128) **/
	function RESET_GHOST_ALPHA(): void
	/**  **/
	function SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(entity: EntityHandle, p1: boolean): void
	/**  **/
	function SET_INVERT_GHOSTING(p0: boolean): void
	/**  **/
	function IS_ENTITY_IN_GHOST_COLLISION(entity: EntityHandle): boolean
	/**  **/
	function USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(toggle: boolean): void
	/**  **/
	function NETWORK_CREATE_SYNCHRONISED_SCENE(x: float, y: float, z: float, xRot: float, yRot: float, zRot: float, rotationOrder: int, useOcclusionPortal: boolean, looped: boolean, p9: float, animTime: float, p11: float): int
	/**  **/
	function NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(ped: EntityHandle, netScene: int, animDict: string, animnName: string, speed: float, speedMultiplier: float, duration: int, flag: int, playbackRate: float, p9: any): void
	/**  **/
	function NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void
	/**  **/
	function NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(entity: EntityHandle, netScene: int, animDict: string, animName: string, speed: float, speedMulitiplier: float, flag: int): void
	/** Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.
	In casino_slots it is used one time in a synced scene involving a ped and the slot machine? **/
	function NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(netScene: int, modelHash: Hash, x: float, y: float, z: float, p5: float, p6: string, p7: float, p8: float, flags: int): void
	/**  **/
	function NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(netScene: int, animDict: string, animName: string): void
	/**  **/
	function NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(netScene: int, entity: EntityHandle, bone: int): void
	/**  **/
	function NETWORK_START_SYNCHRONISED_SCENE(netScene: int): void
	/**  **/
	function NETWORK_STOP_SYNCHRONISED_SCENE(netScene: int): void
	/**  **/
	function NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(netId: int): int
	/**  **/
	function NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(netScene: int): void
	/**  **/
	function NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(p0: any): void
	/** p0 is always 0. p1 is pointing to a global. **/
	function NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(p0: int, p1: any): boolean
	/** One of the first things it does is get the players ped.
	Then it calls a function that is used in some tasks and ped based functions.
	p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts. **/
	function NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(player: Player, x: float, y: float, z: float, radius: float, p5: float, p6: float, p7: float, flags: int): boolean
	/** p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts. **/
	function NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(player: Player, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float, p8: float, p9: float, p10: float, flags: int): boolean
	/**  **/
	function NETWORK_QUERY_RESPAWN_RESULTS(p0: Address): int
	/**  **/
	function NETWORK_CANCEL_RESPAWN_SEARCH(): void
	/** Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range.. **/
	function NETWORK_GET_RESPAWN_RESULT(randomInt: int, coordinates: Vector3Pointer, heading: FloatPointer): void
	/**  **/
	function NETWORK_GET_RESPAWN_RESULT_FLAGS(p0: int): int
	/**  **/
	function NETWORK_START_SOLO_TUTORIAL_SESSION(): void
	/** teamId must be < 3, instanceId must be < 64 **/
	function NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(teamId: int, instanceId: int): void
	/**  **/
	function NETWORK_END_TUTORIAL_SESSION(): void
	/**  **/
	function NETWORK_IS_IN_TUTORIAL_SESSION(): boolean
	/**  **/
	function NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION(): boolean
	/**  **/
	function NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING(): boolean
	/**  **/
	function NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(player: Player): int
	/**  **/
	function NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(player: Player, index: int): boolean
	/**  **/
	function NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(p0: any): void
	/**  **/
	function NETWORK_CONCEAL_PLAYER(player: Player, toggle: boolean, p2: boolean): void
	/**  **/
	function NETWORK_IS_PLAYER_CONCEALED(player: Player): boolean
	/**  **/
	function NETWORK_CONCEAL_ENTITY(entity: EntityHandle, toggle: boolean): void
	/** Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct). **/
	function NETWORK_IS_ENTITY_CONCEALED(entity: EntityHandle): boolean
	/** Works in Singleplayer too.
	Passing wrong data (e.g. hours above 23) will cause the game to crash. **/
	function NETWORK_OVERRIDE_CLOCK_TIME(hours: int, minutes: int, seconds: int): void
	/**  **/
	function NETWORK_OVERRIDE_CLOCK_RATE(ms: int): void
	/**  **/
	function NETWORK_CLEAR_CLOCK_TIME_OVERRIDE(): void
	/**  **/
	function NETWORK_IS_CLOCK_TIME_OVERRIDDEN(): boolean
	/**  **/
	function NETWORK_ADD_ENTITY_AREA(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float): int
	/** To remove, see: NETWORK_REMOVE_ENTITY_AREA
	See IS_POINT_IN_ANGLED_AREA for the definition of an angled area. **/
	function NETWORK_ADD_ENTITY_ANGLED_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float): int
	/**  **/
	function NETWORK_ADD_CLIENT_ENTITY_AREA(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float): int
	/**  **/
	function NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): int
	/**  **/
	function NETWORK_REMOVE_ENTITY_AREA(p0: any): boolean
	/**  **/
	function NETWORK_ENTITY_AREA_DOES_EXIST(areaHandle: int): boolean
	/**  **/
	function NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(areaHandle: int): boolean
	/**  **/
	function NETWORK_ENTITY_AREA_IS_OCCUPIED(areaHandle: int): boolean
	/**  **/
	function NETWORK_USE_HIGH_PRECISION_BLENDING(netID: int, toggle: boolean): void
	/**  **/
	function NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(p0: any): void
	/**  **/
	function NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(p0: any, p1: any): void
	/**  **/
	function NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS(): boolean
	/**  **/
	function NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING(): boolean
	/**  **/
	function NETWORK_REQUEST_CLOUD_TUNABLES(): void
	/**  **/
	function NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING(): boolean
	/** Actually returns the version (TUNABLE_VERSION) **/
	function NETWORK_GET_TUNABLE_CLOUD_CRC(): int
	/**  **/
	function NETWORK_DOES_TUNABLE_EXIST(tunableContext: string, tunableName: string): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_INT(tunableContext: string, tunableName: string, value: IntPointer): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_FLOAT(tunableContext: string, tunableName: string, value: FloatPointer): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_BOOL(tunableContext: string, tunableName: string): boolean
	/**  **/
	function NETWORK_DOES_TUNABLE_EXIST_HASH(tunableContext: Hash, tunableName: Hash): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR(): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_INT_HASH(tunableContext: Hash, tunableName: Hash, value: IntPointer): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash: Hash, nameHash: Hash, value: IntPointer): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_FLOAT_HASH(tunableContext: Hash, tunableName: Hash, value: FloatPointer): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash: Hash, nameHash: Hash, value: FloatPointer): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_BOOL_HASH(tunableContext: Hash, tunableName: Hash): boolean
	/**  **/
	function NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash: Hash, nameHash: Hash, value: BoolPointer): boolean
	/** Returns defaultValue if the tunable doesn't exist. **/
	function NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(tunableContext: Hash, tunableName: Hash, defaultValue: boolean): boolean
	/** Return the content modifier id (the tunables context if you want) of a specific content.
	
	It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
	
	The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
	
	'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
	 **/
	function NETWORK_GET_CONTENT_MODIFIER_LIST_ID(contentHash: Hash): int
	/**  **/
	function NETWORK_GET_BONE_ID_OF_FATAL_HIT(): int
	/**  **/
	function NETWORK_RESET_BODY_TRACKER(): void
	/**  **/
	function NETWORK_GET_NUMBER_BODY_TRACKER_HITS(): int
	/**  **/
	function NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(p0: any): boolean
	/**  **/
	function NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(ped: EntityHandle, player: Player): boolean
	/** Allows vehicle wheels to be destructible even when the vehicle entity is invincible. **/
	function NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(entity: EntityHandle, toggle: boolean): void
	/** nullsub, doesn't do anything **/
	function NETWORK_SET_NO_LONGER_NEEDED(p0: any, p1: any): void
	/** In the console script dumps, this is only referenced once. 
	NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);
	
	^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
	Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
	
	am_plane_takedown.c 
	network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
	
	armenian2.c 
	network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
	
	fm_horde_controler.c
	network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
	
	fm_mission_controller.c, has 6 hits so not going to list them.
	
	Side note, setting the first parameter to 0 seems to mute sound or so?
	
	Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
	 **/
	function NETWORK_EXPLODE_VEHICLE(vehicle: EntityHandle, isAudible: boolean, isInvisible: boolean, netId: int): boolean
	/**  **/
	function NETWORK_EXPLODE_HELI(vehicle: EntityHandle, isAudible: boolean, isInvisible: boolean, netId: int): void
	/**  **/
	function NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(entity: EntityHandle): void
	/**  **/
	function NETWORK_OVERRIDE_COORDS_AND_HEADING(entity: EntityHandle, x: float, y: float, z: float, heading: float): void
	/**  **/
	function NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(p0: any, p1: any): void
	/**  **/
	function NETWORK_DISABLE_PROXIMITY_MIGRATION(netID: int): void
	/** value must be < 255 **/
	function NETWORK_SET_PROPERTY_ID(id: int): void
	/**  **/
	function NETWORK_CLEAR_PROPERTY_ID(): void
	/**  **/
	function NETWORK_SET_PLAYER_MENTAL_STATE(p0: int): void
	/**  **/
	function NETWORK_SET_MINIMUM_RANK_FOR_MISSION(p0: boolean): void
	/**  **/
	function NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA(): void
	/**  **/
	function NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(player: Player): boolean
	/**  **/
	function NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(ped: EntityHandle, player: Player): boolean
	/**  **/
	function GET_NUM_COMMERCE_ITEMS(): int
	/**  **/
	function IS_COMMERCE_DATA_VALID(): boolean
	/** Does nothing (it's a nullsub). **/
	function TRIGGER_COMMERCE_DATA_FETCH(p0: any): void
	/**  **/
	function IS_COMMERCE_DATA_FETCH_IN_PROGRESS(): boolean
	/**  **/
	function GET_COMMERCE_ITEM_ID(index: int): string
	/**  **/
	function GET_COMMERCE_ITEM_NAME(index: int): string
	/**  **/
	function GET_COMMERCE_PRODUCT_PRICE(index: int): string
	/**  **/
	function GET_COMMERCE_ITEM_NUM_CATS(index: int): int
	/** index2 is unused **/
	function GET_COMMERCE_ITEM_CAT(index: int, index2: int): string
	/**  **/
	function OPEN_COMMERCE_STORE(p0: string, p1: string, p2: int): void
	/**  **/
	function IS_COMMERCE_STORE_OPEN(): boolean
	/** Access to the store for shark cards etc... **/
	function SET_STORE_ENABLED(toggle: boolean): void
	/**  **/
	function REQUEST_COMMERCE_ITEM_IMAGE(index: int): boolean
	/**  **/
	function RELEASE_ALL_COMMERCE_ITEM_IMAGES(): void
	/**  **/
	function GET_COMMERCE_ITEM_TEXTURENAME(index: int): string
	/**  **/
	function IS_STORE_AVAILABLE_TO_USER(): boolean
	/**  **/
	function DELAY_MP_STORE_OPEN(): void
	/**  **/
	function RESET_STORE_NETWORK_GAME_TRACKING(): void
	/**  **/
	function IS_USER_OLD_ENOUGH_TO_ACCESS_STORE(): boolean
	/**  **/
	function SET_LAST_VIEWED_SHOP_ITEM(p0: Hash, p1: int, p2: Hash): void
	/** Checks some commerce stuff **/
	function GET_USER_PREMIUM_ACCESS(): int
	/** Checks some commerce stuff **/
	function GET_USER_STARTER_ACCESS(): int
	/**  **/
	function CLOUD_DELETE_MEMBER_FILE(p0: string): int
	/**  **/
	function CLOUD_HAS_REQUEST_COMPLETED(handle: int): boolean
	/**  **/
	function CLOUD_DID_REQUEST_SUCCEED(handle: int): boolean
	/** Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json **/
	function CLOUD_CHECK_AVAILABILITY(): void
	/**  **/
	function CLOUD_IS_CHECKING_AVAILABILITY(): boolean
	/**  **/
	function CLOUD_GET_AVAILABILITY_CHECK_RESULT(): boolean
	/** This function is hard-coded to always return 0. **/
	function GET_CONTENT_TO_LOAD_TYPE(): int
	/** This function is hard-coded to always return 0. **/
	function GET_IS_LAUNCH_FROM_LIVE_AREA(): boolean
	/** This function is hard-coded to always return 0. **/
	function GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT(): boolean
	/** This native does absolutely nothing, just a nullsub **/
	function CLEAR_SERVICE_EVENT_ARGUMENTS(): void
	/**  **/
	function UGC_COPY_CONTENT(p0: Address, p1: Address): boolean
	/**  **/
	function UGC_IS_CREATING(): boolean
	/**  **/
	function UGC_HAS_CREATE_FINISHED(): boolean
	/**  **/
	function UGC_DID_CREATE_SUCCEED(): boolean
	/**  **/
	function UGC_GET_CREATE_RESULT(): int
	/**  **/
	function UGC_GET_CREATE_CONTENT_ID(): string
	/**  **/
	function UGC_CLEAR_CREATE_RESULT(): void
	/**  **/
	function UGC_QUERY_MY_CONTENT(p0: any, p1: any, p2: Address, p3: any, p4: any, p5: any): boolean
	/**  **/
	function UGC_QUERY_BY_CATEGORY(p0: any, p1: any, p2: any, p3: string, p4: any, p5: boolean): boolean
	/**  **/
	function UGC_QUERY_BY_CONTENT_ID(contentId: string, latestVersion: boolean, contentTypeName: string): boolean
	/**  **/
	function UGC_QUERY_BY_CONTENT_IDS(data: Address, count: int, latestVersion: boolean, contentTypeName: string): boolean
	/**  **/
	function UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(offset: int, count: int, contentTypeName: string, p3: int): boolean
	/**  **/
	function UGC_GET_BOOKMARKED_CONTENT(p0: any, p1: any, p2: string, p3: Address): boolean
	/**  **/
	function UGC_GET_MY_CONTENT(p0: any, p1: any, p2: string, p3: Address): boolean
	/**  **/
	function UGC_GET_FRIEND_CONTENT(p0: any, p1: any, p2: string, p3: Address): boolean
	/**  **/
	function UGC_GET_CREW_CONTENT(p0: any, p1: any, p2: any, p3: string, p4: Address): boolean
	/**  **/
	function UGC_GET_GET_BY_CATEGORY(p0: any, p1: any, p2: any, p3: string, p4: Address): boolean
	/**  **/
	function UGC_GET_GET_BY_CONTENT_ID(contentId: string, contentTypeName: string): boolean
	/**  **/
	function UGC_GET_GET_BY_CONTENT_IDS(data: Address, dataCount: int, contentTypeName: string): boolean
	/**  **/
	function UGC_GET_MOST_RECENTLY_CREATED_CONTENT(p0: any, p1: any, p2: Address, p3: Address): boolean
	/**  **/
	function UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(p0: any, p1: any, p2: Address, p3: Address): boolean
	/**  **/
	function UGC_GET_TOP_RATED_CONTENT(p0: any, p1: any, p2: Address, p3: Address): boolean
	/**  **/
	function UGC_CANCEL_QUERY(): void
	/**  **/
	function UGC_IS_GETTING(): boolean
	/**  **/
	function UGC_HAS_GET_FINISHED(): boolean
	/**  **/
	function UGC_DID_GET_SUCCEED(): boolean
	/**  **/
	function UGC_WAS_QUERY_FORCE_CANCELLED(): boolean
	/**  **/
	function UGC_GET_QUERY_RESULT(): int
	/**  **/
	function UGC_GET_CONTENT_NUM(): int
	/**  **/
	function UGC_GET_CONTENT_TOTAL(): int
	/**  **/
	function UGC_GET_CONTENT_HASH(): Hash
	/**  **/
	function UGC_CLEAR_QUERY_RESULTS(): void
	/**  **/
	function UGC_GET_CONTENT_USER_ID(p0: int): string
	/**  **/
	function UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(p0: int, p1: Address): boolean
	/**  **/
	function UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(p0: any): boolean
	/**  **/
	function UGC_GET_CONTENT_USER_NAME(p0: any): string
	/**  **/
	function UGC_GET_CONTENT_IS_USING_SC_NICKNAME(p0: any): boolean
	/**  **/
	function UGC_GET_CONTENT_CATEGORY(p0: int): int
	/** Return the mission id of a job. **/
	function UGC_GET_CONTENT_ID(p0: int): string
	/** Return the root content id of a job. **/
	function UGC_GET_ROOT_CONTENT_ID(p0: int): string
	/**  **/
	function UGC_GET_CONTENT_NAME(p0: any): string
	/**  **/
	function UGC_GET_CONTENT_DESCRIPTION_HASH(p0: any): int
	/**  **/
	function UGC_GET_CONTENT_PATH(p0: int, p1: int): string
	/**  **/
	function UGC_GET_CONTENT_UPDATED_DATE(p0: any, p1: Address): void
	/**  **/
	function UGC_GET_CONTENT_FILE_VERSION(p0: any, p1: any): int
	/**  **/
	function UGC_GET_CONTENT_HAS_LO_RES_PHOTO(p0: int): boolean
	/**  **/
	function UGC_GET_CONTENT_HAS_HI_RES_PHOTO(p0: int): boolean
	/**  **/
	function UGC_GET_CONTENT_LANGUAGE(p0: any): int
	/**  **/
	function UGC_GET_CONTENT_IS_PUBLISHED(p0: any): boolean
	/**  **/
	function UGC_GET_CONTENT_IS_VERIFIED(p0: any): boolean
	/**  **/
	function UGC_GET_CONTENT_RATING(p0: any, p1: any): float
	/**  **/
	function UGC_GET_CONTENT_RATING_COUNT(p0: any, p1: any): int
	/**  **/
	function UGC_GET_CONTENT_RATING_POSITIVE_COUNT(p0: any, p1: any): int
	/**  **/
	function UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(p0: any, p1: any): int
	/**  **/
	function UGC_GET_CONTENT_HAS_PLAYER_RECORD(p0: any): boolean
	/**  **/
	function UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(p0: any): boolean
	/**  **/
	function UGC_REQUEST_CONTENT_DATA_FROM_INDEX(p0: int, p1: int): int
	/**  **/
	function UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(contentTypeName: string, contentId: string, p2: int, p3: int, p4: int): int
	/**  **/
	function UGC_REQUEST_CACHED_DESCRIPTION(p0: int): int
	/**  **/
	function UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(p0: any): boolean
	/**  **/
	function UGC_HAS_DESCRIPTION_REQUEST_FINISHED(p0: any): boolean
	/**  **/
	function UGC_DID_DESCRIPTION_REQUEST_SUCCEED(p0: any): boolean
	/**  **/
	function UGC_GET_CACHED_DESCRIPTION(p0: any, p1: any): string
	/**  **/
	function UGC_RELEASE_CACHED_DESCRIPTION(p0: any): boolean
	/**  **/
	function UGC_RELEASE_ALL_CACHED_DESCRIPTIONS(): void
	/**  **/
	function UGC_PUBLISH(contentId: string, baseContentId: string, contentTypeName: string): boolean
	/**  **/
	function UGC_SET_BOOKMARKED(contentId: string, bookmarked: boolean, contentTypeName: string): boolean
	/**  **/
	function UGC_SET_DELETED(p0: Address, p1: boolean, p2: string): boolean
	/**  **/
	function UGC_IS_MODIFYING(): boolean
	/**  **/
	function UGC_HAS_MODIFY_FINISHED(): boolean
	/**  **/
	function UGC_DID_MODIFY_SUCCEED(): boolean
	/**  **/
	function UGC_GET_MODIFY_RESULT(): int
	/**  **/
	function UGC_CLEAR_MODIFY_RESULT(): void
	/**  **/
	function UGC_GET_CREATORS_BY_USER_ID(p0: Address, p1: Address): boolean
	/**  **/
	function UGC_HAS_QUERY_CREATORS_FINISHED(): boolean
	/**  **/
	function UGC_DID_QUERY_CREATORS_SUCCEED(): boolean
	/**  **/
	function UGC_GET_CREATOR_NUM(): int
	/**  **/
	function UGC_LOAD_OFFLINE_QUERY(p0: any): boolean
	/**  **/
	function UGC_CLEAR_OFFLINE_QUERY(): void
	/**  **/
	function UGC_SET_QUERY_DATA_FROM_OFFLINE(p0: boolean): void
	/**  **/
	function UGC_SET_USING_OFFLINE_CONTENT(p0: boolean): void
	/**  **/
	function UGC_IS_LANGUAGE_SUPPORTED(p0: any): boolean
	/**  **/
	function FACEBOOK_POST_COMPLETED_HEIST(heistName: string, cashEarned: int, xpEarned: int): boolean
	/**  **/
	function FACEBOOK_POST_CREATE_CHARACTER(): boolean
	/**  **/
	function FACEBOOK_POST_COMPLETED_MILESTONE(milestoneId: int): boolean
	/**  **/
	function FACEBOOK_HAS_POST_COMPLETED(): boolean
	/**  **/
	function FACEBOOK_DID_POST_SUCCEED(): boolean
	/**  **/
	function FACEBOOK_CAN_POST_TO_FACEBOOK(): boolean
	/**  **/
	function TEXTURE_DOWNLOAD_REQUEST(gamerHandle: Address, filePath: string, name: string, p3: boolean): int
	/**  **/
	function TITLE_TEXTURE_DOWNLOAD_REQUEST(filePath: string, name: string, p2: boolean): int
	/**  **/
	function UGC_TEXTURE_DOWNLOAD_REQUEST(p0: string, p1: int, p2: int, p3: int, p4: string, p5: boolean): int
	/**  **/
	function TEXTURE_DOWNLOAD_RELEASE(p0: int): void
	/**  **/
	function TEXTURE_DOWNLOAD_HAS_FAILED(p0: int): boolean
	/**  **/
	function TEXTURE_DOWNLOAD_GET_NAME(p0: int): string
	/** 0 = succeeded
	1 = pending
	2 = failed **/
	function GET_STATUS_OF_TEXTURE_DOWNLOAD(p0: int): int
	/** Returns true if profile setting 901 is set to true and sets it to false. **/
	function NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET(): boolean
	/** Returns true if the NAT type is Strict (3) and a certain number of connections have failed. **/
	function NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING(): boolean
	/**  **/
	function NETWORK_IS_CABLE_CONNECTED(): boolean
	/**  **/
	function NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV(): boolean
	/**  **/
	function NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV(): boolean
	/**  **/
	function NETWORK_HAVE_ROS_BANNED_PRIV(): boolean
	/**  **/
	function NETWORK_HAVE_ROS_CREATE_TICKET_PRIV(): boolean
	/**  **/
	function NETWORK_HAVE_ROS_MULTIPLAYER_PRIV(): boolean
	/**  **/
	function NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV(): boolean
	/** index is always 18 in scripts **/
	function NETWORK_HAS_ROS_PRIVILEGE(index: int): boolean
	/**  **/
	function NETWORK_HAS_ROS_PRIVILEGE_END_DATE(privilege: int, banType: IntPointer, timeData: Address): boolean
	/**  **/
	function NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN(): boolean
	/**  **/
	function NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT(): boolean
	/**  **/
	function NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(p0: any): int
	/** Always returns -1. Seems to be XB1 specific. **/
	function NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(netHandle: Address): int
	/**  **/
	function NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE(): void
	/**  **/
	function NETWORK_SKIP_RADIO_RESET_NEXT_OPEN(): void
	/** Returns true if dinput8.dll is present in the game directory.
	You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game." **/
	function NETWORK_SKIP_RADIO_WARNING(): boolean
	/** NETWORK_F[I-O] **/
	function NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC(): void
	/**  **/
	function NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(toggle: boolean): void
	/**  **/
	function NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(entity: EntityHandle, toggle: boolean): void
	/** Does nothing (it's a nullsub). **/
	function NETWORK_SHOW_CHAT_RESTRICTION_MSC(player: Player): void
	/** This native does absolutely nothing, just a nullsub **/
	function NETWORK_SHOW_PSN_UGC_RESTRICTION(): void
	/** This function is hard-coded to always return 0. **/
	function NETWORK_IS_TITLE_UPDATE_REQUIRED(): boolean
	/**  **/
	function NETWORK_QUIT_MP_TO_DESKTOP(): void
	/**  **/
	function NETWORK_IS_CONNECTED_VIA_RELAY(player: Player): boolean
	/**  **/
	function NETWORK_GET_AVERAGE_LATENCY(player: Player): float
	/** Same as NETWORK_GET_AVERAGE_LATENCY **/
	function NETWORK_GET_AVERAGE_PING(player: Player): float
	/**  **/
	function NETWORK_GET_AVERAGE_PACKET_LOSS(player: Player): float
	/**  **/
	function NETWORK_GET_NUM_UNACKED_RELIABLES(player: Player): int
	/**  **/
	function NETWORK_GET_UNRELIABLE_RESEND_COUNT(player: Player): int
	/**  **/
	function NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(player: Player): int
	/**  **/
	function NETWORK_REPORT_CODE_TAMPER(): void
	/**  **/
	function NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(entity: EntityHandle): Vector3
	/** Returns the coordinates of another player.
	Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case). **/
	function NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(player: Player): Vector3
	/** Used by NetBlender **/
	function NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(entity: EntityHandle): Vector3
	/**  **/
	function NETWORK_GET_PREDICTED_VELOCITY(entity: EntityHandle): Vector3
	/** Does nothing (it's a nullsub). **/
	function NETWORK_DUMP_NET_IF_CONFIG(): void
	/** Does nothing (it's a nullsub). **/
	function NETWORK_GET_SIGNALLING_INFO(p0: Address): void
	/** Does nothing (it's a nullsub). **/
	function NETWORK_GET_NET_STATISTICS_INFO(p0: Address): void
	/**  **/
	function NETWORK_GET_PLAYER_ACCOUNT_ID(player: Player): int
	/**  **/
	function NETWORK_UGC_NAV(p0: any, p1: any): void
}

/** @noSelf **/
declare namespace OBJECT {
	/** List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini **/
	function CREATE_OBJECT(modelHash: Hash, x: float, y: float, z: float, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean): EntityHandle
	/** List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini **/
	function CREATE_OBJECT_NO_OFFSET(modelHash: Hash, x: float, y: float, z: float, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean): EntityHandle
	/** Deletes the specified object, then sets the handle pointed to by the pointer to NULL. **/
	function DELETE_OBJECT(object: Address): void
	/**  **/
	function PLACE_OBJECT_ON_GROUND_PROPERLY(object: EntityHandle): boolean
	/**  **/
	function PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(object: EntityHandle): boolean
	/**  **/
	function ROTATE_OBJECT(object: EntityHandle, p1: float, p2: float, p3: boolean): boolean
	/** Returns true if the object has finished moving.
	
	If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
	
	See also: https://gtagmodding.com/opcode-database/opcode/034E/
	Has to be looped until it returns true. **/
	function SLIDE_OBJECT(object: EntityHandle, toX: float, toY: float, toZ: float, speedX: float, speedY: float, speedZ: float, collision: boolean): boolean
	/**  **/
	function SET_OBJECT_TARGETTABLE(object: EntityHandle, targettable: boolean): void
	/** Overrides a flag on the object which determines if the object should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile. **/
	function SET_OBJECT_FORCE_VEHICLES_TO_AVOID(object: EntityHandle, toggle: boolean): void
	/** Has 8 params in the latest patches.
	
	isMission - if true doesn't return mission objects **/
	function GET_CLOSEST_OBJECT_OF_TYPE(x: float, y: float, z: float, radius: float, modelHash: Hash, isMission: boolean, p6: boolean, p7: boolean): EntityHandle
	/**  **/
	function HAS_OBJECT_BEEN_BROKEN(object: EntityHandle, p1: any): boolean
	/**  **/
	function HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(p0: float, p1: float, p2: float, p3: float, modelHash: Hash, p5: any): boolean
	/**  **/
	function HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(x: float, y: float, z: float, radius: float, modelHash: Hash, p5: boolean): boolean
	/**  **/
	function GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(p0: any): boolean
	/**  **/
	function GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(xPos: float, yPos: float, zPos: float, heading: float, xOffset: float, yOffset: float, zOffset: float): Vector3
	/**  **/
	function GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(x: float, y: float, z: float, radius: float, modelHash: Hash, outPosition: Vector3Pointer, outRotation: Vector3Pointer, rotationOrder: int): boolean
	/** Hardcoded to not work in multiplayer.
	
	
	Used to lock/unlock doors to interior areas of the game.
	
	(Possible) Door Types:
	
	https://pastebin.com/9S2m3qA4
	
	Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
	Locked means that the heading is locked.  
	p6 is always 0. 
	
	225 door types, model names and coords found in stripclub.c4:
	https://pastebin.com/gywnbzsH
	
	get door info: https://pastebin.com/i14rbekD **/
	function SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(type: Hash, x: float, y: float, z: float, locked: boolean, heading: float, p6: boolean): void
	/** locked is 0 if no door is found
	locked is 0 if door is unlocked
	locked is 1 if door is found and unlocked.
	
	-------------
	the locked bool is either 0(unlocked)(false) or 1(locked)(true) **/
	function GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(type: Hash, x: float, y: float, z: float, locked: BoolPointer, heading: FloatPointer): void
	/** Hardcoded not to work in multiplayer environments.
	When you set locked to 0 the door open and to 1 the door close
	OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open
	
	OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close **/
	function SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(modelHash: Hash, x: float, y: float, z: float, locked: boolean, xRotMult: float, yRotMult: float, zRotMult: float): void
	/**  **/
	function PLAY_OBJECT_AUTO_START_ANIM(p0: any): void
	/** doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent's in DOOR_SYSTEM_SET_DOOR_STATE.
	p5 only set to true in single player native scripts.
	If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.
	
	door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want
	All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.
	
	Example: AddDoorToSystem("PROP_43_DOOR_0", "hei_v_ilev_fh_heistdoor2", -1456.818, -520.5037, 69.67043, 0, 0, 0) **/
	function ADD_DOOR_TO_SYSTEM(doorHash: Hash, modelHash: Hash, x: float, y: float, z: float, p5: boolean, scriptDoor: boolean, isLocal: boolean): void
	/** CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
	Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled. **/
	function REMOVE_DOOR_FROM_SYSTEM(doorHash: Hash, p1: any): void
	/** Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.
	`requestDoor` on true, and when door system is configured to, i.e., "persists w/o netobj", generate a CRequestDoorEvent.
	`forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)
	Door lock states:
	0: UNLOCKED
	1: LOCKED
	2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
	3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
	4: DOORSTATE_FORCE_LOCKED_THIS_FRAME
	5: DOORSTATE_FORCE_OPEN_THIS_FRAME
	6: DOORSTATE_FORCE_CLOSED_THIS_FRAME **/
	function DOOR_SYSTEM_SET_DOOR_STATE(doorHash: Hash, state: int, requestDoor: boolean, forceUpdate: boolean): void
	/**  **/
	function DOOR_SYSTEM_GET_DOOR_STATE(doorHash: Hash): int
	/**  **/
	function DOOR_SYSTEM_GET_DOOR_PENDING_STATE(doorHash: Hash): int
	/** Includes networking check: ownership vs. or the door itself **isn't** networked.
	`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused. **/
	function DOOR_SYSTEM_SET_AUTOMATIC_RATE(doorHash: Hash, rate: float, requestDoor: boolean, forceUpdate: boolean): void
	/** `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused. **/
	function DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(doorHash: Hash, distance: float, requestDoor: boolean, forceUpdate: boolean): void
	/** Sets the ajar angle of a door.
	Ranges from -1.0 to 1.0, and 0.0 is closed / default.
	`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused. **/
	function DOOR_SYSTEM_SET_OPEN_RATIO(doorHash: Hash, ajar: float, requestDoor: boolean, forceUpdate: boolean): void
	/**  **/
	function DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(doorHash: Hash): float
	/**  **/
	function DOOR_SYSTEM_GET_OPEN_RATIO(doorHash: Hash): float
	/** Includes networking check: ownership vs. or the door itself **isn't** networked.
	`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused. **/
	function DOOR_SYSTEM_SET_SPRING_REMOVED(doorHash: Hash, removed: boolean, requestDoor: boolean, forceUpdate: boolean): void
	/** Includes networking check: ownership vs. or the door itself **isn't** networked. **/
	function DOOR_SYSTEM_SET_HOLD_OPEN(doorHash: Hash, toggle: boolean): void
	/** Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``. **/
	function DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(doorHash: Hash, p1: boolean): void
	/** if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash)) 
	{
	    OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
	} **/
	function IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash: Hash): boolean
	/**  **/
	function IS_DOOR_CLOSED(doorHash: Hash): boolean
	/**  **/
	function OPEN_ALL_BARRIERS_FOR_RACE(p0: boolean): void
	/** Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
	Related to its "Pre-networked state"? **/
	function CLOSE_ALL_BARRIERS_FOR_RACE(): void
	/**  **/
	function DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(p0: any): boolean
	/** Search radius: 0.5 **/
	function DOOR_SYSTEM_FIND_EXISTING_DOOR(x: float, y: float, z: float, modelHash: Hash, outDoorHash: Address): boolean
	/**  **/
	function IS_GARAGE_EMPTY(garageHash: Hash, p1: boolean, p2: int): boolean
	/**  **/
	function IS_PLAYER_ENTIRELY_INSIDE_GARAGE(garageHash: Hash, player: Player, p2: float, p3: int): boolean
	/**  **/
	function IS_PLAYER_PARTIALLY_INSIDE_GARAGE(garageHash: Hash, player: Player, p2: int): boolean
	/**  **/
	function ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(garageHash: Hash, p1: boolean, p2: boolean, p3: boolean, p4: any): boolean
	/**  **/
	function IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(garageHash: Hash, p1: boolean, p2: boolean, p3: boolean, p4: any): boolean
	/** Despite the name, it does work for any entity type. **/
	function IS_OBJECT_ENTIRELY_INSIDE_GARAGE(garageHash: Hash, entity: EntityHandle, p2: float, p3: int): boolean
	/** Despite the name, it does work for any entity type. **/
	function IS_OBJECT_PARTIALLY_INSIDE_GARAGE(garageHash: Hash, entity: EntityHandle, p2: int): boolean
	/**  **/
	function CLEAR_GARAGE(garageHash: Hash, isNetwork: boolean): void
	/**  **/
	function CLEAR_OBJECTS_INSIDE_GARAGE(garageHash: Hash, vehicles: boolean, peds: boolean, objects: boolean, isNetwork: boolean): void
	/** Sets a flag. A valid id is 0x157DC10D **/
	function DISABLE_TIDYING_UP_IN_GARAGE(id: int, toggle: boolean): void
	/**  **/
	function ENABLE_SAVING_IN_GARAGE(garageHash: Hash, toggle: boolean): void
	/**  **/
	function CLOSE_SAFEHOUSE_GARAGES(): void
	/** p5 is usually 0. **/
	function DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(x: float, y: float, z: float, radius: float, hash: Hash, p5: boolean): boolean
	/** An angled area is an X-Z oriented rectangle with three parameters:
	1. origin: the mid-point along a base edge of the rectangle;
	2. extent: the mid-point of opposite base edge on the other Z;
	3. width: the length of the base edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).
	
	The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:
	1. golf_mp https://i.imgur.com/JhsQAK9.png
	2. am_taxi https://i.imgur.com/TJWCZaT.jpg **/
	function IS_POINT_IN_ANGLED_AREA(xPos: float, yPos: float, zPos: float, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float, debug: boolean, includeZ: boolean): boolean
	/** Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*" **/
	function SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(object: EntityHandle, toggle: boolean): void
	/** Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
	
	Other parameters seem to be unknown.
	
	p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
	p3: seems similar to p2
	p4: makes obj fall slower the higher the value
	p5: similar to p4 **/
	function SET_OBJECT_PHYSICS_PARAMS(object: EntityHandle, weight: float, p2: float, p3: float, p4: float, p5: float, gravity: float, p7: float, p8: float, p9: float, p10: float, buoyancy: float): void
	/**  **/
	function GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(p0: any, p1: boolean): float
	/**  **/
	function SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(object: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_ANY_OBJECT_NEAR_POINT(x: float, y: float, z: float, range: float, p4: boolean): boolean
	/**  **/
	function IS_OBJECT_NEAR_POINT(objectHash: Hash, x: float, y: float, z: float, range: float): boolean
	/**  **/
	function REMOVE_OBJECT_HIGH_DETAIL_MODEL(object: EntityHandle): void
	/**  **/
	function BREAK_OBJECT_FRAGMENT_CHILD(p0: EntityHandle, p1: any, p2: boolean): void
	/**  **/
	function DAMAGE_OBJECT_FRAGMENT_CHILD(p0: any, p1: any, p2: any): void
	/**  **/
	function FIX_OBJECT_FRAGMENT(object: EntityHandle): void
	/**  **/
	function TRACK_OBJECT_VISIBILITY(object: EntityHandle): void
	/**  **/
	function IS_OBJECT_VISIBLE(object: EntityHandle): boolean
	/**  **/
	function SET_OBJECT_IS_SPECIAL_GOLFBALL(object: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(p0: any, p1: boolean): void
	/**  **/
	function ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(value: boolean): void
	/** Requires a component_at_*_flsh to be attached to the weapon object **/
	function SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(object: EntityHandle, toggle: boolean): void
	/** Example:
	OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash"); **/
	function GET_RAYFIRE_MAP_OBJECT(x: float, y: float, z: float, radius: float, name: string): EntityHandle
	/** Defines the state of a destructible object.
	Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
	State 2 == object just spawned
	State 4 == Beginning of the animation
	State 6 == Start animation
	State 9 == End of the animation **/
	function SET_STATE_OF_RAYFIRE_MAP_OBJECT(object: EntityHandle, state: int): void
	/** Get a destructible object's state.
	Substract 1 to get the real state.
	See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states
	For example, if the object just spawned (state 2), the native will return 3. **/
	function GET_STATE_OF_RAYFIRE_MAP_OBJECT(object: EntityHandle): int
	/** Returns true if a destructible object with this handle exists, false otherwise.   **/
	function DOES_RAYFIRE_MAP_OBJECT_EXIST(object: EntityHandle): boolean
	/** `object`: The des-object handle to get the animation progress from.
	Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0. **/
	function GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(object: EntityHandle): float
	/** Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function CREATE_PICKUP(pickupHash: Hash, posX: float, posY: float, posZ: float, p4: int, value: int, p6: boolean, modelHash: Hash): Pickup
	/** flags:
	8 (1 << 3): place on ground
	512 (1 << 9): spin around
	
	Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function CREATE_PICKUP_ROTATE(pickupHash: Hash, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, flag: int, amount: int, p9: any, p10: boolean, modelHash: Hash): Pickup
	/**  **/
	function FORCE_PICKUP_ROTATE_FACE_UP(): void
	/**  **/
	function SET_CUSTOM_PICKUP_WEAPON_HASH(pickupHash: Hash, pickup: Pickup): void
	/** Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function CREATE_AMBIENT_PICKUP(pickupHash: Hash, posX: float, posY: float, posZ: float, flags: int, value: int, modelHash: Hash, p7: boolean, p8: boolean): EntityHandle
	/**  **/
	function CREATE_NON_NETWORKED_AMBIENT_PICKUP(pickupHash: Hash, posX: float, posY: float, posZ: float, flags: int, value: int, modelHash: Hash, p7: boolean, p8: boolean): EntityHandle
	/**  **/
	function BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(p0: any, p1: any): void
	/** Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function CREATE_PORTABLE_PICKUP(pickupHash: Hash, x: float, y: float, z: float, placeOnGround: boolean, modelHash: Hash): EntityHandle
	/** Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function CREATE_NON_NETWORKED_PORTABLE_PICKUP(pickupHash: Hash, x: float, y: float, z: float, placeOnGround: boolean, modelHash: Hash): EntityHandle
	/**  **/
	function ATTACH_PORTABLE_PICKUP_TO_PED(pickupObject: EntityHandle, ped: EntityHandle): void
	/**  **/
	function DETACH_PORTABLE_PICKUP_FROM_PED(pickupObject: EntityHandle): void
	/**  **/
	function FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(object: EntityHandle): void
	/**  **/
	function HIDE_PORTABLE_PICKUP_WHEN_DETACHED(pickupObject: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(modelHash: Hash, number: int): void
	/**  **/
	function SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(toggle: boolean): void
	/**  **/
	function GET_SAFE_PICKUP_COORDS(x: float, y: float, z: float, p3: float, p4: float): Vector3
	/** Adds an area that seems to be related to pickup physics behavior.
	Max amount of areas is 10. Only works in multiplayer. **/
	function ADD_EXTENDED_PICKUP_PROBE_AREA(x: float, y: float, z: float, radius: float): void
	/** Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA **/
	function CLEAR_EXTENDED_PICKUP_PROBE_AREAS(): void
	/**  **/
	function GET_PICKUP_COORDS(pickup: Pickup): Vector3
	/**  **/
	function SUPPRESS_PICKUP_SOUND_FOR_PICKUP(p0: any, p1: any): void
	/** Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function REMOVE_ALL_PICKUPS_OF_TYPE(pickupHash: Hash): void
	/**  **/
	function HAS_PICKUP_BEEN_COLLECTED(pickup: Pickup): boolean
	/**  **/
	function REMOVE_PICKUP(pickup: Pickup): void
	/** Spawns one or more money pickups.
	
	x: The X-component of the world position to spawn the money pickups at.
	y: The Y-component of the world position to spawn the money pickups at.
	z: The Z-component of the world position to spawn the money pickups at.
	value: The combined value of the pickups (in dollars).
	amount: The number of pickups to spawn.
	model: The model to use, or 0 for default money model.
	
	Example:
	CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
	
	Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
	
	==============================================
	
	Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000 **/
	function CREATE_MONEY_PICKUPS(x: float, y: float, z: float, value: int, amount: int, model: Hash): void
	/**  **/
	function DOES_PICKUP_EXIST(pickup: Pickup): boolean
	/**  **/
	function DOES_PICKUP_OBJECT_EXIST(pickupObject: EntityHandle): boolean
	/**  **/
	function GET_PICKUP_OBJECT(pickup: Pickup): EntityHandle
	/**  **/
	function IS_OBJECT_A_PICKUP(object: EntityHandle): boolean
	/**  **/
	function IS_OBJECT_A_PORTABLE_PICKUP(object: EntityHandle): boolean
	/** Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(pickupHash: Hash, x: float, y: float, z: float, radius: float): boolean
	/**  **/
	function SET_PICKUP_REGENERATION_TIME(pickup: Pickup, duration: int): void
	/**  **/
	function FORCE_PICKUP_REGENERATE(p0: any): void
	/** Disabling/enabling a player from getting pickups. From the scripts:
	
	OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
	OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
	OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
	OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
	OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
	OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);
	
	Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(player: Player, pickupHash: Hash, toggle: boolean): void
	/** Maximum amount of pickup models that can be disallowed is 30. **/
	function SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(modelHash: Hash, toggle: boolean): void
	/** Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(pickupHash: Hash): void
	/**  **/
	function SET_TEAM_PICKUP_OBJECT(object: EntityHandle, p1: any, p2: boolean): void
	/**  **/
	function PREVENT_COLLECTION_OF_PORTABLE_PICKUP(object: EntityHandle, p1: boolean, p2: boolean): void
	/**  **/
	function SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(pickup: Pickup, toggle: boolean): void
	/** p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances. **/
	function SET_PICKUP_GLOW_OFFSET(pickup: Pickup, p1: float): void
	/** p1 is always -0.2 in scripts and p2 is always true in scripts. **/
	function SET_PICKUP_OBJECT_GLOW_OFFSET(pickup: Pickup, p1: float, p2: boolean): void
	/**  **/
	function SET_OBJECT_GLOW_IN_SAME_TEAM(pickup: Pickup): void
	/**  **/
	function SET_PICKUP_OBJECT_ARROW_MARKER(pickup: Pickup, toggle: boolean): void
	/**  **/
	function ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(pickup: Pickup, toggle: boolean): void
	/**  **/
	function GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(pickupHash: Hash): int
	/**  **/
	function SET_PICKUP_GENERATION_RANGE_MULTIPLIER(multiplier: float): void
	/**  **/
	function GET_PICKUP_GENERATION_RANGE_MULTIPLIER(): float
	/**  **/
	function SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(p0: boolean): void
	/**  **/
	function SET_PICKUP_UNCOLLECTABLE(pickup: Pickup, toggle: boolean): void
	/**  **/
	function SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(pickup: Pickup, toggle: boolean): void
	/**  **/
	function SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(pickup: Pickup, toggle: boolean): void
	/**  **/
	function SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(pickup: Pickup, toggle: boolean): void
	/** p0 is either 0 or 50 in scripts. **/
	function SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(p0: int): void
	/**  **/
	function SET_PORTABLE_PICKUP_PERSIST(pickup: Pickup, toggle: boolean): void
	/**  **/
	function ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(pickup: Pickup, toggle: boolean): void
	/**  **/
	function FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(pickup: Pickup, toggle: boolean): void
	/**  **/
	function ALLOW_PICKUP_BY_NONE_PARTICIPANT(pickup: Pickup, toggle: boolean): void
	/** enum ePickupRewardType
	{
	    PICKUP_REWARD_TYPE_AMMO = (1 << 0),
	    PICKUP_REWARD_TYPE_BULLET_MP = (1 << 1),
	    PICKUP_REWARD_TYPE_MISSILE_MP = (1 << 2),
	    PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 << 3),
	    PICKUP_REWARD_TYPE_ARMOUR = (1 << 4),
	    PICKUP_REWARD_TYPE_HEALTH = (1 << 5),
	    PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,
	    PICKUP_REWARD_TYPE_MONEY_FIXED = (1 << 6),
	    PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,
	    PICKUP_REWARD_TYPE_WEAPON = (1 << 7),
	    PICKUP_REWARD_TYPE_STAT = (1 << 8),
	    PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,
	    PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 << 9),
	    PICKUP_REWARD_TYPE_FIREWORK_MP = (1 << 10),
	}; **/
	function SUPPRESS_PICKUP_REWARD_TYPE(rewardType: int, suppress: boolean): void
	/**  **/
	function CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION(): void
	/**  **/
	function CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(rewardType: int): void
	/** draws circular marker at pos
	-1 = none
	0 = red
	1 = green
	2 = blue
	3 = green larger
	4 = nothing
	5 = green small **/
	function RENDER_FAKE_PICKUP_GLOW(x: float, y: float, z: float, colorIndex: int): void
	/**  **/
	function SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(pickup: Pickup): void
	/**  **/
	function SET_PICKUP_TRACK_DAMAGE_EVENTS(pickup: Pickup, toggle: boolean): void
	/** Sets entity+38 to C (when false) or 0xFF3f (when true) **/
	function SET_ENTITY_FLAG_SUPPRESS_SHADOW(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(object: EntityHandle, toggle: boolean): void
	/** Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function GET_WEAPON_TYPE_FROM_PICKUP_TYPE(pickupHash: Hash): Hash
	/** Returns the pickup hash for the given weapon hash **/
	function GET_PICKUP_TYPE_FROM_WEAPON_HASH(weaponHash: Hash): Hash
	/**  **/
	function IS_PICKUP_WEAPON_OBJECT_VALID(object: EntityHandle): boolean
	/**  **/
	function GET_OBJECT_TINT_INDEX(object: EntityHandle): int
	/** enum ObjectPaintVariants
	{
	 Pacific = 0,
	  Azure = 1,
	    Nautical = 2,
	 Continental = 3,
	  Battleship = 4,
	   Intrepid = 5,
	 Uniform = 6,
	  Classico = 7,
	 Mediterranean = 8,
	    Command = 9,
	  Mariner = 10,
	 Ruby = 11,
	    Vintage = 12,
	 Pristine = 13,
	    Merchant = 14,
	    Voyager = 15
	}; **/
	function SET_OBJECT_TINT_INDEX(object: EntityHandle, textureVariation: int): void
	/**  **/
	function SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(x: float, y: float, z: float, radius: float, modelHash: Hash, textureVariation: int): boolean
	/**  **/
	function SET_PROP_TINT_INDEX(p0: any, p1: any): void
	/**  **/
	function SET_PROP_LIGHT_COLOR(object: EntityHandle, p1: boolean, r: int, g: int, b: int): boolean
	/**  **/
	function IS_PROP_LIGHT_OVERRIDEN(object: EntityHandle): boolean
	/**  **/
	function SET_OBJECT_IS_VISIBLE_IN_MIRRORS(object: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_OBJECT_SPEED_BOOST_AMOUNT(object: EntityHandle, p1: any): void
	/**  **/
	function SET_OBJECT_SPEED_BOOST_DURATION(object: EntityHandle, duration: float): void
	/** returns pickup hash.
	
	Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json **/
	function CONVERT_OLD_PICKUP_TYPE_TO_NEW(pickupHash: Hash): Hash
	/**  **/
	function SET_FORCE_OBJECT_THIS_FRAME(x: float, y: float, z: float, p3: float): void
	/** is this like setting is as no longer needed? **/
	function ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(object: EntityHandle): void
	/**  **/
	function SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(p0: any): void
	/**  **/
	function SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(entity: EntityHandle, p1: any): void
	/** Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}" **/
	function SET_DRIVE_ARTICULATED_JOINT(object: EntityHandle, toggle: boolean, p2: int): void
	/**  **/
	function SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(object: EntityHandle, toggle: boolean, p2: int, ped: EntityHandle): void
	/**  **/
	function SET_OBJECT_IS_A_PRESSURE_PLATE(object: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(object: EntityHandle, p1: boolean): void
	/**  **/
	function GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(object: EntityHandle, p1: any): boolean
	/**  **/
	function GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(p0: any, p1: any): boolean
	/**  **/
	function SET_IS_OBJECT_ARTICULATED(object: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_IS_OBJECT_BALL(object: EntityHandle, toggle: boolean): void
}

/** @noSelf **/
declare namespace PAD {
	/** control: 0: PLAYER_CONTROL, 1: CAMERA_CONTROL, 2: FRONTEND_CONTROL
	For more info, see https://docs.fivem.net/docs/game-references/controls/ **/
	function IS_CONTROL_ENABLED(control: int, action: int): boolean
	/** Returns whether a control is currently pressed.
	control: see IS_CONTROL_ENABLED **/
	function IS_CONTROL_PRESSED(control: int, action: int): boolean
	/** Returns whether a control is currently _not_ pressed.
	control: see IS_CONTROL_ENABLED **/
	function IS_CONTROL_RELEASED(control: int, action: int): boolean
	/** Returns whether a control was newly pressed since the last check.
	control: see IS_CONTROL_ENABLED **/
	function IS_CONTROL_JUST_PRESSED(control: int, action: int): boolean
	/** Returns whether a control was newly released since the last check.
	control: see IS_CONTROL_ENABLED **/
	function IS_CONTROL_JUST_RELEASED(control: int, action: int): boolean
	/** control: see IS_CONTROL_ENABLED **/
	function GET_CONTROL_VALUE(control: int, action: int): int
	/** Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)
	
	control: see IS_CONTROL_ENABLED **/
	function GET_CONTROL_NORMAL(control: int, action: int): float
	/**  **/
	function SET_USE_ADJUSTED_MOUSE_COORDS(toggle: boolean): void
	/** Seems to return values between -1 and 1 for controls like gas and steering.
	
	control: see IS_CONTROL_ENABLED **/
	function GET_CONTROL_UNBOUND_NORMAL(control: int, action: int): float
	/** This is for simulating player input.
	value is a float value from 0 - 1
	
	control: see IS_CONTROL_ENABLED **/
	function SET_CONTROL_VALUE_NEXT_FRAME(control: int, action: int, value: float): boolean
	/** control: see IS_CONTROL_ENABLED **/
	function IS_DISABLED_CONTROL_PRESSED(control: int, action: int): boolean
	/** control: see IS_CONTROL_ENABLED **/
	function IS_DISABLED_CONTROL_RELEASED(control: int, action: int): boolean
	/** control: see IS_CONTROL_ENABLED **/
	function IS_DISABLED_CONTROL_JUST_PRESSED(control: int, action: int): boolean
	/** control: see IS_CONTROL_ENABLED **/
	function IS_DISABLED_CONTROL_JUST_RELEASED(control: int, action: int): boolean
	/** control: see IS_CONTROL_ENABLED **/
	function GET_DISABLED_CONTROL_NORMAL(control: int, action: int): float
	/** The "disabled" variant of GET_CONTROL_UNBOUND_NORMAL.
	
	control: see IS_CONTROL_ENABLED **/
	function GET_DISABLED_CONTROL_UNBOUND_NORMAL(control: int, action: int): float
	/** Returns time in ms since last input.
	
	control: see IS_CONTROL_ENABLED **/
	function GET_CONTROL_HOW_LONG_AGO(control: int): int
	/** control: unused parameter **/
	function IS_USING_KEYBOARD_AND_MOUSE(control: int): boolean
	/** control: see IS_CONTROL_ENABLED **/
	function IS_USING_CURSOR(control: int): boolean
	/**  **/
	function SET_CURSOR_POSITION(x: float, y: float): boolean
	/** control: see IS_CONTROL_ENABLED
	
	Hardcoded to return false. **/
	function IS_USING_REMOTE_PLAY(control: int): boolean
	/** control: unused parameter **/
	function HAVE_CONTROLS_CHANGED(control: int): boolean
	/** allowXOSwap appears to always be true.
	
	EG:
	GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) / *INPUT_FRONTEND_ACCEPT (e.g. Enter button)* /
	GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) / *INPUT_FRONTEND_CANCEL (e.g. ESC button)* /
	GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) / *INPUT_CONTEXT (e.g. E button)* /
	
	gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
	
	control: unused parameter **/
	function GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(control: int, action: int, allowXOSwap: boolean): string
	/** control: unused parameter **/
	function GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(control: int, controlGroup: int, allowXOSwap: boolean): string
	/** control: see IS_CONTROL_ENABLED **/
	function SET_CONTROL_LIGHT_EFFECT_COLOR(control: int, red: int, green: int, blue: int): void
	/** control: see IS_CONTROL_ENABLED **/
	function CLEAR_CONTROL_LIGHT_EFFECT(control: int): void
	/** control: see IS_CONTROL_ENABLED
	duration in milliseconds 
	frequency should range from about 10 (slow vibration) to 255 (very fast)
	
	example:
	SET_CONTROL_SHAKE(PLAYER_CONTROL, 100, 200); **/
	function SET_CONTROL_SHAKE(control: int, duration: int, frequency: int): void
	/** Does nothing (it's a nullsub). **/
	function SET_CONTROL_TRIGGER_SHAKE(control: int, leftDuration: int, leftFrequency: int, rightDuration: int, rightFrequency: int): void
	/** control: see IS_CONTROL_ENABLED **/
	function STOP_CONTROL_SHAKE(control: int): void
	/** control: see IS_CONTROL_ENABLED **/
	function SET_CONTROL_SHAKE_SUPPRESSED_ID(control: int, uniqueId: int): void
	/** control: see IS_CONTROL_ENABLED **/
	function CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(control: int): void
	/**  **/
	function IS_LOOK_INVERTED(): boolean
	/** Used with IS_LOOK_INVERTED() and negates its affect.
	
	--
	
	Not sure how the person above got that description, but here's an actual example:
	
	if (PAD::_GET_LAST_INPUT_METHOD(2)) {
	    if (a_5) {
	        if (PAD::IS_LOOK_INVERTED()) {
	            a_3 *= -1;
	        }
	        if (PAD::IS_MOUSE_LOOK_INVERTED()) {
	            a_3 *= -1;
	        }
	    }
	} **/
	function IS_MOUSE_LOOK_INVERTED(): boolean
	/** Returns the local player's targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE. **/
	function GET_LOCAL_PLAYER_AIM_STATE(): int
	/** Same behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version. **/
	function GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE(): int
	/**  **/
	function GET_IS_USING_ALTERNATE_HANDBRAKE(): boolean
	/** Returns profile setting 225. **/
	function GET_IS_USING_ALTERNATE_DRIVEBY(): boolean
	/** Returns profile setting 17. **/
	function GET_ALLOW_MOVEMENT_WHILE_ZOOMED(): boolean
	/**  **/
	function SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(toggle: boolean): void
	/** control: see IS_CONTROL_ENABLED **/
	function SET_INPUT_EXCLUSIVE(control: int, action: int): void
	/** control: see IS_CONTROL_ENABLED **/
	function DISABLE_CONTROL_ACTION(control: int, action: int, disableRelatedActions: boolean): void
	/** control: see IS_CONTROL_ENABLED **/
	function ENABLE_CONTROL_ACTION(control: int, action: int, enableRelatedActions: boolean): void
	/** control: see IS_CONTROL_ENABLED **/
	function DISABLE_ALL_CONTROL_ACTIONS(control: int): void
	/** control: see IS_CONTROL_ENABLED **/
	function ENABLE_ALL_CONTROL_ACTIONS(control: int): void
	/** Used in carsteal3 script with schemeName = "Carsteal4_spycar". **/
	function INIT_PC_SCRIPTED_CONTROLS(schemeName: string): boolean
	/** Same as INIT_PC_SCRIPTED_CONTROLS **/
	function SWITCH_PC_SCRIPTED_CONTROLS(schemeName: string): boolean
	/**  **/
	function SHUTDOWN_PC_SCRIPTED_CONTROLS(): void
	/** control: see IS_CONTROL_ENABLED **/
	function ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(control: int): void
}

/** @noSelf **/
declare namespace PATHFIND {
	/** When nodeEnabled is set to false, all nodes in the area get disabled.
	`GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
	If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false. **/
	function SET_ROADS_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, nodeEnabled: boolean, unknown2: boolean): void
	/** unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
	See IS_POINT_IN_ANGLED_AREA for the definition of an angled area. **/
	function SET_ROADS_IN_ANGLED_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float, unknown1: boolean, unknown2: boolean, unknown3: boolean): void
	/**  **/
	function SET_PED_PATHS_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, unknown: boolean, p7: any): void
	/** Flags are:
	1 = 1 = B02_IsFootpath
	2 = 4 = !B15_InteractionUnk
	4 = 0x20 = !B14_IsInterior
	8 = 0x40 = !B07_IsWater
	16 = 0x200 = B17_IsFlatGround
	When onGround == true outPosition is a position located on the nearest pavement.
	
	When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
	
	In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16. 
	
	16 works for me, 0 crashed the script. **/
	function GET_SAFE_COORD_FOR_PED(x: float, y: float, z: float, onGround: boolean, outPosition: Vector3Pointer, flags: int): boolean
	/** https://gtaforums.com/topic/843561-pathfind-node-types **/
	function GET_CLOSEST_VEHICLE_NODE(x: float, y: float, z: float, outPosition: Vector3Pointer, nodeFlags: int, p5: float, p6: float): boolean
	/** Get the closest vehicle node to a given position. **/
	function GET_CLOSEST_MAJOR_VEHICLE_NODE(x: float, y: float, z: float, outPosition: Vector3Pointer, unknown1: float, unknown2: float): boolean
	/** p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
	
	nodeType: 0 = main roads, 1 = any dry path, 3 = water
	p6 is always 3.0
	p7 is always 0
	
	gtaforums.com/topic/843561-pathfind-node-types
	
	Example of usage, moving vehicle to closest path/road:
	Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);
	Vector3 closestVehicleNodeCoords; 
	float roadHeading; 
	PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0); 
	ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);
	ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);
	VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);
	
	------------------------------------------------------------------
	C# Example (ins1de) : https://pastebin.com/fxtMWAHD **/
	function GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(x: float, y: float, z: float, outPosition: Vector3Pointer, outHeading: FloatPointer, nodeType: int, p6: float, p7: float): boolean
	/**  **/
	function GET_NTH_CLOSEST_VEHICLE_NODE(x: float, y: float, z: float, nthClosest: int, outPosition: Vector3Pointer, nodeFlags: int, unknown1: float, unknown2: float): boolean
	/** Returns the id. **/
	function GET_NTH_CLOSEST_VEHICLE_NODE_ID(x: float, y: float, z: float, nth: int, nodeFlags: int, p5: float, p6: float): int
	/** Get the nth closest vehicle node and its heading. **/
	function GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(x: float, y: float, z: float, nthClosest: int, outPosition: Vector3Pointer, outHeading: FloatPointer, outNumLanes: IntPointer, nodeFlags: int, unknown3: float, unknown4: float): boolean
	/**  **/
	function GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(x: float, y: float, z: float, nthClosest: int, outPosition: Vector3Pointer, outHeading: FloatPointer, nodeFlags: int, p7: float, p8: float): int
	/** See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
	
	p10 always equals 3.0
	p11 always equals 0 **/
	function GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(x: float, y: float, z: float, desiredX: float, desiredY: float, desiredZ: float, nthClosest: int, outPosition: Vector3Pointer, outHeading: FloatPointer, nodeFlags: int, p10: float, p11: float): boolean
	/** Gets the density and flags of the closest node to the specified position.
	Density is a value between 0 and 15, indicating how busy the road is.
	Flags is a bit field. **/
	function GET_VEHICLE_NODE_PROPERTIES(x: float, y: float, z: float, density: IntPointer, flags: IntPointer): boolean
	/** Returns true if the id is non zero. **/
	function IS_VEHICLE_NODE_ID_VALID(vehicleNodeId: int): boolean
	/** Calling this with an invalid node id, will crash the game.
	Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
	Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION(). **/
	function GET_VEHICLE_NODE_POSITION(nodeId: int, outPosition: Vector3Pointer): void
	/** Returns false for nodes that aren't used for GPS routes.
	Example:
	Nodes in Fort Zancudo and LSIA are false **/
	function GET_VEHICLE_NODE_IS_GPS_ALLOWED(nodeID: int): boolean
	/** Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
	Normal roads where plenty of Peds spawn will return false **/
	function GET_VEHICLE_NODE_IS_SWITCHED_OFF(nodeID: int): boolean
	/** p1 seems to be always 1.0f in the scripts **/
	function GET_CLOSEST_ROAD(x: float, y: float, z: float, p3: float, p4: int, p5: Vector3Pointer, p6: Vector3Pointer, p7: Address, p8: Address, p9: FloatPointer, p10: boolean): boolean
	/**  **/
	function SET_ALLOW_STREAM_PROLOGUE_NODES(toggle: boolean): void
	/** Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash. **/
	function SET_ALLOW_STREAM_HEIST_ISLAND_NODES(type: int): void
	/**  **/
	function ARE_NODES_LOADED_FOR_AREA(x1: float, y1: float, x2: float, y2: float): boolean
	/** Used internally for long range tasks **/
	function REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(x1: float, y1: float, x2: float, y2: float): boolean
	/**  **/
	function SET_ROADS_BACK_TO_ORIGINAL(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: any): void
	/** See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
	bool p7 - always 1 **/
	function SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float, p7: any): void
	/**  **/
	function SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(multiplier: float): void
	/**  **/
	function ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void
	/** p6 is always 0 **/
	function SET_PED_PATHS_BACK_TO_ORIGINAL(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, p6: any): void
	/**  **/
	function GET_RANDOM_VEHICLE_NODE(x: float, y: float, z: float, radius: float, p4: boolean, p5: boolean, p6: boolean, outPosition: Vector3Pointer, nodeId: IntPointer): boolean
	/** Determines the name of the street which is the closest to the given coordinates.
	
	x,y,z - the coordinates of the street
	streetName - returns a hash to the name of the street the coords are on
	crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
	
	Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY. **/
	function GET_STREET_NAME_AT_COORD(x: float, y: float, z: float, streetName: Address, crossingRoad: Address): void
	/** p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference
	
	distToNxJunction seems to be the distance in metres * 10.0f
	
	direction:
	0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
	1 = Route is being calculated or the player is going in the wrong direction
	2 = Please Proceed the Highlighted Route
	3 = In (distToNxJunction) Turn Left
	4 = In (distToNxJunction) Turn Right
	5 = In (distToNxJunction) Keep Straight
	6 = In (distToNxJunction) Turn Sharply To The Left
	7 = In (distToNxJunction) Turn Sharply To The Right
	8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."
	
	return value set to 0 always **/
	function GENERATE_DIRECTIONS_TO_COORD(x: float, y: float, z: float, p3: boolean, direction: IntPointer, p5: FloatPointer, distToNxJunction: FloatPointer): int
	/**  **/
	function SET_IGNORE_NO_GPS_FLAG(toggle: boolean): void
	/** See: SET_BLIP_ROUTE **/
	function SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(toggle: boolean): void
	/**  **/
	function SET_GPS_DISABLED_ZONE(x1: float, y1: float, z1: float, x2: float, y2: float, z3: float): void
	/**  **/
	function GET_GPS_BLIP_ROUTE_LENGTH(): int
	/** p3 can be 0, 1 or 2. **/
	function GET_POS_ALONG_GPS_TYPE_ROUTE(result: Vector3Pointer, p1: boolean, p2: float, p3: int): boolean
	/**  **/
	function GET_GPS_BLIP_ROUTE_FOUND(): boolean
	/**  **/
	function GET_ROAD_BOUNDARY_USING_HEADING(x: float, y: float, z: float, heading: float, outPosition: Vector3Pointer): boolean
	/**  **/
	function GET_POSITION_BY_SIDE_OF_ROAD(x: float, y: float, z: float, p3: int, outPosition: Vector3Pointer): boolean
	/** Gets a value indicating whether the specified position is on a road.
	The vehicle parameter is not implemented (ignored). **/
	function IS_POINT_ON_ROAD(x: float, y: float, z: float, vehicle: EntityHandle): boolean
	/** Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX. **/
	function GET_NEXT_GPS_DISABLED_ZONE_INDEX(): int
	/** Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
	You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.
	
	**Setting a waypoint at the same coordinate:**
	Disabled Zone: https://i.imgur.com/P9VUuxM.png
	Enabled Zone (normal): https://i.imgur.com/BPi24aw.png **/
	function SET_GPS_DISABLED_ZONE_AT_INDEX(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, index: int): void
	/** Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`. **/
	function CLEAR_GPS_DISABLED_ZONE_AT_INDEX(index: int): void
	/**  **/
	function ADD_NAVMESH_REQUIRED_REGION(x: float, y: float, radius: float): void
	/**  **/
	function REMOVE_NAVMESH_REQUIRED_REGIONS(): void
	/**  **/
	function IS_NAVMESH_REQUIRED_REGION_IN_USE(): boolean
	/** Set toggle true to disable navmesh.
	Set toggle false to enable navmesh. **/
	function DISABLE_NAVMESH_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, toggle: boolean): void
	/**  **/
	function ARE_ALL_NAVMESH_REGIONS_LOADED(): boolean
	/** Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
	
	If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes... **/
	function IS_NAVMESH_LOADED_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): boolean
	/**  **/
	function GET_NUM_NAVMESHES_EXISTING_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): int
	/**  **/
	function ADD_NAVMESH_BLOCKING_OBJECT(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float, p7: boolean, p8: any): int
	/**  **/
	function UPDATE_NAVMESH_BLOCKING_OBJECT(p0: any, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float, p7: float, p8: any): void
	/**  **/
	function REMOVE_NAVMESH_BLOCKING_OBJECT(p0: any): void
	/**  **/
	function DOES_NAVMESH_BLOCKING_OBJECT_EXIST(p0: any): boolean
	/** Returns CGameWorldHeightMap's maximum Z value at specified point (grid node). **/
	function GET_APPROX_HEIGHT_FOR_POINT(x: float, y: float): float
	/** Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle. **/
	function GET_APPROX_HEIGHT_FOR_AREA(x1: float, y1: float, x2: float, y2: float): float
	/** Returns CGameWorldHeightMap's minimum Z value at specified point (grid node). **/
	function GET_APPROX_FLOOR_FOR_POINT(x: float, y: float): float
	/** Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle. **/
	function GET_APPROX_FLOOR_FOR_AREA(x1: float, y1: float, x2: float, y2: float): float
	/** Calculates the travel distance between a set of points.
	
	Doesn't seem to correlate with distance on gps sometimes.
	This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind. **/
	function CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): float
}

/** @noSelf **/
declare namespace PED {
	/** https://alloc8or.re/gta5/doc/enums/ePedType.txt
	
	Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json **/
	function CREATE_PED(pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: boolean, bScriptHostPed: boolean): EntityHandle
	/** Deletes the specified ped, then sets the handle pointed to by the pointer to NULL. **/
	function DELETE_PED(ped: Address): void
	/**  **/
	function CLONE_PED(ped: EntityHandle, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean): EntityHandle
	/**  **/
	function CLONE_PED_ALT(ped: EntityHandle, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean, p4: boolean): EntityHandle
	/** Copies ped's components and props to targetPed. **/
	function CLONE_PED_TO_TARGET(ped: EntityHandle, targetPed: EntityHandle): void
	/**  **/
	function CLONE_PED_TO_TARGET_ALT(ped: EntityHandle, targetPed: EntityHandle, p2: boolean): void
	/** Gets a value indicating whether the specified ped is in the specified vehicle.
	
	If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible. **/
	function IS_PED_IN_VEHICLE(ped: EntityHandle, vehicle: EntityHandle, atGetIn: boolean): boolean
	/**  **/
	function IS_PED_IN_MODEL(ped: EntityHandle, modelHash: Hash): boolean
	/** Gets a value indicating whether the specified ped is in any vehicle.
	
	If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible. **/
	function IS_PED_IN_ANY_VEHICLE(ped: EntityHandle, atGetIn: boolean): boolean
	/** xyz - relative to the world origin. **/
	function IS_COP_PED_IN_AREA_3D(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): boolean
	/** Gets a value indicating whether this ped's health is below its injured threshold.
	
	The default threshold is 100. **/
	function IS_PED_INJURED(ped: EntityHandle): boolean
	/** Returns whether the specified ped is hurt. **/
	function IS_PED_HURT(ped: EntityHandle): boolean
	/** Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
	If the handle is invalid, the function returns true. **/
	function IS_PED_FATALLY_INJURED(ped: EntityHandle): boolean
	/** Seems to consistently return true if the ped is dead.
	
	p1 is always passed 1 in the scripts.
	
	I suggest to remove "OR_DYING" part, because it does not detect dying phase.
	
	That's what the devs call it, cry about it.
	
	lol **/
	function IS_PED_DEAD_OR_DYING(ped: EntityHandle, p1: boolean): boolean
	/**  **/
	function IS_CONVERSATION_PED_DEAD(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_AIMING_FROM_COVER(ped: EntityHandle): boolean
	/** Returns whether the specified ped is reloading. **/
	function IS_PED_RELOADING(ped: EntityHandle): boolean
	/** Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all. **/
	function IS_PED_A_PLAYER(ped: EntityHandle): boolean
	/** pedType: see CREATE_PED
	
	Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json **/
	function CREATE_PED_INSIDE_VEHICLE(vehicle: EntityHandle, pedType: int, modelHash: Hash, seat: int, isNetwork: boolean, bScriptHostPed: boolean): EntityHandle
	/**  **/
	function SET_PED_DESIRED_HEADING(ped: EntityHandle, heading: float): void
	/**  **/
	function FORCE_ALL_HEADING_VALUES_TO_ALIGN(ped: EntityHandle): void
	/** angle is ped's view cone **/
	function IS_PED_FACING_PED(ped: EntityHandle, otherPed: EntityHandle, angle: float): boolean
	/** Notes: The function only returns true while the ped is: 
	A.) Swinging a random melee attack (including pistol-whipping)
	
	B.) Reacting to being hit by a melee attack (including pistol-whipping)
	
	C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter). 
	
	You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds **/
	function IS_PED_IN_MELEE_COMBAT(ped: EntityHandle): boolean
	/** Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false. **/
	function IS_PED_STOPPED(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_SHOOTING_IN_AREA(ped: EntityHandle, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, p7: boolean, p8: boolean): boolean
	/**  **/
	function IS_ANY_PED_SHOOTING_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, p6: boolean, p7: boolean): boolean
	/** Returns whether the specified ped is shooting. **/
	function IS_PED_SHOOTING(ped: EntityHandle): boolean
	/** accuracy = 0-100, 100 being perfectly accurate **/
	function SET_PED_ACCURACY(ped: EntityHandle, accuracy: int): void
	/**  **/
	function GET_PED_ACCURACY(ped: EntityHandle): int
	/**  **/
	function SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(multiplier: float): void
	/**  **/
	function IS_PED_MODEL(ped: EntityHandle, modelHash: Hash): boolean
	/** Forces the ped to fall back and kills it.
	
	It doesn't really explode the ped's head but it kills the ped **/
	function EXPLODE_PED_HEAD(ped: EntityHandle, weaponHash: Hash): void
	/** Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant.. **/
	function REMOVE_PED_ELEGANTLY(ped: Address): void
	/** Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has. **/
	function ADD_ARMOUR_TO_PED(ped: EntityHandle, amount: int): void
	/** Sets the armor of the specified ped.
	
	ped: The Ped to set the armor of.
	amount: A value between 0 and 100 indicating the value to set the Ped's armor to. **/
	function SET_PED_ARMOUR(ped: EntityHandle, amount: int): void
	/** Ped: The ped to warp.
	vehicle: The vehicle to warp the ped into.
	Seat_Index: [-1 is driver seat, -2 first free passenger seat]
	
	Moreinfo of Seat Index
	DriverSeat = -1
	Passenger = 0
	Left Rear = 1
	RightRear = 2 **/
	function SET_PED_INTO_VEHICLE(ped: EntityHandle, vehicle: EntityHandle, seatIndex: int): void
	/**  **/
	function SET_PED_ALLOW_VEHICLES_OVERRIDE(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function CAN_CREATE_RANDOM_PED(unk: boolean): boolean
	/** vb.net
	Dim ped_handle As Integer
	                    With Game.Player.Character
	                        Dim pos As Vector3 = .Position + .ForwardVector * 3
	                        ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
	                    End With
	
	Creates a Ped at the specified location, returns the Ped Handle.  
	Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called. **/
	function CREATE_RANDOM_PED(posX: float, posY: float, posZ: float): EntityHandle
	/**  **/
	function CREATE_RANDOM_PED_AS_DRIVER(vehicle: EntityHandle, returnHandle: boolean): EntityHandle
	/**  **/
	function CAN_CREATE_RANDOM_DRIVER(): boolean
	/**  **/
	function CAN_CREATE_RANDOM_BIKE_RIDER(): boolean
	/**  **/
	function SET_PED_MOVE_ANIMS_BLEND_OUT(ped: EntityHandle): void
	/**  **/
	function SET_PED_CAN_BE_DRAGGED_OUT(ped: EntityHandle, toggle: boolean): void
	/** ntoggle was always false except in one instance (b678).
	
	The one time this is set to true seems to do with when you fail the mission. **/
	function SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(toggle: boolean): void
	/** Returns true/false if the ped is/isn't male. **/
	function IS_PED_MALE(ped: EntityHandle): boolean
	/** Returns true/false if the ped is/isn't humanoid. **/
	function IS_PED_HUMAN(ped: EntityHandle): boolean
	/** Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.
	If the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned. **/
	function GET_VEHICLE_PED_IS_IN(ped: EntityHandle, includeLastVehicle: boolean): EntityHandle
	/** Resets the value for the last vehicle driven by the Ped. **/
	function RESET_PED_LAST_VEHICLE(ped: EntityHandle): void
	/**  **/
	function SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: float): void
	/**  **/
	function SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(p0: float, p1: float): void
	/**  **/
	function SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME(): void
	/**  **/
	function SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(x: float, y: float, z: float): void
	/** The distance between these points, is the diagonal of a box (remember it's 3D). **/
	function SET_PED_NON_CREATION_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): void
	/**  **/
	function CLEAR_PED_NON_CREATION_AREA(): void
	/**  **/
	function INSTANTLY_FILL_PED_POPULATION(): void
	/** Same function call as PED::GET_MOUNT, aka just returns 0 **/
	function IS_PED_ON_MOUNT(ped: EntityHandle): boolean
	/** 
	Function just returns 0
	void __fastcall ped__get_mount(NativeContext *a1)
	{
	  NativeContext *v1; // rbx@1
	
	  v1 = a1;
	  GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
	  v1->Returns->Item1= 0;
	} **/
	function GET_MOUNT(ped: EntityHandle): EntityHandle
	/** Gets a value indicating whether the specified ped is on top of any vehicle.
	
	Return 1 when ped is on vehicle.
	Return 0 when ped is not on a vehicle.
	 **/
	function IS_PED_ON_VEHICLE(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_ON_SPECIFIC_VEHICLE(ped: EntityHandle, vehicle: EntityHandle): boolean
	/** Maximum possible amount of money on MP is 2000. ~JX
	
	-----------------------------------------------------------------------------
	
	Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value. **/
	function SET_PED_MONEY(ped: EntityHandle, amount: int): void
	/**  **/
	function GET_PED_MONEY(ped: EntityHandle): int
	/** Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate **/
	function SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(p0: float, p1: any): void
	/**  **/
	function SET_AMBIENT_PEDS_DROP_MONEY(p0: boolean): void
	/**  **/
	function SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(p0: boolean): void
	/** Ped no longer takes critical damage modifiers if set to FALSE.
	Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot. **/
	function SET_PED_SUFFERS_CRITICAL_HITS(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_UPPER_BODY_DAMAGE_ONLY(ped: EntityHandle, toggle: boolean): void
	/** Detect if ped is sitting in the specified vehicle
	[True/False] **/
	function IS_PED_SITTING_IN_VEHICLE(ped: EntityHandle, vehicle: EntityHandle): boolean
	/** Detect if ped is in any vehicle
	[True/False] **/
	function IS_PED_SITTING_IN_ANY_VEHICLE(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_ON_FOOT(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_ON_ANY_BIKE(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_PLANTING_BOMB(ped: EntityHandle): boolean
	/**  **/
	function GET_DEAD_PED_PICKUP_COORDS(ped: EntityHandle, p1: float, p2: float): Vector3
	/**  **/
	function IS_PED_IN_ANY_BOAT(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_IN_ANY_SUB(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_IN_ANY_HELI(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_IN_ANY_PLANE(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_IN_FLYING_VEHICLE(ped: EntityHandle): boolean
	/**  **/
	function SET_PED_DIES_IN_WATER(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_PED_DIES_IN_WATER(ped: EntityHandle): boolean
	/**  **/
	function SET_PED_DIES_IN_SINKING_VEHICLE(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_PED_ARMOUR(ped: EntityHandle): int
	/**  **/
	function SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_BE_SHOT_IN_VEHICLE(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_PED_LAST_DAMAGE_BONE(ped: EntityHandle, outBone: IntPointer): boolean
	/**  **/
	function CLEAR_PED_LAST_DAMAGE_BONE(ped: EntityHandle): void
	/**  **/
	function SET_AI_WEAPON_DAMAGE_MODIFIER(value: float): void
	/**  **/
	function RESET_AI_WEAPON_DAMAGE_MODIFIER(): void
	/**  **/
	function SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(modifier: float): void
	/**  **/
	function RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(): void
	/**  **/
	function SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(ped: EntityHandle, p1: boolean): void
	/**  **/
	function SET_PED_CAN_BE_TARGETTED(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_BE_TARGETTED_BY_TEAM(ped: EntityHandle, team: int, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_BE_TARGETTED_BY_PLAYER(ped: EntityHandle, player: Player, toggle: boolean): void
	/**  **/
	function SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_PED_IN_ANY_POLICE_VEHICLE(ped: EntityHandle): boolean
	/**  **/
	function FORCE_PED_TO_OPEN_PARACHUTE(ped: EntityHandle): void
	/**  **/
	function IS_PED_IN_PARACHUTE_FREE_FALL(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_FALLING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_JUMPING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_LANDING(p0: any): boolean
	/**  **/
	function IS_PED_DOING_A_BEAST_JUMP(p0: any): boolean
	/**  **/
	function IS_PED_CLIMBING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_VAULTING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_DIVING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_JUMPING_OUT_OF_VEHICLE(ped: EntityHandle): boolean
	/** Returns true if the ped is currently opening a door (CTaskOpenDoor). **/
	function IS_PED_OPENING_DOOR(ped: EntityHandle): boolean
	/** Returns:
	
	-1: Normal
	0: Wearing parachute on back
	1: Parachute opening
	2: Parachute open
	3: Falling to doom (e.g. after exiting parachute)
	
	Normal means no parachute? **/
	function GET_PED_PARACHUTE_STATE(ped: EntityHandle): int
	/** -1: no landing
	0: landing on both feet
	1: stumbling
	2: rolling
	3: ragdoll **/
	function GET_PED_PARACHUTE_LANDING_TYPE(ped: EntityHandle): int
	/**  **/
	function SET_PED_PARACHUTE_TINT_INDEX(ped: EntityHandle, tintIndex: int): void
	/**  **/
	function GET_PED_PARACHUTE_TINT_INDEX(ped: EntityHandle, outTintIndex: IntPointer): void
	/**  **/
	function SET_PED_RESERVE_PARACHUTE_TINT_INDEX(ped: EntityHandle, p1: any): void
	/**  **/
	function CREATE_PARACHUTE_BAG_OBJECT(ped: EntityHandle, p1: boolean, p2: boolean): EntityHandle
	/** This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false. **/
	function SET_PED_DUCKING(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_PED_DUCKING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_IN_ANY_TAXI(ped: EntityHandle): boolean
	/**  **/
	function SET_PED_ID_RANGE(ped: EntityHandle, value: float): void
	/**  **/
	function SET_PED_HIGHLY_PERCEPTIVE(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_COP_PERCEPTION_OVERRIDES(seeingRange: float, seeingRangePeripheral: float, hearingRange: float, visualFieldMinAzimuthAngle: float, visualFieldMaxAzimuthAngle: float, fieldOfGazeMaxAngle: float, p6: float): void
	/**  **/
	function SET_PED_INJURED_ON_GROUND_BEHAVIOUR(ped: EntityHandle, unk: float): void
	/**  **/
	function DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(ped: EntityHandle): void
	/**  **/
	function SET_PED_SEEING_RANGE(ped: EntityHandle, value: float): void
	/**  **/
	function SET_PED_HEARING_RANGE(ped: EntityHandle, value: float): void
	/**  **/
	function SET_PED_VISUAL_FIELD_MIN_ANGLE(ped: EntityHandle, value: float): void
	/**  **/
	function SET_PED_VISUAL_FIELD_MAX_ANGLE(ped: EntityHandle, value: float): void
	/** This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
	-90f should let the ped see 90 degrees below them, for example. **/
	function SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(ped: EntityHandle, angle: float): void
	/** This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them. **/
	function SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(ped: EntityHandle, angle: float): void
	/**  **/
	function SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(ped: EntityHandle, range: float): void
	/**  **/
	function SET_PED_VISUAL_FIELD_CENTER_ANGLE(ped: EntityHandle, angle: float): void
	/**  **/
	function GET_PED_VISUAL_FIELD_CENTER_ANGLE(ped: EntityHandle): float
	/** p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION". **/
	function SET_PED_STEALTH_MOVEMENT(ped: EntityHandle, p1: boolean, action: string): void
	/** Returns whether the entity is in stealth mode **/
	function GET_PED_STEALTH_MOVEMENT(ped: EntityHandle): boolean
	/** Creates a new ped group.
	Groups can contain up to 8 peds.
	
	The parameter is unused.
	
	Returns a handle to the created group, or 0 if a group couldn't be created. **/
	function CREATE_GROUP(unused: int): int
	/**  **/
	function SET_PED_AS_GROUP_LEADER(ped: EntityHandle, groupId: int): void
	/**  **/
	function SET_PED_AS_GROUP_MEMBER(ped: EntityHandle, groupId: int): void
	/** This only will teleport the ped to the group leader if the group leader teleports (sets coords).
	
	Only works in singleplayer **/
	function SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(pedHandle: EntityHandle, groupHandle: int, toggle: boolean): void
	/**  **/
	function REMOVE_GROUP(groupId: int): void
	/**  **/
	function REMOVE_PED_FROM_GROUP(ped: EntityHandle): void
	/**  **/
	function IS_PED_GROUP_MEMBER(ped: EntityHandle, groupId: int): boolean
	/**  **/
	function IS_PED_HANGING_ON_TO_VEHICLE(ped: EntityHandle): boolean
	/** Sets the range at which members will automatically leave the group. **/
	function SET_GROUP_SEPARATION_RANGE(groupHandle: int, separationRange: float): void
	/** Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds) **/
	function SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(ped: EntityHandle, ms: int): void
	/**  **/
	function IS_PED_PRONE(ped: EntityHandle): boolean
	/** Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
	
	p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4/ *14* /], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794 **/
	function IS_PED_IN_COMBAT(ped: EntityHandle, target: EntityHandle): boolean
	/**  **/
	function GET_PED_TARGET_FROM_COMBAT_PED(ped: EntityHandle, p1: any): EntityHandle
	/**  **/
	function CAN_PED_IN_COMBAT_SEE_TARGET(ped: EntityHandle, target: EntityHandle): boolean
	/**  **/
	function IS_PED_DOING_DRIVEBY(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_JACKING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_BEING_JACKED(ped: EntityHandle): boolean
	/** p1 is always 0 **/
	function IS_PED_BEING_STUNNED(ped: EntityHandle, p1: int): boolean
	/**  **/
	function GET_PEDS_JACKER(ped: EntityHandle): EntityHandle
	/**  **/
	function GET_JACK_TARGET(ped: EntityHandle): EntityHandle
	/**  **/
	function IS_PED_FLEEING(ped: EntityHandle): boolean
	/** p1 is nearly always 0 in the scripts.  **/
	function IS_PED_IN_COVER(ped: EntityHandle, exceptUseWeapon: boolean): boolean
	/**  **/
	function IS_PED_IN_COVER_FACING_LEFT(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_IN_HIGH_COVER(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_GOING_INTO_COVER(ped: EntityHandle): boolean
	/** i could be time. Only example in the decompiled scripts uses it as -1. **/
	function SET_PED_PINNED_DOWN(ped: EntityHandle, pinned: boolean, i: int): boolean
	/**  **/
	function GET_SEAT_PED_IS_TRYING_TO_ENTER(ped: EntityHandle): int
	/**  **/
	function GET_VEHICLE_PED_IS_TRYING_TO_ENTER(ped: EntityHandle): EntityHandle
	/** Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
	
	Is best to check if the Ped is dead before asking for its killer. **/
	function GET_PED_SOURCE_OF_DEATH(ped: EntityHandle): EntityHandle
	/** Returns the hash of the weapon/model/object that killed the ped. **/
	function GET_PED_CAUSE_OF_DEATH(ped: EntityHandle): Hash
	/**  **/
	function GET_PED_TIME_OF_DEATH(ped: EntityHandle): int
	/**  **/
	function COUNT_PEDS_IN_COMBAT_WITH_TARGET(ped: EntityHandle): int
	/**  **/
	function COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(ped: EntityHandle, x: float, y: float, z: float, radius: float): int
	/**  **/
	function SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped: EntityHandle, hash: Hash): void
	/**  **/
	function SET_PED_RELATIONSHIP_GROUP_HASH(ped: EntityHandle, hash: Hash): void
	/** Sets the relationship between two groups. This should be called twice (once for each group).
	
	Relationship types:
	0 = Companion
	1 = Respect
	2 = Like
	3 = Neutral
	4 = Dislike
	5 = Hate
	255 = Pedestrians
	
	Example:
	PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
	PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017); **/
	function SET_RELATIONSHIP_BETWEEN_GROUPS(relationship: int, group1: Hash, group2: Hash): void
	/** Clears the relationship between two groups. This should be called twice (once for each group).
	
	Relationship types:
	0 = Companion
	1 = Respect
	2 = Like
	3 = Neutral
	4 = Dislike
	5 = Hate
	255 = Pedestrians
	(Credits: Inco)
	
	Example:
	PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
	PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017); **/
	function CLEAR_RELATIONSHIP_BETWEEN_GROUPS(relationship: int, group1: Hash, group2: Hash): void
	/** Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter. **/
	function ADD_RELATIONSHIP_GROUP(name: string, groupHash: Address): boolean
	/**  **/
	function REMOVE_RELATIONSHIP_GROUP(groupHash: Hash): void
	/**  **/
	function DOES_RELATIONSHIP_GROUP_EXIST(groupHash: Hash): boolean
	/** Gets the relationship between two peds. This should be called twice (once for each ped).
	
	Relationship types:
	0 = Companion
	1 = Respect
	2 = Like
	3 = Neutral
	4 = Dislike
	5 = Hate
	255 = Pedestrians
	(Credits: Inco)
	
	Example:
	PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);
	PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017); **/
	function GET_RELATIONSHIP_BETWEEN_PEDS(ped1: EntityHandle, ped2: EntityHandle): int
	/**  **/
	function GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped: EntityHandle): Hash
	/**  **/
	function GET_PED_RELATIONSHIP_GROUP_HASH(ped: EntityHandle): Hash
	/** Gets the relationship between two groups. This should be called twice (once for each group).
	
	Relationship types:
	0 = Companion
	1 = Respect
	2 = Like
	3 = Neutral
	4 = Dislike
	5 = Hate
	255 = Pedestrians
	
	Example:
	PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);
	PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017); **/
	function GET_RELATIONSHIP_BETWEEN_GROUPS(group1: Hash, group2: Hash): int
	/**  **/
	function SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(group: Hash, p1: boolean): void
	/**  **/
	function TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(ped: EntityHandle, p1: any, p2: float, hash: Hash, p4: any, p5: any): void
	/**  **/
	function SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_TO_INFORM_RESPECTED_FRIENDS(ped: EntityHandle, radius: float, maxFriends: int): void
	/**  **/
	function IS_PED_RESPONDING_TO_EVENT(ped: EntityHandle, event: any): boolean
	/**  **/
	function GET_POS_FROM_FIRED_EVENT(ped: EntityHandle, eventType: int, outData: Address): boolean
	/** FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
	FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
	FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
	FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
	FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
	FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
	FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
	FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
	FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
	FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
	FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
	FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
	FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
	FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
	FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
	FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
	
	Firing pattern info: https://pastebin.com/Px036isB **/
	function SET_PED_FIRING_PATTERN(ped: EntityHandle, patternHash: Hash): void
	/** shootRate 0-1000 **/
	function SET_PED_SHOOT_RATE(ped: EntityHandle, shootRate: int): void
	/** combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters. **/
	function SET_COMBAT_FLOAT(ped: EntityHandle, combatType: int, p2: float): void
	/** p0: Ped Handle
	p1: int i | 0 <= i <= 27
	
	p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
	
	<BlindFireChance value="0.1"/>
	<WeaponShootRateModifier value="1.0"/>
	<TimeBetweenBurstsInCover value="1.25"/>
	<BurstDurationInCover value="2.0"/>
	<TimeBetweenPeeks value="10.0"/>
	<WeaponAccuracy value="0.18"/>
	<FightProficiency value="0.8"/>
	<StrafeWhenMovingChance value="1.0"/>
	<WalkWhenStrafingChance value="0.0"/>
	<AttackWindowDistanceForCover value="55.0"/>
	<TimeToInvalidateInjuredTarget value="9.0"/>
	<TriggerChargeTime_Near value="4.0"/>
	<TriggerChargeTime_Far value="10.0"/>
	
	-------------Confirmed by editing combatbehavior.meta:
	p1:
	0=BlindFireChance
	1=BurstDurationInCover
	3=TimeBetweenBurstsInCover
	4=TimeBetweenPeeks
	5=StrafeWhenMovingChance
	8=WalkWhenStrafingChance
	11=AttackWindowDistanceForCover
	12=TimeToInvalidateInjuredTarget
	16=OptimalCoverDistance
	 **/
	function GET_COMBAT_FLOAT(ped: EntityHandle, p1: int): float
	/** p1 may be a BOOL representing whether or not the group even exists **/
	function GET_GROUP_SIZE(groupID: int, unknown: Address, sizeInMembers: IntPointer): void
	/**  **/
	function DOES_GROUP_EXIST(groupId: int): boolean
	/** Returns the group id of which the specified ped is a member of. **/
	function GET_PED_GROUP_INDEX(ped: EntityHandle): int
	/**  **/
	function IS_PED_IN_GROUP(ped: EntityHandle): boolean
	/**  **/
	function GET_PLAYER_PED_IS_FOLLOWING(ped: EntityHandle): Player
	/** 0: Default
	1: Circle Around Leader
	2: Alternative Circle Around Leader
	3: Line, with Leader at center **/
	function SET_GROUP_FORMATION(groupId: int, formationType: int): void
	/**  **/
	function SET_GROUP_FORMATION_SPACING(groupId: int, x: float, y: float, z: float): void
	/**  **/
	function RESET_GROUP_FORMATION_DEFAULT_SPACING(groupHandle: int): void
	/** Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe. **/
	function GET_VEHICLE_PED_IS_USING(ped: EntityHandle): EntityHandle
	/**  **/
	function GET_VEHICLE_PED_IS_ENTERING(ped: EntityHandle): EntityHandle
	/** enable or disable the gravity of a ped
	
	Examples:
	PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);
	PED::SET_PED_GRAVITY(Local_289[iVar0 / *20* /], 0x00000001); **/
	function SET_PED_GRAVITY(ped: EntityHandle, toggle: boolean): void
	/** damages a ped with the given amount **/
	function APPLY_DAMAGE_TO_PED(ped: EntityHandle, damageAmount: int, p2: boolean, p3: any): void
	/**  **/
	function GET_TIME_PED_DAMAGED_BY_WEAPON(ped: EntityHandle, weaponHash: Hash): int
	/**  **/
	function SET_PED_ALLOWED_TO_DUCK(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_NEVER_LEAVES_GROUP(ped: EntityHandle, toggle: boolean): void
	/** https://alloc8or.re/gta5/doc/enums/ePedType.txt **/
	function GET_PED_TYPE(ped: EntityHandle): int
	/** Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect. **/
	function SET_PED_AS_COP(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(toggle: boolean): void
	/** Sets the maximum health of a ped. **/
	function SET_PED_MAX_HEALTH(ped: EntityHandle, value: int): void
	/**  **/
	function GET_PED_MAX_HEALTH(ped: EntityHandle): int
	/**  **/
	function SET_PED_MAX_TIME_IN_WATER(ped: EntityHandle, value: float): void
	/**  **/
	function SET_PED_MAX_TIME_UNDERWATER(ped: EntityHandle, value: float): void
	/**  **/
	function SET_CORPSE_RAGDOLL_FRICTION(ped: EntityHandle, p1: float): void
	/** seatIndex must be <= 2 **/
	function SET_PED_VEHICLE_FORCED_SEAT_USAGE(ped: EntityHandle, vehicle: EntityHandle, seatIndex: int, flags: int, p4: any): void
	/**  **/
	function CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(ped: EntityHandle): void
	/** This native does absolutely nothing, just a nullsub **/
	function SET_PED_CAN_BE_KNOCKED_OFF_BIKE(p0: any, p1: any): void
	/** state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt **/
	function SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(ped: EntityHandle, state: int): void
	/**  **/
	function CAN_KNOCK_PED_OFF_VEHICLE(ped: EntityHandle): boolean
	/**  **/
	function KNOCK_PED_OFF_VEHICLE(ped: EntityHandle): void
	/**  **/
	function SET_PED_COORDS_NO_GANG(ped: EntityHandle, posX: float, posY: float, posZ: float): void
	/** from fm_mission_controller.c4 (variable names changed for clarity):
	
	int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
	PED::GET_GROUP_SIZE(group, &unused, &groupSize);
	if (groupSize >= 1) {
	. . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
	. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
	. . . . . . . . //and so on **/
	function GET_PED_AS_GROUP_MEMBER(groupID: int, memberNumber: int): EntityHandle
	/**  **/
	function GET_PED_AS_GROUP_LEADER(groupID: int): EntityHandle
	/**  **/
	function SET_PED_KEEP_TASK(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_PED_SWIMMING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_SWIMMING_UNDER_WATER(ped: EntityHandle): boolean
	/** teleports ped to coords along with the vehicle ped is in **/
	function SET_PED_COORDS_KEEP_VEHICLE(ped: EntityHandle, posX: float, posY: float, posZ: float): void
	/**  **/
	function SET_PED_DIES_IN_VEHICLE(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_CREATE_RANDOM_COPS(toggle: boolean): void
	/**  **/
	function SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(toggle: boolean): void
	/**  **/
	function SET_CREATE_RANDOM_COPS_ON_SCENARIOS(toggle: boolean): void
	/**  **/
	function CAN_CREATE_RANDOM_COPS(): boolean
	/**  **/
	function SET_PED_AS_ENEMY(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_SMASH_GLASS(ped: EntityHandle, p1: boolean, p2: boolean): void
	/**  **/
	function IS_PED_IN_ANY_TRAIN(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_GETTING_INTO_A_VEHICLE(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(ped: EntityHandle): boolean
	/** ped can not pull out a weapon when true **/
	function SET_ENABLE_HANDCUFFS(ped: EntityHandle, toggle: boolean): void
	/** Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend. **/
	function SET_ENABLE_BOUND_ANKLES(ped: EntityHandle, toggle: boolean): void
	/** Enables diving motion when underwater. **/
	function SET_ENABLE_SCUBA(ped: EntityHandle, toggle: boolean): void
	/** Setting ped to true allows the ped to shoot "friendlies".
	
	p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
	
	p1 = false & p2 = false for unable to aim at.
	p1 = true & p2 = false for able to aim at.  **/
	function SET_CAN_ATTACK_FRIENDLY(ped: EntityHandle, toggle: boolean, p2: boolean): void
	/** Returns the ped's alertness (0-3).
	
	Values : 
	
	0 : Neutral
	1 : Heard something (gun shot, hit, etc)
	2 : Knows (the origin of the event)
	3 : Fully alerted (is facing the event?)
	
	If the Ped does not exist, returns -1. **/
	function GET_PED_ALERTNESS(ped: EntityHandle): int
	/** value ranges from 0 to 3. **/
	function SET_PED_ALERTNESS(ped: EntityHandle, value: int): void
	/**  **/
	function SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(ped: EntityHandle, toggle: boolean): void
	/** transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f
	
	List of movement clipsets:
	Thanks to elsewhat for list.
	
	 "ANIM_GROUP_MOVE_BALLISTIC"
	 "ANIM_GROUP_MOVE_LEMAR_ALLEY"
	 "clipset@move@trash_fast_turn"
	 "FEMALE_FAST_RUNNER"
	 "missfbi4prepp1_garbageman"
	 "move_characters@franklin@fire"
	 "move_characters@Jimmy@slow@"
	 "move_characters@michael@fire"
	 "move_f@flee@a"
	 "move_f@scared"
	 "move_f@sexy@a"
	 "move_heist_lester"
	 "move_injured_generic"
	 "move_lester_CaneUp"
	 "move_m@bag"
	 "MOVE_M@BAIL_BOND_NOT_TAZERED"
	 "MOVE_M@BAIL_BOND_TAZERED"
	 "move_m@brave"
	 "move_m@casual@d"
	 "move_m@drunk@moderatedrunk"
	 "MOVE_M@DRUNK@MODERATEDRUNK"
	 "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
	 "MOVE_M@DRUNK@SLIGHTLYDRUNK"
	 "MOVE_M@DRUNK@VERYDRUNK"
	 "move_m@fire"
	 "move_m@gangster@var_e"
	 "move_m@gangster@var_f"
	 "move_m@gangster@var_i"
	 "move_m@JOG@"
	 "MOVE_M@PRISON_GAURD"
	 "MOVE_P_M_ONE"
	 "MOVE_P_M_ONE_BRIEFCASE"
	 "move_p_m_zero_janitor"
	 "move_p_m_zero_slow"
	 "move_ped_bucket"
	 "move_ped_crouched"
	 "move_ped_mop"
	 "MOVE_M@FEMME@"
	 "MOVE_F@FEMME@"
	 "MOVE_M@GANGSTER@NG"
	 "MOVE_F@GANGSTER@NG"
	 "MOVE_M@POSH@"
	 "MOVE_F@POSH@"
	 "MOVE_M@TOUGH_GUY@"
	 "MOVE_F@TOUGH_GUY@"
	
	~ NotCrunchyTaco
	
	Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function SET_PED_MOVEMENT_CLIPSET(ped: EntityHandle, clipSet: string, transitionSpeed: float): void
	/** If p1 is 0.0, I believe you are back to normal. 
	If p1 is 1.0, it looks like you can only rotate the ped, not walk.
	
	Using the following code to reset back to normal
	PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0); **/
	function RESET_PED_MOVEMENT_CLIPSET(ped: EntityHandle, p1: float): void
	/** Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function SET_PED_STRAFE_CLIPSET(ped: EntityHandle, clipSet: string): void
	/**  **/
	function RESET_PED_STRAFE_CLIPSET(ped: EntityHandle): void
	/**  **/
	function SET_PED_WEAPON_MOVEMENT_CLIPSET(ped: EntityHandle, clipSet: string): void
	/**  **/
	function RESET_PED_WEAPON_MOVEMENT_CLIPSET(ped: EntityHandle): void
	/**  **/
	function SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped: EntityHandle, clipset: string): void
	/**  **/
	function CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped: EntityHandle): void
	/** Found in the b617d scripts:
	PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(v_7, "trevor_heist_cover_2h"); **/
	function SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(ped: EntityHandle, p1: string): void
	/**  **/
	function CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(ped: EntityHandle): void
	/**  **/
	function CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(ped: EntityHandle): void
	/** PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
	PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
	PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
	PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
	PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
	PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
	PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
	PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING")); **/
	function SET_PED_IN_VEHICLE_CONTEXT(ped: EntityHandle, context: Hash): void
	/**  **/
	function RESET_PED_IN_VEHICLE_CONTEXT(ped: EntityHandle): void
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(ped: EntityHandle, animDict: string, anim: string): boolean
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function SET_PED_ALTERNATE_WALK_ANIM(ped: EntityHandle, animDict: string, animName: string, p3: float, p4: boolean): void
	/**  **/
	function CLEAR_PED_ALTERNATE_WALK_ANIM(ped: EntityHandle, p1: float): void
	/** stance:
	0 = idle
	1 = walk
	2 = running
	
	p5 = usually set to true
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function SET_PED_ALTERNATE_MOVEMENT_ANIM(ped: EntityHandle, stance: int, animDictionary: string, animationName: string, p4: float, p5: boolean): void
	/**  **/
	function CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(ped: EntityHandle, stance: int, p2: float): void
	/** From the scripts:
	PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
	"ANIM_GROUP_GESTURE_MISS_FRA0");
	PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
	"ANIM_GROUP_GESTURE_MISS_DocksSetup1"); **/
	function SET_PED_GESTURE_GROUP(ped: EntityHandle, animGroupGesture: string): void
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function GET_ANIM_INITIAL_OFFSET_POSITION(animDict: string, animName: string, x: float, y: float, z: float, xRot: float, yRot: float, zRot: float, p8: float, p9: int): Vector3
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function GET_ANIM_INITIAL_OFFSET_ROTATION(animDict: string, animName: string, x: float, y: float, z: float, xRot: float, yRot: float, zRot: float, p8: float, p9: int): Vector3
	/** Ids
	0 - Head
	1 - Beard
	2 - Hair
	3 - Torso
	4 - Legs
	5 - Hands
	6 - Foot
	7 - ------
	8 - Accessories 1
	9 - Accessories 2
	10- Decals
	11 - Auxiliary parts for torso **/
	function GET_PED_DRAWABLE_VARIATION(ped: EntityHandle, componentId: int): int
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(ped: EntityHandle, componentId: int): int
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function GET_PED_TEXTURE_VARIATION(ped: EntityHandle, componentId: int): int
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(ped: EntityHandle, componentId: int, drawableId: int): int
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(ped: EntityHandle, propId: int): int
	/** Need to check behavior when drawableId = -1
	
	- Doofy.Ass
	Why this function doesn't work and return nill value?
	GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)
	
	tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)
	
	
	List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(ped: EntityHandle, propId: int, drawableId: int): int
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function GET_PED_PALETTE_VARIATION(ped: EntityHandle, componentId: int): int
	/**  **/
	function GET_MP_OUTFIT_DATA_FROM_METADATA(p0: Address, p1: Address): boolean
	/**  **/
	function GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(p0: int): int
	/**  **/
	function GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(p0: int): int
	/** Checks if the component variation is valid, this works great for randomizing components using loops.
	
	List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
	
	Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json **/
	function IS_PED_COMPONENT_VARIATION_VALID(ped: EntityHandle, componentId: int, drawableId: int, textureId: int): boolean
	/** paletteId: 0 to 3.
	
	componentId:
	enum ePedVarComp
	{
		PV_COMP_INVALID = -1,
		PV_COMP_HEAD,
		PV_COMP_BERD,
		PV_COMP_HAIR,
		PV_COMP_UPPR,
		PV_COMP_LOWR,
		PV_COMP_HAND,
		PV_COMP_FEET,
		PV_COMP_TEEF,
		PV_COMP_ACCS,
		PV_COMP_TASK,
		PV_COMP_DECL,
		PV_COMP_JBIB,
		PV_COMP_MAX
	};
	
	Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
	
	Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json **/
	function SET_PED_COMPONENT_VARIATION(ped: EntityHandle, componentId: int, drawableId: int, textureId: int, paletteId: int): void
	/** p1 is always 0 in R* scripts.
	
	List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function SET_PED_RANDOM_COMPONENT_VARIATION(ped: EntityHandle, p1: int): void
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function SET_PED_RANDOM_PROPS(ped: EntityHandle): void
	/** Sets Ped Default Clothes **/
	function SET_PED_DEFAULT_COMPONENT_VARIATION(ped: EntityHandle): void
	/**  **/
	function SET_PED_BLEND_FROM_PARENTS(ped: EntityHandle, p1: any, p2: any, p3: float, p4: float): void
	/** The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
	
	The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
	
	!!!Can someone add working example for this???
	
	try this:
	       headBlendData headData;
	       GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);
	
	       SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
	          , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
	
	
	For more info please refer to this topic. 
	gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained **/
	function SET_PED_HEAD_BLEND_DATA(ped: EntityHandle, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: boolean): void
	/** The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
	pass this struct in the second parameter 
	struct headBlendData
	{
	    int shapeFirst;
	    int padding1;
	    int shapeSecond;
	    int padding2;
	    int shapeThird;
	    int padding3;
	    int skinFirst;
	    int padding4;
	    int skinSecond;
	    int padding5;
	    int skinThird;
	    int padding6;
	    float shapeMix;
	    int padding7;
	    float skinMix;
	    int padding8;
	    float thirdMix;
	    int padding9;
	    bool isParent;
	}; **/
	function GET_PED_HEAD_BLEND_DATA(ped: EntityHandle, headBlendData: Address): boolean
	/** See SET_PED_HEAD_BLEND_DATA(). **/
	function UPDATE_PED_HEAD_BLEND_DATA(ped: EntityHandle, shapeMix: float, skinMix: float, thirdMix: float): void
	/** Used for freemode (online) characters.
	
	For some reason, the scripts use a rounded float for the index.
	Indexes:
	1. black
	2. very light blue/green
	3. dark blue
	4. brown
	5. darker brown
	6. light brown
	7. blue
	8. light blue
	9. pink
	10. yellow
	11. purple
	12. black
	13. dark green
	14. light brown
	15. yellow/black pattern
	16. light colored spiral pattern
	17. shiny red
	18. shiny half blue/half red
	19. half black/half light blue
	20. white/red perimter
	21. green snake
	22. red snake
	23. dark blue snake
	24. dark yellow
	25. bright yellow
	26. all black
	28. red small pupil
	29. devil blue/black
	30. white small pupil
	31. glossed over **/
	function SET_HEAD_BLEND_EYE_COLOR(ped: EntityHandle, index: int): void
	/** A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get. **/
	function GET_HEAD_BLEND_EYE_COLOR(ped: EntityHandle): int
	/** OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0. 
	
	overlayID       Part                  Index, to disable
	0               Blemishes             0 - 23, 255
	1               Facial Hair           0 - 28, 255
	2               Eyebrows              0 - 33, 255
	3               Ageing                0 - 14, 255
	4               Makeup                0 - 74, 255
	5               Blush                 0 - 6, 255
	6               Complexion            0 - 11, 255
	7               Sun Damage            0 - 10, 255
	8               Lipstick              0 - 9, 255
	9               Moles/Freckles        0 - 17, 255
	10              Chest Hair            0 - 16, 255
	11              Body Blemishes        0 - 11, 255
	12              Add Body Blemishes    0 - 1, 255 **/
	function SET_PED_HEAD_OVERLAY(ped: EntityHandle, overlayID: int, index: int, opacity: float): void
	/** Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
	
	This might be the once removed native GET_PED_HEAD_OVERLAY. **/
	function GET_PED_HEAD_OVERLAY(ped: EntityHandle, overlayID: int): int
	/** Used with freemode (online) characters. **/
	function GET_PED_HEAD_OVERLAY_NUM(overlayID: int): int
	/** Used for freemode (online) characters.
	
	ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
	
	Called after SET_PED_HEAD_OVERLAY(). **/
	function SET_PED_HEAD_OVERLAY_TINT(ped: EntityHandle, overlayID: int, colorType: int, colorID: int, secondColorID: int): void
	/** Used for freemode (online) characters. **/
	function SET_PED_HAIR_TINT(ped: EntityHandle, colorID: int, highlightColorID: int): void
	/** Used for freemode (online) characters. **/
	function GET_NUM_PED_HAIR_TINTS(): int
	/**  **/
	function GET_NUM_PED_MAKEUP_TINTS(): int
	/** Input: Haircolor index, value between 0 and 63 (inclusive).
	Output: RGB values for the haircolor specified in the input.
	
	This is used with the hair color swatches scaleform.
	Use `GET_PED_MAKEUP_TINT_COLOR` to get the makeup colors. **/
	function GET_PED_HAIR_TINT_COLOR(hairColorIndex: int, outR: IntPointer, outG: IntPointer, outB: IntPointer): void
	/** Input: Makeup color index, value between 0 and 63 (inclusive).
	Output: RGB values for the makeup color specified in the input.
	
	This is used with the makeup color swatches scaleform.
	Use `GET_PED_HAIR_TINT_COLOR` to get the hair colors. **/
	function GET_PED_MAKEUP_TINT_COLOR(makeupColorIndex: int, outR: IntPointer, outG: IntPointer, outB: IntPointer): void
	/**  **/
	function IS_PED_HAIR_TINT_FOR_CREATOR(colorId: int): boolean
	/**  **/
	function GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(colorId: int): int
	/**  **/
	function IS_PED_LIPSTICK_TINT_FOR_CREATOR(colorId: int): boolean
	/**  **/
	function IS_PED_BLUSH_TINT_FOR_CREATOR(colorId: int): boolean
	/**  **/
	function IS_PED_HAIR_TINT_FOR_BARBER(colorID: int): boolean
	/**  **/
	function GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(colorID: int): int
	/**  **/
	function IS_PED_LIPSTICK_TINT_FOR_BARBER(colorID: int): boolean
	/**  **/
	function IS_PED_BLUSH_TINT_FOR_BARBER(colorID: int): boolean
	/**  **/
	function IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(colorId: int): boolean
	/**  **/
	function GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(modelHash: Hash, drawableId: int, textureId: int): int
	/** Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
	
	
	
	0 - Nose Width (Thin/Wide)
	
	1 - Nose Peak (Up/Down)
	
	2 - Nose Length (Long/Short)
	
	3 - Nose Bone Curveness (Crooked/Curved)
	
	4 - Nose Tip (Up/Down)
	
	5 - Nose Bone Twist (Left/Right)
	
	6 - Eyebrow (Up/Down)
	
	7 - Eyebrow (In/Out)
	
	8 - Cheek Bones (Up/Down)
	
	9 - Cheek Sideways Bone Size (In/Out)
	
	10 - Cheek Bones Width (Puffed/Gaunt)
	
	11 - Eye Opening (Both) (Wide/Squinted)
	
	12 - Lip Thickness (Both) (Fat/Thin)
	
	13 - Jaw Bone Width (Narrow/Wide)
	
	14 - Jaw Bone Shape (Round/Square)
	
	15 - Chin Bone (Up/Down)
	
	16 - Chin Bone Length (In/Out or Backward/Forward)
	
	17 - Chin Bone Shape (Pointed/Square)
	
	18 - Chin Hole (Chin Bum)
	
	19 - Neck Thickness (Thin/Thick) **/
	function SET_PED_MICRO_MORPH(ped: EntityHandle, index: int, scale: float): void
	/**  **/
	function HAS_PED_HEAD_BLEND_FINISHED(ped: EntityHandle): boolean
	/**  **/
	function FINALIZE_HEAD_BLEND(ped: EntityHandle): void
	/** p4 seems to vary from 0 to 3.
	Preview: https://gfycat.com/MaleRareAmazonparrot **/
	function SET_HEAD_BLEND_PALETTE_COLOR(ped: EntityHandle, r: int, g: int, b: int, id: int): void
	/**  **/
	function DISABLE_HEAD_BLEND_PALETTE_COLOR(ped: EntityHandle): void
	/** Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
	
	Used when calling SET_PED_HEAD_BLEND_DATA. **/
	function GET_PED_HEAD_BLEND_FIRST_INDEX(type: int): int
	/** Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc. **/
	function GET_PED_HEAD_BLEND_NUM_HEADS(type: int): int
	/** from extreme3.c4
	PED::SET_PED_PRELOAD_VARIATION_DATA(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));
	
	p1 is probably componentId **/
	function SET_PED_PRELOAD_VARIATION_DATA(ped: EntityHandle, slot: int, drawableId: int, textureId: int): int
	/**  **/
	function HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(ped: EntityHandle): boolean
	/**  **/
	function RELEASE_PED_PRELOAD_VARIATION_DATA(ped: EntityHandle): void
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function SET_PED_PRELOAD_PROP_DATA(ped: EntityHandle, componentId: int, drawableId: int, TextureId: int): int
	/**  **/
	function HAS_PED_PRELOAD_PROP_DATA_FINISHED(ped: EntityHandle): boolean
	/**  **/
	function RELEASE_PED_PRELOAD_PROP_DATA(ped: EntityHandle): void
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function GET_PED_PROP_INDEX(ped: EntityHandle, componentId: int): int
	/** ComponentId can be set to various things based on what category you're wanting to set
	enum PedPropsData
	{
	    PED_PROP_HATS = 0,
	    PED_PROP_GLASSES = 1,
	 PED_PROP_EARS = 2,
	    PED_PROP_WATCHES = 3,
	};
	Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);
	
	List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function SET_PED_PROP_INDEX(ped: EntityHandle, componentId: int, drawableId: int, TextureId: int, attach: boolean): void
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function KNOCK_OFF_PED_PROP(ped: EntityHandle, p1: boolean, p2: boolean, p3: boolean, p4: boolean): void
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function CLEAR_PED_PROP(ped: EntityHandle, propId: int): void
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function CLEAR_ALL_PED_PROPS(ped: EntityHandle): void
	/**  **/
	function DROP_AMBIENT_PROP(ped: EntityHandle): void
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function GET_PED_PROP_TEXTURE_INDEX(ped: EntityHandle, componentId: int): int
	/**  **/
	function CLEAR_PED_PARACHUTE_PACK_VARIATION(ped: EntityHandle): void
	/** This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models. **/
	function SET_PED_SCUBA_GEAR_VARIATION(ped: EntityHandle): void
	/** Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it. **/
	function CLEAR_PED_SCUBA_GEAR_VARIATION(ped: EntityHandle): void
	/**  **/
	function IS_USING_PED_SCUBA_GEAR_VARIATION(p0: any): boolean
	/** works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him **/
	function SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_BOUNDS_ORIENTATION(ped: EntityHandle, p1: float, p2: float, p3: float, p4: float, p5: float): void
	/** PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.
	
	l_216 = RECSBRobber1 **/
	function REGISTER_TARGET(ped: EntityHandle, target: EntityHandle): void
	/** Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in). **/
	function REGISTER_HATED_TARGETS_AROUND_PED(ped: EntityHandle, radius: float): void
	/** Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed. 
	
	Ped Types:
	Any = -1
	Player = 1
	Male = 4 
	Female = 5 
	Cop = 6
	Human = 26
	SWAT = 27 
	Animal = 28
	Army = 29 **/
	function GET_RANDOM_PED_AT_COORD(x: float, y: float, z: float, xRadius: float, yRadius: float, zRadius: float, pedType: int): EntityHandle
	/** Gets the closest ped in a radius.
	
	Ped Types:
	Any ped = -1
	Player = 1
	Male = 4 
	Female = 5 
	Cop = 6
	Human = 26
	SWAT = 27 
	Animal = 28
	Army = 29
	
	------------------
	P4 P5 P7 P8
	1  0  x  x  = return nearest walking Ped
	1  x  0  x  = return nearest walking Ped
	x  1  1  x  = return Ped you are using
	0  0  x  x  = no effect
	0  x  0  x  = no effect
	
	x = can be 1 or 0. Does not have any obvious changes.
	
	This function does not return ped who is:
	1. Standing still
	2. Driving
	3. Fleeing
	4. Attacking
	
	This function only work if the ped is:
	1. walking normally.
	2. waiting to cross a road.
	
	Note: PED::GET_PED_NEARBY_PEDS works for more peds. **/
	function GET_CLOSEST_PED(x: float, y: float, z: float, radius: float, p4: boolean, p5: boolean, outPed: Address, p7: boolean, p8: boolean, pedType: int): boolean
	/** Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED. **/
	function SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(value: boolean): void
	/**  **/
	function GET_CAN_PED_BE_GRABBED_BY_SCRIPT(ped: EntityHandle, p1: boolean, p2: boolean, p3: boolean, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: any): boolean
	/** Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0 **/
	function SET_DRIVER_RACING_MODIFIER(driver: EntityHandle, modifier: float): void
	/** The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all. **/
	function SET_DRIVER_ABILITY(driver: EntityHandle, ability: float): void
	/** range 0.0f - 1.0f **/
	function SET_DRIVER_AGGRESSIVENESS(driver: EntityHandle, aggressiveness: float): void
	/** Prevents the ped from going limp.
	
	[Example: Can prevent peds from falling when standing on moving vehicles.] **/
	function CAN_PED_RAGDOLL(ped: EntityHandle): boolean
	/** p4/p5: Unused in TU27
	Ragdoll Types:
	**0**: CTaskNMRelax
	**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
	**Else**: CTaskNMBalance
	time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.
	
	time2- Unknown time, in milliseconds
	
	ragdollType-
	0 : Normal ragdoll
	1 : Falls with stiff legs/body
	2 : Narrow leg stumble(may not fall)
	3 : Wide leg stumble(may not fall)
	
	p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".
	
	
	
	
	EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob
	
	Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way. **/
	function SET_PED_TO_RAGDOLL(ped: EntityHandle, time1: int, time2: int, ragdollType: int, p4: boolean, p5: boolean, p6: boolean): boolean
	/** Return variable is never used in R*'s scripts.
	
	Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
	
	x, y, and z are coordinates, most likely to where the ped will fall.
	
	p7 is probably the force of the fall, but untested, so I left the variable name the same.
	
	p8 to p13 are always 0f in R*'s scripts.
	
	(Simplified) Example of the usage of the function from R*'s scripts:
	ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
	 **/
	function SET_PED_TO_RAGDOLL_WITH_FALL(ped: EntityHandle, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): boolean
	/** Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk. **/
	function SET_PED_RAGDOLL_ON_COLLISION(ped: EntityHandle, toggle: boolean): void
	/** If the ped handle passed through the parenthesis is in a ragdoll state this will return true. **/
	function IS_PED_RAGDOLL(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_RUNNING_RAGDOLL_TASK(ped: EntityHandle): boolean
	/**  **/
	function SET_PED_RAGDOLL_FORCE_FALL(ped: EntityHandle): void
	/**  **/
	function RESET_PED_RAGDOLL_TIMER(ped: EntityHandle): void
	/**  **/
	function SET_PED_CAN_RAGDOLL(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_PED_RUNNING_MELEE_TASK(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_RUNNING_MOBILE_PHONE_TASK(ped: EntityHandle): boolean
	/**  **/
	function IS_MOBILE_PHONE_TO_PED_EAR(ped: EntityHandle): boolean
	/** Works for both player and peds, but some flags don't seem to work for the player (1, for example)
	
	1 - Blocks ragdolling when shot.
	2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.
	4 - Blocks ragdolling when set on fire.
	
	-----------------------------------------------------------------------
	
	There seem to be 26 flags **/
	function SET_RAGDOLL_BLOCKING_FLAGS(ped: EntityHandle, flags: int): void
	/** There seem to be 26 flags **/
	function CLEAR_RAGDOLL_BLOCKING_FLAGS(ped: EntityHandle, flags: int): void
	/**  **/
	function SET_PED_ANGLED_DEFENSIVE_AREA(ped: EntityHandle, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float, p7: float, p8: boolean, p9: boolean): void
	/**  **/
	function SET_PED_SPHERE_DEFENSIVE_AREA(ped: EntityHandle, x: float, y: float, z: float, radius: float, p5: boolean, p6: boolean): void
	/**  **/
	function SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(ped: EntityHandle, target: EntityHandle, xOffset: float, yOffset: float, zOffset: float, radius: float, p6: boolean): void
	/**  **/
	function SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(ped: EntityHandle, target: EntityHandle, xOffset: float, yOffset: float, zOffset: float, radius: float, p6: boolean): void
	/**  **/
	function SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(ped: EntityHandle, attachPed: EntityHandle, p2: float, p3: float, p4: float, p5: float, p6: float, p7: float, p8: float, p9: boolean, p10: boolean): void
	/**  **/
	function SET_PED_DEFENSIVE_AREA_DIRECTION(ped: EntityHandle, p1: float, p2: float, p3: float, p4: boolean): void
	/** Ped will no longer get angry when you stay near him. **/
	function REMOVE_PED_DEFENSIVE_AREA(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_PED_DEFENSIVE_AREA_POSITION(ped: EntityHandle, p1: boolean): Vector3
	/**  **/
	function IS_PED_DEFENSIVE_AREA_ACTIVE(ped: EntityHandle, p1: boolean): boolean
	/**  **/
	function SET_PED_PREFERRED_COVER_SET(ped: EntityHandle, itemSet: any): void
	/**  **/
	function REMOVE_PED_PREFERRED_COVER_SET(ped: EntityHandle): void
	/** It will revive/cure the injured ped. The condition is ped must not be dead.
	
	Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
	
	This function is well suited there. **/
	function REVIVE_INJURED_PED(ped: EntityHandle): void
	/** This function will simply bring the dead person back to life.
	
	Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
	
	Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.) 
	
	Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks. **/
	function RESURRECT_PED(ped: EntityHandle): void
	/** NOTE: Debugging functions are not present in the retail version of the game.
	
	*untested but char *name could also be a hash for a localized string **/
	function SET_PED_NAME_DEBUG(ped: EntityHandle, name: string): void
	/** Gets the offset the specified ped has moved since the previous tick.
	
	If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
	
	If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0. **/
	function GET_PED_EXTRACTED_DISPLACEMENT(ped: EntityHandle, worldSpace: boolean): Vector3
	/**  **/
	function SET_PED_DIES_WHEN_INJURED(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_ENABLE_WEAPON_BLOCKING(ped: EntityHandle, toggle: boolean): void
	/** p1 was always 1 (true).
	
	Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle. **/
	function SPECIAL_FUNCTION_DO_NOT_USE(ped: EntityHandle, p1: boolean): void
	/**  **/
	function RESET_PED_VISIBLE_DAMAGE(ped: EntityHandle): void
	/**  **/
	function APPLY_PED_BLOOD_DAMAGE_BY_ZONE(ped: EntityHandle, p1: any, p2: float, p3: float, p4: any): void
	/** woundTypes:
	- soak_splat
	- wound_sheet
	- BulletSmall
	- BulletLarge
	- ShotgunSmall
	- ShotgunSmallMonolithic
	- ShotgunLarge
	- ShotgunLargeMonolithic
	- NonFatalHeadshot
	- stab
	- BasicSlash
	- Scripted_Ped_Splash_Back
	- BackSplash **/
	function APPLY_PED_BLOOD(ped: EntityHandle, boneIndex: int, xRot: float, yRot: float, zRot: float, woundType: string): void
	/**  **/
	function APPLY_PED_BLOOD_BY_ZONE(ped: EntityHandle, p1: int, p2: float, p3: float, p4: string): void
	/**  **/
	function APPLY_PED_BLOOD_SPECIFIC(ped: EntityHandle, p1: int, p2: float, p3: float, p4: float, p5: float, p6: int, p7: float, p8: string): void
	/** enum eDamageZone
	{
		DZ_Torso = 0,
		DZ_Head,
		DZ_LeftArm,
		DZ_RightArm,
		DZ_LeftLeg,
		DZ_RightLeg,
	};
	
	Decal Names:
	scar
	blushing
	cs_flush_anger
	cs_flush_anger_face
	bruise
	bruise_large
	herpes
	ArmorBullet
	basic_dirt_cloth
	basic_dirt_skin
	cs_trev1_dirt
	
	APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing"); **/
	function APPLY_PED_DAMAGE_DECAL(ped: EntityHandle, damageZone: int, xOffset: float, yOffset: float, heading: float, scale: float, alpha: float, variation: int, fadeIn: boolean, decalName: string): void
	/** Damage Packs:
	
	"SCR_TrevorTreeBang"
	"HOSPITAL_0"
	"HOSPITAL_1"
	"HOSPITAL_2"
	"HOSPITAL_3"
	"HOSPITAL_4"
	"HOSPITAL_5"
	"HOSPITAL_6"
	"HOSPITAL_7"
	"HOSPITAL_8"
	"HOSPITAL_9"
	"SCR_Dumpster"
	"BigHitByVehicle"
	"SCR_Finale_Michael_Face"
	"SCR_Franklin_finb"
	"SCR_Finale_Michael"
	"SCR_Franklin_finb2"
	"Explosion_Med"
	"SCR_Torture"
	"SCR_TracySplash"
	"Skin_Melee_0"
	
	Additional damage packs:
	
	gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
	Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json **/
	function APPLY_PED_DAMAGE_PACK(ped: EntityHandle, damagePack: string, damage: float, mult: float): void
	/**  **/
	function CLEAR_PED_BLOOD_DAMAGE(ped: EntityHandle): void
	/** Somehow related to changing ped's clothes. **/
	function CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(ped: EntityHandle, p1: int): void
	/**  **/
	function HIDE_PED_BLOOD_DAMAGE_BY_ZONE(ped: EntityHandle, p1: any, p2: boolean): void
	/** p1: from 0 to 5 in the b617d scripts.
	p2: "blushing" and "ALL" found in the b617d scripts. **/
	function CLEAR_PED_DAMAGE_DECAL_BY_ZONE(ped: EntityHandle, p1: int, p2: string): void
	/**  **/
	function GET_PED_DECORATIONS_STATE(ped: EntityHandle): int
	/**  **/
	function MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(ped: EntityHandle, p1: boolean): void
	/** It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference. **/
	function CLEAR_PED_WETNESS(ped: EntityHandle): void
	/** It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
	
	 **/
	function SET_PED_WETNESS_HEIGHT(ped: EntityHandle, height: float): void
	/** combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function **/
	function SET_PED_WETNESS_ENABLED_THIS_FRAME(ped: EntityHandle): void
	/**  **/
	function CLEAR_PED_ENV_DIRT(ped: EntityHandle): void
	/** Sweat is set to 100.0 or 0.0 in the decompiled scripts. **/
	function SET_PED_SWEAT(ped: EntityHandle, sweat: float): void
	/** Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
	
	collection - PedDecorationCollection filename hash
	overlay - Item name hash
	
	Example:
	Entry inside "mpbeach_overlays.xml" -
	<Item>
	  <uvPos x="0.500000" y="0.500000" />
	  <scale x="0.600000" y="0.500000" />
	  <rotation value="0.000000" />
	  <nameHash>FM_Hair_Fuzz</nameHash>
	  <txdHash>mp_hair_fuzz</txdHash>
	  <txtHash>mp_hair_fuzz</txtHash>
	  <zone>ZONE_HEAD</zone>
	  <type>TYPE_TATTOO</type>
	  <faction>FM</faction>
	  <garment>All</garment>
	  <gender>GENDER_DONTCARE</gender>
	  <award />
	  <awardLevel />
	</Item>
	
	Code:
	PED::ADD_PED_DECORATION_FROM_HASHES(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))
	
	Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json **/
	function ADD_PED_DECORATION_FROM_HASHES(ped: EntityHandle, collection: Hash, overlay: Hash): void
	/** Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json **/
	function ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(ped: EntityHandle, collection: Hash, overlay: Hash): void
	/** Returns the zoneID for the overlay if it is a member of collection.
	enum ePedDecorationZone
	{
		ZONE_TORSO = 0,
		ZONE_HEAD = 1,
		ZONE_LEFT_ARM = 2,
		ZONE_RIGHT_ARM = 3,
		ZONE_LEFT_LEG = 4,
		ZONE_RIGHT_LEG = 5,
		ZONE_MEDALS = 6,
		ZONE_INVALID = 7
	};
	
	Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json **/
	function GET_PED_DECORATION_ZONE_FROM_HASHES(collection: Hash, overlay: Hash): int
	/**  **/
	function CLEAR_PED_DECORATIONS(ped: EntityHandle): void
	/**  **/
	function CLEAR_PED_DECORATIONS_LEAVE_SCARS(ped: EntityHandle): void
	/** Despite this function's name, it simply returns whether the specified handle is a Ped. **/
	function WAS_PED_SKELETON_UPDATED(ped: EntityHandle): boolean
	/** Gets the position of the specified bone of the specified ped.
	
	ped: The ped to get the position of a bone from.
	boneId: The ID of the bone to get the position from. This is NOT the index.
	offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
	offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
	offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation. **/
	function GET_PED_BONE_COORDS(ped: EntityHandle, boneId: int, offsetX: float, offsetY: float, offsetZ: float): Vector3
	/** Creates a new NaturalMotion message.
	
	startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
	messageId: The ID of the NaturalMotion message.
	
	If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE. **/
	function CREATE_NM_MESSAGE(startImmediately: boolean, messageId: int): void
	/** Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
	
	If a message hasn't been created already, this function does nothing.
	If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
	The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
	
	Call order:
	SET_PED_TO_RAGDOLL
	CREATE_NM_MESSAGE
	GIVE_PED_NM_MESSAGE
	
	Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
	SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
	CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
	GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
	CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
	GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
	CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
	GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped. **/
	function GIVE_PED_NM_MESSAGE(ped: EntityHandle): void
	/**  **/
	function ADD_SCENARIO_BLOCKING_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, p6: boolean, p7: boolean, p8: boolean, p9: boolean): int
	/**  **/
	function REMOVE_SCENARIO_BLOCKING_AREAS(): void
	/**  **/
	function REMOVE_SCENARIO_BLOCKING_AREA(p0: any, p1: boolean): void
	/**  **/
	function SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(x: float, y: float, z: float, range: float, p4: int): void
	/**  **/
	function DOES_SCENARIO_BLOCKING_AREA_EXISTS(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): boolean
	/** Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json **/
	function IS_PED_USING_SCENARIO(ped: EntityHandle, scenario: string): boolean
	/**  **/
	function IS_PED_USING_ANY_SCENARIO(ped: EntityHandle): boolean
	/**  **/
	function SET_PED_PANIC_EXIT_SCENARIO(p0: any, p1: any, p2: any, p3: any): boolean
	/**  **/
	function TOGGLE_SCENARIO_PED_COWER_IN_PLACE(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(p0: any, p1: any, p2: any, p3: any): boolean
	/**  **/
	function SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(p0: any, p1: any, p2: any, p3: any): boolean
	/**  **/
	function SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(ped: EntityHandle): void
	/**  **/
	function SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(ped: EntityHandle): void
	/**  **/
	function SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(ped: EntityHandle, p1: any, p2: any, p3: any): boolean
	/**  **/
	function SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(ped: EntityHandle, p1: boolean): void
	/**  **/
	function SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(p0: any, p1: boolean): void
	/**  **/
	function SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(p0: any, p1: boolean): void
	/**  **/
	function IS_PED_GESTURING(p0: any): boolean
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function PLAY_FACIAL_ANIM(ped: EntityHandle, animName: string, animDict: string): void
	/** Clipsets:
	facials@gen_female@base
	facials@gen_male@base
	facials@p_m_zero@base
	
	Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:
	mood_drunk_1
	mood_stressed_1
	mood_happy_1
	mood_talking_1
	 **/
	function SET_FACIAL_CLIPSET(ped: EntityHandle, animDict: string): void
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function SET_FACIAL_IDLE_ANIM_OVERRIDE(ped: EntityHandle, animName: string, animDict: string): void
	/**  **/
	function CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(ped: EntityHandle): void
	/**  **/
	function SET_PED_CAN_PLAY_GESTURE_ANIMS(ped: EntityHandle, toggle: boolean): void
	/** p2 usually 0 **/
	function SET_PED_CAN_PLAY_VISEME_ANIMS(ped: EntityHandle, toggle: boolean, p2: boolean): void
	/**  **/
	function SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(ped: EntityHandle, p1: boolean): void
	/**  **/
	function SET_PED_CAN_PLAY_AMBIENT_ANIMS(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function TRIGGER_IDLE_ANIMATION_ON_PED(ped: EntityHandle): void
	/**  **/
	function SET_PED_CAN_ARM_IK(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_HEAD_IK(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_LEG_IK(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_TORSO_IK(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_TORSO_REACT_IK(ped: EntityHandle, p1: boolean): void
	/**  **/
	function SET_PED_CAN_TORSO_VEHICLE_IK(ped: EntityHandle, p1: boolean): void
	/**  **/
	function SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_PED_HEADTRACKING_PED(ped1: EntityHandle, ped2: EntityHandle): boolean
	/**  **/
	function IS_PED_HEADTRACKING_ENTITY(ped: EntityHandle, entity: EntityHandle): boolean
	/** This is only called once in the scripts.
	
	sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
	                    sub_1CA8("WORLD_HUMAN_SMOKING", 2);
	                    PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID()); **/
	function SET_PED_PRIMARY_LOOKAT(ped: EntityHandle, lookAt: EntityHandle): void
	/**  **/
	function SET_PED_CLOTH_PIN_FRAMES(p0: any, p1: any): void
	/**  **/
	function SET_PED_CLOTH_PACKAGE_INDEX(p0: any, p1: any): void
	/**  **/
	function SET_PED_CLOTH_PRONE(p0: any, p1: boolean): void
	/** enum ePedConfigFlags
	{
		_CPED_CONFIG_FLAG_0x67D1A445 = 0,
		_CPED_CONFIG_FLAG_0xC63DE95E = 1,
		CPED_CONFIG_FLAG_NoCriticalHits = 2,
		CPED_CONFIG_FLAG_DrownsInWater = 3,
		CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
		_CPED_CONFIG_FLAG_0x37D196F4 = 5,
		_CPED_CONFIG_FLAG_0xE2462399 = 6,
		CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
		_CPED_CONFIG_FLAG_0xEDDEB838 = 8,
		_CPED_CONFIG_FLAG_0xB398B6FD = 9,
		_CPED_CONFIG_FLAG_0xF6664E68 = 10,
		_CPED_CONFIG_FLAG_0xA05E7CA3 = 11,
		_CPED_CONFIG_FLAG_0xCE394045 = 12,
		CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
		_CPED_CONFIG_FLAG_0xCD8D1411 = 14,
		_CPED_CONFIG_FLAG_0xB031F1A9 = 15,
		_CPED_CONFIG_FLAG_0xFE65BEE3 = 16,
		CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
		_CPED_CONFIG_FLAG_0x380165BD = 18,
		_CPED_CONFIG_FLAG_0x07C045C7 = 19,
		_CPED_CONFIG_FLAG_0x583B5E2D = 20,
		_CPED_CONFIG_FLAG_0x475EDA58 = 21,
		_CPED_CONFIG_FLAG_0x8629D05B = 22,
		_CPED_CONFIG_FLAG_0x1522968B = 23,
		CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
		_CPED_CONFIG_FLAG_0x4CC09C4B = 25,
		_CPED_CONFIG_FLAG_0x034F3053 = 26,
		_CPED_CONFIG_FLAG_0xD91BA7CC = 27,
		_CPED_CONFIG_FLAG_0x5C8DC66E = 28,
		_CPED_CONFIG_FLAG_0x8902EAA0 = 29,
		_CPED_CONFIG_FLAG_0x6580B9D2 = 30,
		_CPED_CONFIG_FLAG_0x0EF7A297 = 31,
		_CPED_CONFIG_FLAG_CanFlyThruWindscreen = 32, // 0x6BF86E5B
		CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
		CPED_CONFIG_FLAG_HasHelmet = 34,
		CPED_CONFIG_FLAG_UseHelmet = 35,
		_CPED_CONFIG_FLAG_0xEEB3D630 = 36,
		_CPED_CONFIG_FLAG_0xB130D17B = 37,
		_CPED_CONFIG_FLAG_0x5F071200 = 38,
		CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
		_CPED_CONFIG_FLAG_0xC287AAFF = 40,
		_CPED_CONFIG_FLAG_0x203328CC = 41,
		CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
		CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
		CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
		_CPED_CONFIG_FLAG_0xEC4A8ACF = 45,
		_CPED_CONFIG_FLAG_0xDB115BFA = 46,
		CPED_CONFIG_FLAG_PedBeingDeleted = 47,
		CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
		_CPED_CONFIG_FLAG_0xF8E99565 = 49,
		_CPED_CONFIG_FLAG_0xDD17FEE6 = 50,
		_CPED_CONFIG_FLAG_0x7ED9B2C9 = 51,
		_CPED_CONFIG_FLAG_NoCollison = 52, // 0x655E8618
		_CPED_CONFIG_FLAG_0x5A6C1F6E = 53,
		_CPED_CONFIG_FLAG_0xD749FC41 = 54,
		_CPED_CONFIG_FLAG_0x357F63F3 = 55,
		_CPED_CONFIG_FLAG_0xC5E60961 = 56,
		_CPED_CONFIG_FLAG_0x29275C3E = 57,
		CPED_CONFIG_FLAG_IsFiring = 58,
		CPED_CONFIG_FLAG_WasFiring = 59,
		CPED_CONFIG_FLAG_IsStanding = 60,
		CPED_CONFIG_FLAG_WasStanding = 61,
		CPED_CONFIG_FLAG_InVehicle = 62,
		CPED_CONFIG_FLAG_OnMount = 63,
		CPED_CONFIG_FLAG_AttachedToVehicle = 64,
		CPED_CONFIG_FLAG_IsSwimming = 65,
		CPED_CONFIG_FLAG_WasSwimming = 66,
		CPED_CONFIG_FLAG_IsSkiing = 67,
		CPED_CONFIG_FLAG_IsSitting = 68,
		CPED_CONFIG_FLAG_KilledByStealth = 69,
		CPED_CONFIG_FLAG_KilledByTakedown = 70,
		CPED_CONFIG_FLAG_Knockedout = 71,
		_CPED_CONFIG_FLAG_0x3E3C4560 = 72,
		_CPED_CONFIG_FLAG_0x2994C7B7 = 73,
		_CPED_CONFIG_FLAG_0x6D59D275 = 74,
		CPED_CONFIG_FLAG_UsingCoverPoint = 75,
		CPED_CONFIG_FLAG_IsInTheAir = 76,
		_CPED_CONFIG_FLAG_0x2D493FB7 = 77,
		CPED_CONFIG_FLAG_IsAimingGun = 78,
		_CPED_CONFIG_FLAG_0x14D69875 = 79,
		_CPED_CONFIG_FLAG_0x40B05311 = 80,
		_CPED_CONFIG_FLAG_0x8B230BC5 = 81,
		_CPED_CONFIG_FLAG_0xC74E5842 = 82,
		_CPED_CONFIG_FLAG_0x9EA86147 = 83,
		_CPED_CONFIG_FLAG_0x674C746C = 84,
		_CPED_CONFIG_FLAG_0x3E56A8C2 = 85,
		_CPED_CONFIG_FLAG_0xC144A1EF = 86,
		_CPED_CONFIG_FLAG_0x0548512D = 87,
		_CPED_CONFIG_FLAG_0x31C93909 = 88,
		_CPED_CONFIG_FLAG_0xA0269315 = 89,
		_CPED_CONFIG_FLAG_0xD4D59D4D = 90,
		_CPED_CONFIG_FLAG_0x411D4420 = 91,
		_CPED_CONFIG_FLAG_0xDF4AEF0D = 92,
		CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
		_CPED_CONFIG_FLAG_0x300E4CD3 = 94,
		_CPED_CONFIG_FLAG_0xF1C5BF04 = 95,
		_CPED_CONFIG_FLAG_0x89C2EF13 = 96,
		CPED_CONFIG_FLAG_VaultFromCover = 97,
		_CPED_CONFIG_FLAG_0x02A852C8 = 98,
		_CPED_CONFIG_FLAG_0x3D9407F1 = 99,
		_CPED_CONFIG_FLAG_IsDrunk = 100, // 0x319B4558
		CPED_CONFIG_FLAG_ForcedAim = 101,
		_CPED_CONFIG_FLAG_0xB942D71A = 102,
		_CPED_CONFIG_FLAG_0xD26C55A8 = 103,
		_CPED_CONFIG_FLAG_0xB89E703B = 104,
		CPED_CONFIG_FLAG_ForceReload = 105,
		_CPED_CONFIG_FLAG_0xD9E73DA2 = 106,
		_CPED_CONFIG_FLAG_0xFF71DC2C = 107,
		_CPED_CONFIG_FLAG_0x1E27E8D8 = 108,
		_CPED_CONFIG_FLAG_0xF2C53966 = 109,
		_CPED_CONFIG_FLAG_0xC4DBE247 = 110,
		_CPED_CONFIG_FLAG_0x83C0A4BF = 111,
		_CPED_CONFIG_FLAG_0x0E0FAF8C = 112,
		_CPED_CONFIG_FLAG_0x26616660 = 113,
		_CPED_CONFIG_FLAG_0x43B80B79 = 114,
		_CPED_CONFIG_FLAG_0x0D2A9309 = 115,
		_CPED_CONFIG_FLAG_0x12C1C983 = 116,
		CPED_CONFIG_FLAG_BumpedByPlayer = 117,
		_CPED_CONFIG_FLAG_0xE586D504 = 118,
		_CPED_CONFIG_FLAG_0x52374204 = 119,
		CPED_CONFIG_FLAG_IsHandCuffed = 120,
		CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
		CPED_CONFIG_FLAG_DisableMelee = 122,
		_CPED_CONFIG_FLAG_0xFE714397 = 123,
		_CPED_CONFIG_FLAG_0xB3E660BD = 124,
		_CPED_CONFIG_FLAG_0x5FED6BFD = 125,
		_CPED_CONFIG_FLAG_0xC9D6F66F = 126,
		_CPED_CONFIG_FLAG_0x519BC986 = 127,
		CPED_CONFIG_FLAG_CanBeAgitated = 128,
		_CPED_CONFIG_FLAG_0x9A4B617C = 129,
		_CPED_CONFIG_FLAG_0xDAB70E9F = 130,
		_CPED_CONFIG_FLAG_0xE569438A = 131,
		_CPED_CONFIG_FLAG_0xBBC77D6D = 132,
		_CPED_CONFIG_FLAG_0xCB59EF0F = 133,
		_CPED_CONFIG_FLAG_0x8C5EA971 = 134,
		CPED_CONFIG_FLAG_IsScuba = 135,
		CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
		_CPED_CONFIG_FLAG_0xDCE59B58 = 137,
		CPED_CONFIG_FLAG_RidingTrain = 138,
		CPED_CONFIG_FLAG_ArrestResult = 139,
		CPED_CONFIG_FLAG_CanAttackFriendly = 140,
		_CPED_CONFIG_FLAG_0x98A4BE43 = 141,
		_CPED_CONFIG_FLAG_0x6901E731 = 142,
		_CPED_CONFIG_FLAG_0x9EC9BF6C = 143,
		_CPED_CONFIG_FLAG_0x42841A8F = 144,
		CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
		CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
		CPED_CONFIG_FLAG_StairsDetected = 147,
		CPED_CONFIG_FLAG_SlopeDetected = 148,
		_CPED_CONFIG_FLAG_0x1A15670B = 149,
		_CPED_CONFIG_FLAG_0x61786EE5 = 150,
		_CPED_CONFIG_FLAG_0xCB9186BD = 151,
		_CPED_CONFIG_FLAG_0xF0710152 = 152,
		_CPED_CONFIG_FLAG_0x43DFE310 = 153,
		_CPED_CONFIG_FLAG_0xC43C624E = 154,
		CPED_CONFIG_FLAG_CanPerformArrest = 155,
		CPED_CONFIG_FLAG_CanPerformUncuff = 156,
		CPED_CONFIG_FLAG_CanBeArrested = 157,
		_CPED_CONFIG_FLAG_0xF7960FF5 = 158,
		_CPED_CONFIG_FLAG_0x59564113 = 159,
		_CPED_CONFIG_FLAG_0x0C6C3099 = 160,
		_CPED_CONFIG_FLAG_0x645F927A = 161,
		_CPED_CONFIG_FLAG_0xA86549B9 = 162,
		_CPED_CONFIG_FLAG_0x8AAF337A = 163,
		_CPED_CONFIG_FLAG_0x13BAA6E7 = 164,
		_CPED_CONFIG_FLAG_0x5FB9D1F5 = 165,
		CPED_CONFIG_FLAG_IsInjured = 166,
		_CPED_CONFIG_FLAG_0x6398A20B = 167,
		_CPED_CONFIG_FLAG_0xD8072639 = 168,
		_CPED_CONFIG_FLAG_0xA05B1845 = 169,
		_CPED_CONFIG_FLAG_0x83F6D220 = 170,
		_CPED_CONFIG_FLAG_0xD8430331 = 171,
		_CPED_CONFIG_FLAG_0x4B547520 = 172,
		_CPED_CONFIG_FLAG_0xE66E1406 = 173,
		_CPED_CONFIG_FLAG_0x1C4BFE0C = 174,
		_CPED_CONFIG_FLAG_0x90008BFA = 175,
		_CPED_CONFIG_FLAG_0x07C7A910 = 176,
		_CPED_CONFIG_FLAG_0xF15F8191 = 177,
		_CPED_CONFIG_FLAG_0xCE4E8BE2 = 178,
		_CPED_CONFIG_FLAG_0x1D46E4F2 = 179,
		CPED_CONFIG_FLAG_IsInCustody = 180,
		_CPED_CONFIG_FLAG_0xE4FD9B3A = 181,
		_CPED_CONFIG_FLAG_0x67AE0812 = 182,
		CPED_CONFIG_FLAG_IsAgitated = 183,
		CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
		_CPED_CONFIG_FLAG_0x7B2D325E = 185,
		CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
		CPED_CONFIG_FLAG_HasHurtStarted = 187,
		CPED_CONFIG_FLAG_DisableHurt = 188,
		CPED_CONFIG_FLAG_PlayerIsWeird = 189,
		_CPED_CONFIG_FLAG_0x32FC208B = 190,
		_CPED_CONFIG_FLAG_0x0C296E5A = 191,
		_CPED_CONFIG_FLAG_0xE63B73EC = 192,
		_CPED_CONFIG_FLAG_0x04E9CC80 = 193,
		CPED_CONFIG_FLAG_UsingScenario = 194,
		CPED_CONFIG_FLAG_VisibleOnScreen = 195,
		_CPED_CONFIG_FLAG_0xD88C58A1 = 196,
		_CPED_CONFIG_FLAG_0x5A3DCF43 = 197,
		_CPED_CONFIG_FLAG_0xEA02B420 = 198,
		_CPED_CONFIG_FLAG_0x3F559CFF = 199,
		_CPED_CONFIG_FLAG_0x8C55D029 = 200,
		_CPED_CONFIG_FLAG_0x5E6466F6 = 201,
		_CPED_CONFIG_FLAG_0xEB5AD706 = 202,
		_CPED_CONFIG_FLAG_0x0EDDDDE7 = 203,
		_CPED_CONFIG_FLAG_0xA64F7B1D = 204,
		_CPED_CONFIG_FLAG_0x48532CBA = 205,
		_CPED_CONFIG_FLAG_0xAA25A9E7 = 206,
		_CPED_CONFIG_FLAG_0x415B26B9 = 207,
		CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
		CPED_CONFIG_FLAG_DodgedPlayer = 209,
		_CPED_CONFIG_FLAG_0x67405504 = 210,
		_CPED_CONFIG_FLAG_0x75DDD68C = 211,
		_CPED_CONFIG_FLAG_0x2AD879B4 = 212,
		_CPED_CONFIG_FLAG_0x51486F91 = 213,
		_CPED_CONFIG_FLAG_0x32F79E21 = 214,
		_CPED_CONFIG_FLAG_0xBF099213 = 215,
		_CPED_CONFIG_FLAG_0x054AC8E2 = 216,
		_CPED_CONFIG_FLAG_0x14E495CC = 217,
		_CPED_CONFIG_FLAG_0x3C7DF9DF = 218,
		_CPED_CONFIG_FLAG_0x848FFEF2 = 219,
		CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
		_CPED_CONFIG_FLAG_0x2618E1CF = 221,
		_CPED_CONFIG_FLAG_0x84F722FA = 222,
		_CPED_CONFIG_FLAG_Shrink = 223, // 0xD1B87B1F
		_CPED_CONFIG_FLAG_0x728AA918 = 224,
		CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
		CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
		_CPED_CONFIG_FLAG_0x59E91185 = 227,
		_CPED_CONFIG_FLAG_0x1EA7225F = 228,
		CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
		_CPED_CONFIG_FLAG_0x6DCA7D88 = 230,
		_CPED_CONFIG_FLAG_0xFC3E572D = 231,
		_CPED_CONFIG_FLAG_0x08E9F9CF = 232,
		_CPED_CONFIG_FLAG_0x2D3BA52D = 233,
		_CPED_CONFIG_FLAG_0xFD2F53EA = 234,
		_CPED_CONFIG_FLAG_0x31A1B03B = 235,
		CPED_CONFIG_FLAG_IsHoldingProp = 236,
		CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
		_CPED_CONFIG_FLAG_0xCE57C9A3 = 238,
		_CPED_CONFIG_FLAG_0x26149198 = 239,
		_CPED_CONFIG_FLAG_0x1B33B598 = 240,
		_CPED_CONFIG_FLAG_0x719B6E87 = 241,
		_CPED_CONFIG_FLAG_0x13E8E8E8 = 242,
		_CPED_CONFIG_FLAG_0xF29739AE = 243,
		_CPED_CONFIG_FLAG_0xABEA8A74 = 244,
		_CPED_CONFIG_FLAG_0xB60EA2BA = 245,
		_CPED_CONFIG_FLAG_0x536B0950 = 246,
		_CPED_CONFIG_FLAG_0x0C754ACA = 247,
		CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
		_CPED_CONFIG_FLAG_0x12659168 = 249,
		_CPED_CONFIG_FLAG_0x1BDF2F04 = 250,
		_CPED_CONFIG_FLAG_0x7728FAA3 = 251,
		_CPED_CONFIG_FLAG_0x6A807ED8 = 252,
		CPED_CONFIG_FLAG_OnStairs = 253,
		_CPED_CONFIG_FLAG_0xE1A2F73F = 254,
		_CPED_CONFIG_FLAG_0x5B3697C8 = 255,
		_CPED_CONFIG_FLAG_0xF1EB20A9 = 256,
		_CPED_CONFIG_FLAG_0x8B7DF407 = 257,
		_CPED_CONFIG_FLAG_0x329DCF1A = 258,
		_CPED_CONFIG_FLAG_0x8D90DD1B = 259,
		_CPED_CONFIG_FLAG_0xB8A292B7 = 260,
		_CPED_CONFIG_FLAG_0x8374B087 = 261,
		_CPED_CONFIG_FLAG_0x2AF558F0 = 262,
		_CPED_CONFIG_FLAG_0x82251455 = 263,
		_CPED_CONFIG_FLAG_0x30CF498B = 264,
		_CPED_CONFIG_FLAG_0xE1CD50AF = 265,
		_CPED_CONFIG_FLAG_0x72E4AE48 = 266,
		_CPED_CONFIG_FLAG_0xC2657EA1 = 267,
		_CPED_CONFIG_FLAG_0x29FF6030 = 268,
		_CPED_CONFIG_FLAG_0x8248A5EC = 269,
		CPED_CONFIG_FLAG_OnStairSlope = 270,
		_CPED_CONFIG_FLAG_0xA0897933 = 271,
		CPED_CONFIG_FLAG_DontBlipCop = 272,
		CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
		_CPED_CONFIG_FLAG_0xF7823618 = 274,
		_CPED_CONFIG_FLAG_0xDC305CCE = 275,
		CPED_CONFIG_FLAG_EdgeDetected = 276,
		_CPED_CONFIG_FLAG_0x92B67896 = 277,
		_CPED_CONFIG_FLAG_0xCAD677C9 = 278,
		CPED_CONFIG_FLAG_AvoidTearGas = 279,
		_CPED_CONFIG_FLAG_0x5276AC7B = 280,
		_CPED_CONFIG_FLAG_NoWrithe = 281, // 0x1032692A
		_CPED_CONFIG_FLAG_0xDA23E7F1 = 282,
		_CPED_CONFIG_FLAG_0x9139724D = 283,
		_CPED_CONFIG_FLAG_0xA1457461 = 284,
		_CPED_CONFIG_FLAG_0x4186E095 = 285,
		_CPED_CONFIG_FLAG_0xAC68E2EB = 286,
		CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
		CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
		_CPED_CONFIG_FLAG_0x1B9EE8A1 = 289,
		_CPED_CONFIG_FLAG_0xF3F5758C = 290,
		_CPED_CONFIG_FLAG_0x2A9307F1 = 291,
		_CPED_CONFIG_FLAG_FreezePosition = 292, // 0x7403D216
		_CPED_CONFIG_FLAG_0xA06A3C6C = 293,
		CPED_CONFIG_FLAG_DisableShockingEvents = 294,
		_CPED_CONFIG_FLAG_0xF8DA25A5 = 295,
		_CPED_CONFIG_FLAG_0x7EF55802 = 296,
		_CPED_CONFIG_FLAG_0xB31F1187 = 297,
		_CPED_CONFIG_FLAG_0x84315402 = 298,
		_CPED_CONFIG_FLAG_0x0FD69867 = 299,
		_CPED_CONFIG_FLAG_0xC7829B67 = 300,
		CPED_CONFIG_FLAG_DisablePedConstraints = 301,
		_CPED_CONFIG_FLAG_0x6D23CF25 = 302,
		_CPED_CONFIG_FLAG_0x2ADA871B = 303,
		_CPED_CONFIG_FLAG_0x47BC8A58 = 304,
		_CPED_CONFIG_FLAG_0xEB692FA5 = 305,
		_CPED_CONFIG_FLAG_0x4A133C50 = 306,
		_CPED_CONFIG_FLAG_0xC58099C3 = 307,
		_CPED_CONFIG_FLAG_0xF3D76D41 = 308,
		_CPED_CONFIG_FLAG_0xB0EEE9F2 = 309,
		CPED_CONFIG_FLAG_IsInCluster = 310,
		_CPED_CONFIG_FLAG_0x0FA153EF = 311,
		_CPED_CONFIG_FLAG_0xD73F5CD3 = 312,
		_CPED_CONFIG_FLAG_0xD4136C22 = 313,
		_CPED_CONFIG_FLAG_0xE404CA6B = 314,
		_CPED_CONFIG_FLAG_0xB9597446 = 315,
		_CPED_CONFIG_FLAG_0xD5C98277 = 316,
		_CPED_CONFIG_FLAG_0xD5060A9C = 317,
		_CPED_CONFIG_FLAG_0x3E5F1CBB = 318,
		_CPED_CONFIG_FLAG_0xD8BE1D54 = 319,
		_CPED_CONFIG_FLAG_0x0B1F191F = 320,
		_CPED_CONFIG_FLAG_0xC995167A = 321,
		CPED_CONFIG_FLAG_HasHighHeels = 322,
		_CPED_CONFIG_FLAG_0x86B01E54 = 323,
		_CPED_CONFIG_FLAG_0x3A56FE15 = 324,
		_CPED_CONFIG_FLAG_0xC03B736C = 325, // SpawnedAtScenario?
		_CPED_CONFIG_FLAG_0xBBF47729 = 326,
		_CPED_CONFIG_FLAG_0x22B668A8 = 327,
		_CPED_CONFIG_FLAG_0x2624D4D4 = 328,
		CPED_CONFIG_FLAG_DisableTalkTo = 329,
		CPED_CONFIG_FLAG_DontBlip = 330,
		CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
		_CPED_CONFIG_FLAG_0x630F55F3 = 332,
		_CPED_CONFIG_FLAG_0x150468FD = 333,
		_CPED_CONFIG_FLAG_0x914EBD6B = 334,
		_CPED_CONFIG_FLAG_0x79AF3B6D = 335,
		_CPED_CONFIG_FLAG_0x75C7A632 = 336,
		_CPED_CONFIG_FLAG_0x52D530E2 = 337,
		_CPED_CONFIG_FLAG_0xDB2A90E0 = 338,
		_CPED_CONFIG_FLAG_0x5922763D = 339,
		_CPED_CONFIG_FLAG_0x12ADB567 = 340,
		_CPED_CONFIG_FLAG_0x105C8518 = 341,
		_CPED_CONFIG_FLAG_0x106F703D = 342,
		_CPED_CONFIG_FLAG_0xED152C3E = 343,
		_CPED_CONFIG_FLAG_0xA0EFE6A8 = 344,
		_CPED_CONFIG_FLAG_0xBF348C82 = 345,
		_CPED_CONFIG_FLAG_0xCDDFE830 = 346,
		_CPED_CONFIG_FLAG_0x7B59BD9B = 347,
		_CPED_CONFIG_FLAG_0x0124C788 = 348,
		CPED_CONFIG_FLAG_EquipJetpack = 349,
		_CPED_CONFIG_FLAG_0x08D361A5 = 350,
		_CPED_CONFIG_FLAG_0xE13D1F7C = 351,
		_CPED_CONFIG_FLAG_0x40E25FB9 = 352,
		_CPED_CONFIG_FLAG_0x930629D9 = 353,
		_CPED_CONFIG_FLAG_0xECCF0C7F = 354,
		_CPED_CONFIG_FLAG_0xB6E9613B = 355,
		_CPED_CONFIG_FLAG_0x490C0478 = 356,
		_CPED_CONFIG_FLAG_0xE8865BEA = 357,
		_CPED_CONFIG_FLAG_0xF3C34A29 = 358,
		CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
		_CPED_CONFIG_FLAG_0xF660E115 = 360,
		_CPED_CONFIG_FLAG_0xAB0E6DED = 361,
		CPED_CONFIG_FLAG_HasReserveParachute = 362,
		CPED_CONFIG_FLAG_UseReserveParachute = 363,
		_CPED_CONFIG_FLAG_0x5C5D9CD3 = 364,
		_CPED_CONFIG_FLAG_0x8F7701F3 = 365,
		_CPED_CONFIG_FLAG_0xBC4436AD = 366,
		_CPED_CONFIG_FLAG_0xD7E07D37 = 367,
		_CPED_CONFIG_FLAG_0x03C4FD24 = 368,
		_CPED_CONFIG_FLAG_0x7675789A = 369,
		_CPED_CONFIG_FLAG_0xB7288A88 = 370,
		_CPED_CONFIG_FLAG_0xC06B6291 = 371,
		_CPED_CONFIG_FLAG_0x95A4A805 = 372,
		_CPED_CONFIG_FLAG_0xA8E9A042 = 373,
		CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
		_CPED_CONFIG_FLAG_0xBAC674B3 = 375,
		_CPED_CONFIG_FLAG_0x147F1FFB = 376,
		_CPED_CONFIG_FLAG_0x4376DD79 = 377,
		_CPED_CONFIG_FLAG_0xCD3DB518 = 378,
		_CPED_CONFIG_FLAG_0xFE4BA4B6 = 379,
		_CPED_CONFIG_FLAG_0x5DF03A55 = 380,
		_CPED_CONFIG_FLAG_0xBCD816CD = 381,
		_CPED_CONFIG_FLAG_0xCF02DD69 = 382,
		_CPED_CONFIG_FLAG_0xF73AFA2E = 383,
		_CPED_CONFIG_FLAG_0x80B9A9D0 = 384,
		_CPED_CONFIG_FLAG_0xF601F7EE = 385,
		_CPED_CONFIG_FLAG_0xA91350FC = 386,
		_CPED_CONFIG_FLAG_0x3AB23B96 = 387,
		CPED_CONFIG_FLAG_IsClimbingLadder = 388,
		CPED_CONFIG_FLAG_HasBareFeet = 389,
		_CPED_CONFIG_FLAG_0xB4B1CD4C = 390,
		_CPED_CONFIG_FLAG_0x5459AFB8 = 391,
		_CPED_CONFIG_FLAG_0x54F27667 = 392,
		_CPED_CONFIG_FLAG_0xC11D3E8F = 393,
		_CPED_CONFIG_FLAG_0x5419EB3E = 394,
		_CPED_CONFIG_FLAG_0x82D8DBB4 = 395,
		_CPED_CONFIG_FLAG_0x33B02D2F = 396,
		_CPED_CONFIG_FLAG_0xAE66176D = 397,
		_CPED_CONFIG_FLAG_0xA2692593 = 398,
		_CPED_CONFIG_FLAG_0x714C7E31 = 399,
		_CPED_CONFIG_FLAG_0xEC488AC7 = 400,
		_CPED_CONFIG_FLAG_0xAE398504 = 401,
		_CPED_CONFIG_FLAG_0xABC58D72 = 402,
		_CPED_CONFIG_FLAG_0x5E5B9591 = 403,
		_CPED_CONFIG_FLAG_0x6BA1091E = 404,
		_CPED_CONFIG_FLAG_0x77840177 = 405,
		_CPED_CONFIG_FLAG_0x1C7ACAC4 = 406,
		_CPED_CONFIG_FLAG_0x124420E9 = 407,
		_CPED_CONFIG_FLAG_0x75A65587 = 408,
		_CPED_CONFIG_FLAG_0xDFD2D55B = 409,
		_CPED_CONFIG_FLAG_0xBDD39919 = 410,
		_CPED_CONFIG_FLAG_0x43DEC267 = 411,
		_CPED_CONFIG_FLAG_0xE42B7797 = 412,
		CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
		_CPED_CONFIG_FLAG_0x4F8149F5 = 414,
		_CPED_CONFIG_FLAG_0xDD9ECA7A = 415,
		_CPED_CONFIG_FLAG_0x9E7EF9D2 = 416,
		_CPED_CONFIG_FLAG_0x2C6ED942 = 417,
		CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
		_CPED_CONFIG_FLAG_0xA488727D = 419,
		_CPED_CONFIG_FLAG_0xCFF5F6DE = 420,
		_CPED_CONFIG_FLAG_0x6D614599 = 421,
		CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
		_CPED_CONFIG_FLAG_0xFE401D26 = 423,
		CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
		_CPED_CONFIG_FLAG_0x2B42AE82 = 425,
		_CPED_CONFIG_FLAG_0x7A95734F = 426,
		_CPED_CONFIG_FLAG_0xDF4D8617 = 427,
		_CPED_CONFIG_FLAG_0x578F1F14 = 428,
		CPED_CONFIG_FLAG_DisableStartEngine = 429,
		CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
		_CPED_CONFIG_FLAG_0x153C9500 = 431,
		_CPED_CONFIG_FLAG_0xCB7A632E = 432,
		_CPED_CONFIG_FLAG_0xDE727981 = 433,
		CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
		_CPED_CONFIG_FLAG_0x12BBB935 = 435,
		_CPED_CONFIG_FLAG_0xAD0A1277 = 436,
		_CPED_CONFIG_FLAG_0xEA6AA46A = 437,
		CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
		_CPED_CONFIG_FLAG_0xCB7F3A1E = 439,
		_CPED_CONFIG_FLAG_0x50178878 = 440,
		_CPED_CONFIG_FLAG_0x051B4F0D = 441,
		_CPED_CONFIG_FLAG_0x2FC3DECC = 442,
		_CPED_CONFIG_FLAG_0xC0030B0B = 443,
		_CPED_CONFIG_FLAG_0xBBDAF1E9 = 444,
		_CPED_CONFIG_FLAG_0x944FE59C = 445,
		_CPED_CONFIG_FLAG_0x506FBA39 = 446,
		_CPED_CONFIG_FLAG_0xDD45FE84 = 447,
		_CPED_CONFIG_FLAG_0xE698AE75 = 448,
		_CPED_CONFIG_FLAG_0x199633F8 = 449,
		CPED_CONFIG_FLAG_PedIsArresting = 450,
		CPED_CONFIG_FLAG_IsDecoyPed = 451,
		_CPED_CONFIG_FLAG_0x3A251D83 = 452,
		_CPED_CONFIG_FLAG_0xA56F6986 = 453,
		_CPED_CONFIG_FLAG_0x1D19C622 = 454,
		_CPED_CONFIG_FLAG_0xB68D3EAB = 455,
		CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
		_CPED_CONFIG_FLAG_0x4BD5EBAD = 457,
		_CPED_CONFIG_FLAG_0xFCC5EBC5 = 458
	}; **/
	function SET_PED_CONFIG_FLAG(ped: EntityHandle, flagId: int, value: boolean): void
	/** PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
	Known values:
	PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)* **/
	function SET_PED_RESET_FLAG(ped: EntityHandle, flagId: int, doReset: boolean): void
	/** See SET_PED_CONFIG_FLAG **/
	function GET_PED_CONFIG_FLAG(ped: EntityHandle, flagId: int, p2: boolean): boolean
	/**  **/
	function GET_PED_RESET_FLAG(ped: EntityHandle, flagId: int): boolean
	/**  **/
	function SET_PED_GROUP_MEMBER_PASSENGER_INDEX(ped: EntityHandle, index: int): void
	/**  **/
	function SET_PED_CAN_EVASIVE_DIVE(ped: EntityHandle, toggle: boolean): void
	/** Presumably returns the Entity that the Ped is currently diving out of the way of.
	
	var num3;
	    if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)
	        if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0) **/
	function IS_PED_EVASIVE_DIVING(ped: EntityHandle, evadingEntity: Address): boolean
	/**  **/
	function SET_PED_SHOOTS_AT_COORD(ped: EntityHandle, x: float, y: float, z: float, toggle: boolean): void
	/** Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json **/
	function SET_PED_MODEL_IS_SUPPRESSED(modelHash: Hash, toggle: boolean): void
	/**  **/
	function STOP_ANY_PED_MODEL_BEING_SUPPRESSED(): void
	/**  **/
	function SET_PED_CAN_BE_TARGETED_WHEN_INJURED(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_GENERATES_DEAD_BODY_EVENTS(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(p0: any, p1: any): void
	/**  **/
	function SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(ped: EntityHandle, toggle: boolean): void
	/** PoliceMotorcycleHelmet   1024    
	RegularMotorcycleHelmet   4096    
	FiremanHelmet 16384   
	PilotHeadset  32768   
	PilotHelmet   65536
	--
	p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0. **/
	function GIVE_PED_HELMET(ped: EntityHandle, cannotRemove: boolean, helmetFlag: int, textureIndex: int): void
	/**  **/
	function REMOVE_PED_HELMET(ped: EntityHandle, instantly: boolean): void
	/**  **/
	function IS_PED_TAKING_OFF_HELMET(ped: EntityHandle): boolean
	/**  **/
	function SET_PED_HELMET(ped: EntityHandle, canWearHelmet: boolean): void
	/**  **/
	function SET_PED_HELMET_FLAG(ped: EntityHandle, helmetFlag: int): void
	/** List of component/props ID
	gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html **/
	function SET_PED_HELMET_PROP_INDEX(ped: EntityHandle, propIndex: int, p2: boolean): void
	/**  **/
	function SET_PED_HELMET_VISOR_PROP_INDICES(ped: EntityHandle, p1: boolean, p2: int, p3: int): void
	/**  **/
	function IS_PED_HELMET_VISOR_UP(ped: EntityHandle): boolean
	/**  **/
	function SET_PED_HELMET_TEXTURE_INDEX(ped: EntityHandle, textureIndex: int): void
	/** Returns true if the ped passed through the parenthesis is wearing a helmet. **/
	function IS_PED_WEARING_HELMET(ped: EntityHandle): boolean
	/**  **/
	function CLEAR_PED_STORED_HAT_PROP(ped: EntityHandle): void
	/**  **/
	function GET_PED_HELMET_STORED_HAT_PROP_INDEX(ped: EntityHandle): int
	/**  **/
	function GET_PED_HELMET_STORED_HAT_TEX_INDEX(ped: EntityHandle): int
	/**  **/
	function IS_CURRENT_HEAD_PROP_A_HELMET(p0: any): boolean
	/**  **/
	function SET_PED_TO_LOAD_COVER(ped: EntityHandle, toggle: boolean): void
	/** It simply makes the said ped to cower behind cover object(wall, desk, car)
	
	Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations. **/
	function SET_PED_CAN_COWER_IN_COVER(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_PEEK_IN_COVER(ped: EntityHandle, toggle: boolean): void
	/** This native does absolutely nothing, just a nullsub **/
	function SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(ped: EntityHandle, toggle: boolean): void
	/** "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1 **/
	function SET_PED_LEG_IK_MODE(ped: EntityHandle, mode: int): void
	/**  **/
	function SET_PED_MOTION_BLUR(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_CAN_SWITCH_WEAPON(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_DIES_INSTANTLY_IN_WATER(ped: EntityHandle, toggle: boolean): void
	/** Only appears in lamar1 script. **/
	function SET_LADDER_CLIMB_INPUT_STATE(ped: EntityHandle, p1: int): void
	/**  **/
	function STOP_PED_WEAPON_FIRING_WHEN_DROPPED(ped: EntityHandle): void
	/**  **/
	function SET_SCRIPTED_ANIM_SEAT_OFFSET(ped: EntityHandle, p1: float): void
	/** enum eCombatMovement // 0x4F456B61
	{
		CM_Stationary,
		CM_Defensive,
		CM_WillAdvance,
		CM_WillRetreat
	}; **/
	function SET_PED_COMBAT_MOVEMENT(ped: EntityHandle, combatMovement: int): void
	/** See SET_PED_COMBAT_MOVEMENT **/
	function GET_PED_COMBAT_MOVEMENT(ped: EntityHandle): int
	/** enum eCombatAbility // 0xE793438C
	{
		CA_Poor,
		CA_Average,
		CA_Professional,
		CA_NumTypes
	}; **/
	function SET_PED_COMBAT_ABILITY(ped: EntityHandle, abilityLevel: int): void
	/** enum eCombatRange // 0xB69160F5
	{
		CR_Near,
		CR_Medium,
		CR_Far,
		CR_VeryFar,
		CR_NumRanges
	}; **/
	function SET_PED_COMBAT_RANGE(ped: EntityHandle, combatRange: int): void
	/** See SET_PED_COMBAT_RANGE **/
	function GET_PED_COMBAT_RANGE(ped: EntityHandle): int
	/** enum eCombatAttributes // 0x0E8E7201
	{
		BF_CanUseCover = 0,
		BF_CanUseVehicles = 1,
		BF_CanDoDrivebys = 2,
		BF_CanLeaveVehicle = 3,
		BF_CanUseDynamicStrafeDecisions = 4,
		BF_AlwaysFight = 5,
		BF_0x66BB9FCC = 6,
		BF_0x6837DA41 = 7,
		BF_0xB4A13A5A = 8,
		BF_0xEE326AAD = 9,
		BF_0x7DF2CCFA = 10,
		BF_0x0036D422 = 11,
		BF_BlindFireWhenInCover = 12,
		BF_Aggressive = 13,
		BF_CanInvestigate = 14,
		BF_HasRadio = 15,
		BF_0x6BDE28D1 = 16,
		BF_AlwaysFlee = 17,
		BF_0x7852797D = 18,
		BF_0x33497B95 = 19,
		BF_CanTauntInVehicle = 20,
		BF_CanChaseTargetOnFoot = 21,
		BF_WillDragInjuredPedsToSafety = 22,
		BF_0xCD7168B8 = 23,
		BF_UseProximityFiringRate = 24,
		BF_0x48F914F8 = 25,
		BF_0x2EA543D0 = 26,
		BF_PerfectAccuracy = 27,
		BF_CanUseFrustratedAdvance = 28,
		BF_0x3D131AC1 = 29,
		BF_0x3AD95F27 = 30,
		BF_MaintainMinDistanceToTarget = 31,
		BF_0xEAD68AD2 = 32,
		BF_0xA206C2E0 = 33,
		BF_CanUsePeekingVariations = 34,
		BF_0xA5715184 = 35,
		BF_0xD5265533 = 36,
		BF_0x2B84C2BF = 37,
		BF_DisableBulletReactions = 38,
		BF_CanBust = 39,
		BF_0xAA525726 = 40,
		BF_CanCommandeerVehicles = 41,
		BF_CanFlank = 42,
		BF_SwitchToAdvanceIfCantFindCover = 43,
		BF_SwitchToDefensiveIfInCover = 44,
		BF_0xEB4786A0 = 45,
		BF_CanFightArmedPedsWhenNotArmed = 46,
		BF_0xA08E9402 = 47,
		BF_0x952EAD7D = 48,
		BF_UseEnemyAccuracyScaling = 49,
		BF_CanCharge = 50,
		BF_0xDA8C2BD3 = 51,
		BF_0x6562F017 = 52,
		BF_0xA2C3D53B = 53,
		BF_AlwaysEquipBestWeapon = 54,
		BF_CanSeeUnderwaterPeds = 55,
		BF_0xF619486B = 56,
		BF_0x61EB63A3 = 57,
		BF_DisableFleeFromCombat = 58,
		BF_0x8976D12B = 59,
		BF_CanThrowSmokeGrenade = 60,
		BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
		BF_0x5452A10C = 62,
		BF_FleesFromInvincibleOpponents = 63,
		BF_DisableBlockFromPursueDuringVehicleChase = 64,
		BF_DisableSpinOutDuringVehicleChase = 65,
		BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
		BF_0x0B404731 = 67,
		BF_DisableReactToBuddyShot = 68,
		BF_0x7FFD6AEB = 69,
		BF_0x51F4AEF8 = 70,
		BF_PermitChargeBeyondDefensiveArea = 71,
		BF_0x63E0A8E2 = 72,
		BF_0xDF974436 = 73,
		BF_0x556C080B = 74,
		BF_0xA4D50035 = 75,
		BF_SetDisableShoutTargetPositionOnCombatStart = 76,
		BF_DisableRespondedToThreatBroadcast = 77,
		BF_0xCBB01765 = 78,
		BF_0x4F862ED4 = 79,
		BF_0xEF9C7C40 = 80,
		BF_0xE51B494F = 81,
		BF_0x054D0199 = 82,
		BF_0xD36BCE94 = 83,
		BF_0xFB11F690 = 84,
		BF_0xD208A9AD = 85,
		BF_AllowDogFighting = 86,
		BF_0x07A6E531 = 87,
		BF_0x34F9317B = 88,
		BF_0x4240F5A9 = 89,
		BF_0xEE129DBD = 90,
		BF_0x053AEAD9 = 91
	}; **/
	function SET_PED_COMBAT_ATTRIBUTES(ped: EntityHandle, attributeId: int, enabled: boolean): void
	/** enum eTargetLossResponseType
	{
		TLR_ExitTask,
		TLR_NeverLoseTarget,
		TLR_SearchForTarget
	}; **/
	function SET_PED_TARGET_LOSS_RESPONSE(ped: EntityHandle, responseType: int): void
	/**  **/
	function IS_PED_PERFORMING_MELEE_ACTION(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_PERFORMING_STEALTH_KILL(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_PERFORMING_A_COUNTER_ATTACK(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_BEING_STEALTH_KILLED(ped: EntityHandle): boolean
	/**  **/
	function GET_MELEE_TARGET_FOR_PED(ped: EntityHandle): EntityHandle
	/**  **/
	function WAS_PED_KILLED_BY_STEALTH(ped: EntityHandle): boolean
	/**  **/
	function WAS_PED_KILLED_BY_TAKEDOWN(ped: EntityHandle): boolean
	/**  **/
	function WAS_PED_KNOCKED_OUT(ped: EntityHandle): boolean
	/** bit 1 (0x2) = use vehicle
	bit 15 (0x8000) = force cower **/
	function SET_PED_FLEE_ATTRIBUTES(ped: EntityHandle, attributeFlags: int, enable: boolean): void
	/** p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts. **/
	function SET_PED_COWER_HASH(ped: EntityHandle, p1: string): void
	/**  **/
	function SET_PED_STEERS_AROUND_DEAD_BODIES(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_STEERS_AROUND_PEDS(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_STEERS_AROUND_OBJECTS(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_STEERS_AROUND_VEHICLES(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_IS_AVOIDED_BY_OTHERS(p0: any, p1: boolean): void
	/**  **/
	function SET_PED_INCREASED_AVOIDANCE_RADIUS(ped: EntityHandle): void
	/**  **/
	function SET_PED_BLOCKS_PATHING_WHEN_DEAD(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_NO_TIME_DELAY_BEFORE_SHOT(p0: any): void
	/**  **/
	function IS_ANY_PED_NEAR_POINT(x: float, y: float, z: float, radius: float): boolean
	/**  **/
	function FORCE_PED_AI_AND_ANIMATION_UPDATE(ped: EntityHandle, p1: boolean, p2: boolean): void
	/**  **/
	function IS_PED_HEADING_TOWARDS_POSITION(ped: EntityHandle, x: float, y: float, z: float, p4: float): boolean
	/**  **/
	function REQUEST_PED_VISIBILITY_TRACKING(ped: EntityHandle): void
	/**  **/
	function REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(ped: EntityHandle, p1: boolean): void
	/**  **/
	function REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(ped: EntityHandle, p1: boolean): void
	/**  **/
	function REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(ped: EntityHandle, p1: boolean): void
	/** returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
	
	
	Target needs to be tracked.. won't work otherwise. **/
	function IS_TRACKED_PED_VISIBLE(ped: EntityHandle): boolean
	/**  **/
	function GET_TRACKED_PED_PIXELCOUNT(ped: EntityHandle): int
	/**  **/
	function IS_PED_TRACKED(ped: EntityHandle): boolean
	/**  **/
	function HAS_PED_RECEIVED_EVENT(ped: EntityHandle, eventId: int): boolean
	/**  **/
	function CAN_PED_SEE_HATED_PED(ped1: EntityHandle, ped2: EntityHandle): boolean
	/**  **/
	function CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(ped: EntityHandle, p1: IntPointer): boolean
	/**  **/
	function CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(ped: EntityHandle, p1: IntPointer): boolean
	/** no bone= -1
	
	boneIds:
	        SKEL_ROOT = 0x0,
	   SKEL_Pelvis = 0x2e28,
	 SKEL_L_Thigh = 0xe39f,
	    SKEL_L_Calf = 0xf9bb,
	 SKEL_L_Foot = 0x3779,
	 SKEL_L_Toe0 = 0x83c,
	  IK_L_Foot = 0xfedd,
	   PH_L_Foot = 0xe175,
	   MH_L_Knee = 0xb3fe,
	   SKEL_R_Thigh = 0xca72,
	    SKEL_R_Calf = 0x9000,
	 SKEL_R_Foot = 0xcc4d,
	 SKEL_R_Toe0 = 0x512d,
	 IK_R_Foot = 0x8aae,
	   PH_R_Foot = 0x60e6,
	   MH_R_Knee = 0x3fcf,
	   RB_L_ThighRoll = 0x5c57,
	  RB_R_ThighRoll = 0x192a,
	  SKEL_Spine_Root = 0xe0fd,
	 SKEL_Spine0 = 0x5c01,
	 SKEL_Spine1 = 0x60f0,
	 SKEL_Spine2 = 0x60f1,
	 SKEL_Spine3 = 0x60f2,
	 SKEL_L_Clavicle = 0xfcd9,
	 SKEL_L_UpperArm = 0xb1c5,
	 SKEL_L_Forearm = 0xeeeb,
	  SKEL_L_Hand = 0x49d9,
	 SKEL_L_Finger00 = 0x67f2,
	 SKEL_L_Finger01 = 0xff9,
	  SKEL_L_Finger02 = 0xffa,
	  SKEL_L_Finger10 = 0x67f3,
	 SKEL_L_Finger11 = 0x1049,
	 SKEL_L_Finger12 = 0x104a,
	 SKEL_L_Finger20 = 0x67f4,
	 SKEL_L_Finger21 = 0x1059,
	 SKEL_L_Finger22 = 0x105a,
	 SKEL_L_Finger30 = 0x67f5,
	 SKEL_L_Finger31 = 0x1029,
	 SKEL_L_Finger32 = 0x102a,
	 SKEL_L_Finger40 = 0x67f6,
	 SKEL_L_Finger41 = 0x1039,
	 SKEL_L_Finger42 = 0x103a,
	 PH_L_Hand = 0xeb95,
	   IK_L_Hand = 0x8cbd,
	   RB_L_ForeArmRoll = 0xee4f,
	    RB_L_ArmRoll = 0x1470,
	    MH_L_Elbow = 0x58b7,
	  SKEL_R_Clavicle = 0x29d2,
	 SKEL_R_UpperArm = 0x9d4d,
	 SKEL_R_Forearm = 0x6e5c,
	  SKEL_R_Hand = 0xdead,
	 SKEL_R_Finger00 = 0xe5f2,
	 SKEL_R_Finger01 = 0xfa10,
	 SKEL_R_Finger02 = 0xfa11,
	 SKEL_R_Finger10 = 0xe5f3,
	 SKEL_R_Finger11 = 0xfa60,
	 SKEL_R_Finger12 = 0xfa61,
	 SKEL_R_Finger20 = 0xe5f4,
	 SKEL_R_Finger21 = 0xfa70,
	 SKEL_R_Finger22 = 0xfa71,
	 SKEL_R_Finger30 = 0xe5f5,
	 SKEL_R_Finger31 = 0xfa40,
	 SKEL_R_Finger32 = 0xfa41,
	 SKEL_R_Finger40 = 0xe5f6,
	 SKEL_R_Finger41 = 0xfa50,
	 SKEL_R_Finger42 = 0xfa51,
	 PH_R_Hand = 0x6f06,
	   IK_R_Hand = 0x188e,
	   RB_R_ForeArmRoll = 0xab22,
	    RB_R_ArmRoll = 0x90ff,
	    MH_R_Elbow = 0xbb0,
	   SKEL_Neck_1 = 0x9995,
	 SKEL_Head = 0x796e,
	   IK_Head = 0x322c,
	 FACIAL_facialRoot = 0xfe2c,
	   FB_L_Brow_Out_000 = 0xe3db,
	   FB_L_Lid_Upper_000 = 0xb2b6,
	  FB_L_Eye_000 = 0x62ac,
	    FB_L_CheekBone_000 = 0x542e,
	  FB_L_Lip_Corner_000 = 0x74ac,
	 FB_R_Lid_Upper_000 = 0xaa10,
	  FB_R_Eye_000 = 0x6b52,
	    FB_R_CheekBone_000 = 0x4b88,
	  FB_R_Brow_Out_000 = 0x54c,
	    FB_R_Lip_Corner_000 = 0x2ba6,
	 FB_Brow_Centre_000 = 0x9149,
	  FB_UpperLipRoot_000 = 0x4ed2,
	 FB_UpperLip_000 = 0xf18f,
	 FB_L_Lip_Top_000 = 0x4f37,
	    FB_R_Lip_Top_000 = 0x4537,
	    FB_Jaw_000 = 0xb4a0,
	  FB_LowerLipRoot_000 = 0x4324,
	 FB_LowerLip_000 = 0x508f,
	 FB_L_Lip_Bot_000 = 0xb93b,
	    FB_R_Lip_Bot_000 = 0xc33b,
	    FB_Tongue_000 = 0xb987,
	   RB_Neck_1 = 0x8b93,
	   IK_Root = 0xdd1c **/
	function GET_PED_BONE_INDEX(ped: EntityHandle, boneId: int): int
	/**  **/
	function GET_PED_RAGDOLL_BONE_INDEX(ped: EntityHandle, bone: int): int
	/** Values look to be between 0.0 and 1.0
	From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
	
	You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f. **/
	function SET_PED_ENVEFF_SCALE(ped: EntityHandle, value: float): void
	/**  **/
	function GET_PED_ENVEFF_SCALE(ped: EntityHandle): float
	/**  **/
	function SET_ENABLE_PED_ENVEFF_SCALE(ped: EntityHandle, toggle: boolean): void
	/** In agency_heist3b.c4, its like this 90% of the time:
	
	PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.099);
	PED::SET_PED_ENVEFF_SCALE(ped, 1.0);
	PED::SET_PED_ENVEFF_CPV_ADD(ped, 87, 81, 68);
	PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
	
	and its like this 10% of the time:
	
	PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.2);
	PED::SET_PED_ENVEFF_SCALE(ped, 0.65);
	PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, 74, 69, 60);
	PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1); **/
	function SET_PED_ENVEFF_CPV_ADD(ped: EntityHandle, p1: float): void
	/** Something related to the environmental effects natives.
	In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60} **/
	function SET_PED_ENVEFF_COLOR_MODULATOR(ped: EntityHandle, p1: int, p2: int, p3: int): void
	/** intensity: 0.0f - 1.0f
	
	This native sets the emissive intensity for the given ped. It is used for different 'glow' levels on illuminated clothing. **/
	function SET_PED_EMISSIVE_SCALE(ped: EntityHandle, intensity: float): void
	/** Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.
	Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity. **/
	function GET_PED_EMISSIVE_SCALE(ped: EntityHandle): float
	/**  **/
	function IS_PED_SHADER_READY(ped: EntityHandle): boolean
	/**  **/
	function SET_PED_ENABLE_CREW_EMBLEM(ped: EntityHandle, toggle: boolean): void
	/** This native does absolutely nothing, just a nullsub **/
	function REQUEST_RAGDOLL_BOUNDS_UPDATE(p0: any, p1: any): void
	/** Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko **/
	function SET_PED_AO_BLOB_RENDERING(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_PED_SHELTERED(ped: EntityHandle): boolean
	/** p6 always 2 (but it doesnt seem to matter...)
	
	roll and pitch 0
	yaw to Ped.rotation **/
	function CREATE_SYNCHRONIZED_SCENE(x: float, y: float, z: float, roll: float, pitch: float, yaw: float, p6: int): int
	/**  **/
	function CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(x: float, y: float, z: float, radius: float, object: Hash): int
	/** Returns true if a synchronized scene is running **/
	function IS_SYNCHRONIZED_SCENE_RUNNING(sceneId: int): boolean
	/**  **/
	function SET_SYNCHRONIZED_SCENE_ORIGIN(sceneID: int, x: float, y: float, z: float, roll: float, pitch: float, yaw: float, p7: boolean): void
	/**  **/
	function SET_SYNCHRONIZED_SCENE_PHASE(sceneID: int, phase: float): void
	/**  **/
	function GET_SYNCHRONIZED_SCENE_PHASE(sceneID: int): float
	/**  **/
	function SET_SYNCHRONIZED_SCENE_RATE(sceneID: int, rate: float): void
	/**  **/
	function GET_SYNCHRONIZED_SCENE_RATE(sceneID: int): float
	/**  **/
	function SET_SYNCHRONIZED_SCENE_LOOPED(sceneID: int, toggle: boolean): void
	/**  **/
	function IS_SYNCHRONIZED_SCENE_LOOPED(sceneID: int): boolean
	/**  **/
	function SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID: int, toggle: boolean): void
	/**  **/
	function IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID: int): boolean
	/**  **/
	function ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(sceneID: int, entity: EntityHandle, boneIndex: int): void
	/**  **/
	function DETACH_SYNCHRONIZED_SCENE(sceneID: int): void
	/**  **/
	function TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(scene: int): void
	/** Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.
	
	enum eMotionState // 0x92A659FE
	{
		MotionState_None = 0xEE717723,
		MotionState_Idle = 0x9072A713,
		MotionState_Walk = 0xD827C3DB,
		MotionState_Run = 0xFFF7E7A4,
		MotionState_Sprint = 0xBD8817DB,
		MotionState_Crouch_Idle = 0x43FB099E,
		MotionState_Crouch_Walk = 0x08C31A98,
		MotionState_Crouch_Run = 0x3593CF09,
		MotionState_DoNothing = 0x0EC17E58,
		MotionState_AnimatedVelocity = 0x551AAC43,
		MotionState_InVehicle = 0x94D9D58D,
		MotionState_Aiming = 0x3F67C6AF,
		MotionState_Diving_Idle = 0x4848CDED,
		MotionState_Diving_Swim = 0x916E828C,
		MotionState_Swimming_TreadWater = 0xD1BF11C7,
		MotionState_Dead = 0x0DBB071C,
		MotionState_Stealth_Idle = 0x422D7A25,
		MotionState_Stealth_Walk = 0x042AB6A2,
		MotionState_Stealth_Run = 0xFB0B79E1,
		MotionState_Parachuting = 0xBAC0F10B,
		MotionState_ActionMode_Idle = 0xDA40A0DC,
		MotionState_ActionMode_Walk = 0xD2905EA7,
		MotionState_ActionMode_Run = 0x31BADE14,
		MotionState_Jetpack = 0x535E6A5E
	}; **/
	function FORCE_PED_MOTION_STATE(ped: EntityHandle, motionStateHash: Hash, p2: boolean, p3: int, p4: boolean): boolean
	/**  **/
	function GET_PED_CURRENT_MOVE_BLEND_RATIO(ped: EntityHandle, speedX: FloatPointer, speedY: FloatPointer): boolean
	/**  **/
	function SET_PED_MAX_MOVE_BLEND_RATIO(ped: EntityHandle, value: float): void
	/**  **/
	function SET_PED_MIN_MOVE_BLEND_RATIO(ped: EntityHandle, value: float): void
	/** Min: 0.00
	Max: 10.00
	
	Can be used in combo with fast run cheat.
	
	When value is set to 10.00:
	Sprinting without fast run cheat: 66 m/s
	Sprinting with fast run cheat: 77 m/s
	
	Needs to be looped!
	
	Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f. **/
	function SET_PED_MOVE_RATE_OVERRIDE(ped: EntityHandle, value: float): void
	/**  **/
	function SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(p0: any, p1: any): void
	/** Checks if the specified unknown flag is set in the ped's model.
	The engine itself seems to exclusively check for flags 1 and 4 (Might be inlined code of the check that checks for other flags).
	Game scripts exclusively check for flags 1 and 4. **/
	function PED_HAS_SEXINESS_FLAG_SET(ped: EntityHandle, flag: int): boolean
	/** Returns size of array, passed into the second variable.
	
	See below for usage information.
	
	This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
	
	//Setup the array
	 const int numElements = 10;
	   const int arrSize = numElements * 2 + 2;
	  Any veh[arrSize];
	 //0 index is the size of the array
	    veh[0] = numElements;
	
	   int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
	
	 if (veh != NULL)
	  {
	     //Simple loop to go through results
	       for (int i = 0; i < count; i++)
	        {
	         int offsettedID = i * 2 + 2;
	          //Make sure it exists
	         if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
	          {
	             //Do something
	            }
	     }
	 }   **/
	function GET_PED_NEARBY_VEHICLES(ped: EntityHandle, sizeAndVehs: Address): int
	/** sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
	ignore - ped type to ignore
	
	Return value is the number of peds found and added to the array passed.
	
	-----------------------------------
	
	To make this work in most menu bases at least in C++ do it like so,
	
	 Formatted Example: https://pastebin.com/D8an9wwp
	
	-----------------------------------
	
	Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687 **/
	function GET_PED_NEARBY_PEDS(ped: EntityHandle, sizeAndPeds: Address, ignore: int): int
	/**  **/
	function HAVE_ALL_STREAMING_REQUESTS_COMPLETED(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_USING_ACTION_MODE(ped: EntityHandle): boolean
	/** p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION". **/
	function SET_PED_USING_ACTION_MODE(ped: EntityHandle, p1: boolean, p2: int, action: string): void
	/** name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts. **/
	function SET_MOVEMENT_MODE_OVERRIDE(ped: EntityHandle, name: string): void
	/** Overrides the ped's collision capsule radius for the current tick.
	Must be called every tick to be effective.
	
	Setting this to 0.001 will allow warping through some objects. **/
	function SET_PED_CAPSULE(ped: EntityHandle, value: float): void
	/** gtaforums.com/topic/885580-ped-headshotmugshot-txd/ **/
	function REGISTER_PEDHEADSHOT(ped: EntityHandle): int
	/**  **/
	function REGISTER_PEDHEADSHOT_HIRES(ped: EntityHandle): int
	/** Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png **/
	function REGISTER_PEDHEADSHOT_TRANSPARENT(ped: EntityHandle): int
	/** gtaforums.com/topic/885580-ped-headshotmugshot-txd/ **/
	function UNREGISTER_PEDHEADSHOT(id: int): void
	/** gtaforums.com/topic/885580-ped-headshotmugshot-txd/ **/
	function IS_PEDHEADSHOT_VALID(id: int): boolean
	/** gtaforums.com/topic/885580-ped-headshotmugshot-txd/ **/
	function IS_PEDHEADSHOT_READY(id: int): boolean
	/** gtaforums.com/topic/885580-ped-headshotmugshot-txd/ **/
	function GET_PEDHEADSHOT_TXD_STRING(id: int): string
	/**  **/
	function REQUEST_PEDHEADSHOT_IMG_UPLOAD(id: int): boolean
	/**  **/
	function RELEASE_PEDHEADSHOT_IMG_UPLOAD(id: int): void
	/**  **/
	function IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE(): boolean
	/**  **/
	function HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED(): boolean
	/**  **/
	function HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED(): boolean
	/**  **/
	function SET_PED_HEATSCALE_OVERRIDE(ped: EntityHandle, heatScale: float): void
	/**  **/
	function DISABLE_PED_HEATSCALE_OVERRIDE(ped: EntityHandle): void
	/**  **/
	function SPAWNPOINTS_START_SEARCH(p0: float, p1: float, p2: float, p3: float, p4: float, interiorFlags: int, scale: float, duration: int): void
	/**  **/
	function SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, width: float, interiorFlags: int, scale: float, duration: int): void
	/**  **/
	function SPAWNPOINTS_CANCEL_SEARCH(): void
	/**  **/
	function SPAWNPOINTS_IS_SEARCH_ACTIVE(): boolean
	/**  **/
	function SPAWNPOINTS_IS_SEARCH_COMPLETE(): boolean
	/**  **/
	function SPAWNPOINTS_IS_SEARCH_FAILED(): boolean
	/**  **/
	function SPAWNPOINTS_GET_NUM_SEARCH_RESULTS(): int
	/**  **/
	function SPAWNPOINTS_GET_SEARCH_RESULT(randomInt: int, x: FloatPointer, y: FloatPointer, z: FloatPointer): void
	/**  **/
	function SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(p0: int, p1: IntPointer): void
	/**  **/
	function SET_IK_TARGET(ped: EntityHandle, ikIndex: int, entityLookAt: EntityHandle, boneLookAt: int, offsetX: float, offsetY: float, offsetZ: float, p7: any, blendInDuration: int, blendOutDuration: int): void
	/**  **/
	function FORCE_INSTANT_LEG_IK_SETUP(ped: EntityHandle): void
	/**  **/
	function REQUEST_ACTION_MODE_ASSET(asset: string): void
	/**  **/
	function HAS_ACTION_MODE_ASSET_LOADED(asset: string): boolean
	/**  **/
	function REMOVE_ACTION_MODE_ASSET(asset: string): void
	/**  **/
	function REQUEST_STEALTH_MODE_ASSET(asset: string): void
	/**  **/
	function HAS_STEALTH_MODE_ASSET_LOADED(asset: string): boolean
	/**  **/
	function REMOVE_STEALTH_MODE_ASSET(asset: string): void
	/**  **/
	function SET_PED_LOD_MULTIPLIER(ped: EntityHandle, multiplier: float): void
	/**  **/
	function SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(ped: EntityHandle, toggle: boolean, p2: int): void
	/**  **/
	function SET_FORCE_FOOTSTEP_UPDATE(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_FORCE_STEP_TYPE(ped: EntityHandle, p1: boolean, type: int, p3: int): void
	/**  **/
	function IS_ANY_HOSTILE_PED_NEAR_POINT(ped: EntityHandle, x: float, y: float, z: float, radius: float): boolean
	/** Toggles config flag CPED_CONFIG_FLAG_CanPlayInCarIdles. **/
	function SET_PED_CAN_PLAY_IN_CAR_IDLES(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_TARGET_PED_IN_PERCEPTION_AREA(ped: EntityHandle, targetPed: EntityHandle, p2: float, p3: float, p4: float, p5: float): boolean
	/** Min and max are usually 100.0 and 200.0 **/
	function SET_POP_CONTROL_SPHERE_THIS_FRAME(x: float, y: float, z: float, min: float, max: float): void
	/**  **/
	function FORCE_ZERO_MASS_IN_COLLISIONS(ped: EntityHandle): void
	/**  **/
	function SET_DISABLE_HIGH_FALL_DEATH(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_PHONE_PALETTE_IDX(p0: any, p1: any): void
	/**  **/
	function SET_PED_STEER_BIAS(ped: EntityHandle, value: float): void
	/**  **/
	function IS_PED_SWITCHING_WEAPON(Ped: EntityHandle): boolean
	/**  **/
	function SET_PED_TREATED_AS_FRIENDLY(p0: any, p1: any, p2: any): void
	/**  **/
	function SET_DISABLE_PED_MAP_COLLISION(ped: EntityHandle): void
	/**  **/
	function ENABLE_MP_LIGHT(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_MP_LIGHT_ENABLED(ped: EntityHandle): boolean
	/**  **/
	function CLEAR_COVER_POINT_FOR_PED(ped: EntityHandle): void
	/**  **/
	function SET_ALLOW_STUNT_JUMP_CAMERA(ped: EntityHandle, toggle: boolean): void
}

/** @noSelf **/
declare namespace PHYSICS {
	/** Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
	__
	
	Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)
	
	When attached, Position<vector> does not matter
	When attached, Angle<vector> does not matter
	
	Rope Type:
	4 and bellow is a thick rope
	5 and up are small metal wires
	0 crashes the game
	
	Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.
	
	windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.
	
	Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).
	
	breakable - Whether or not shooting the rope will break it.
	
	unkPtr - unknown ptr, always 0 in orig scripts
	__
	
	Lengths can be calculated like so:
	
	float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length
	
	
	NOTES:
	
	Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
	
	Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring. **/
	function ADD_ROPE(x: float, y: float, z: float, rotX: float, rotY: float, rotZ: float, length: float, ropeType: int, maxLength: float, minLength: float, windingSpeed: float, p11: boolean, p12: boolean, rigid: boolean, p14: float, breakWhenShot: boolean, unkPtr: Address): int
	/**  **/
	function DELETE_ROPE(ropeId: IntPointer): void
	/**  **/
	function DELETE_CHILD_ROPE(ropeId: int): void
	/**  **/
	function DOES_ROPE_EXIST(ropeId: IntPointer): boolean
	/**  **/
	function ROPE_DRAW_ENABLED(ropeId: IntPointer, p1: boolean): void
	/**  **/
	function ROPE_DRAW_SHADOW_ENABLED(ropeId: IntPointer, toggle: boolean): void
	/** Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string. **/
	function LOAD_ROPE_DATA(ropeId: int, rope_preset: string): void
	/**  **/
	function PIN_ROPE_VERTEX(ropeId: int, vertex: int, x: float, y: float, z: float): void
	/**  **/
	function UNPIN_ROPE_VERTEX(ropeId: int, vertex: int): void
	/**  **/
	function GET_ROPE_VERTEX_COUNT(ropeId: int): int
	/** Attaches entity 1 to entity 2. **/
	function ATTACH_ENTITIES_TO_ROPE(ropeId: int, ent1: EntityHandle, ent2: EntityHandle, ent1_x: float, ent1_y: float, ent1_z: float, ent2_x: float, ent2_y: float, ent2_z: float, length: float, p10: boolean, p11: boolean, p12: Address, p13: Address): void
	/** The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin. **/
	function ATTACH_ROPE_TO_ENTITY(ropeId: int, entity: EntityHandle, x: float, y: float, z: float, p5: boolean): void
	/**  **/
	function DETACH_ROPE_FROM_ENTITY(ropeId: int, entity: EntityHandle): void
	/**  **/
	function ROPE_SET_UPDATE_PINVERTS(ropeId: int): void
	/**  **/
	function ROPE_SET_UPDATE_ORDER(ropeId: int, p1: any): void
	/**  **/
	function ROPE_SET_SMOOTH_REELIN(ropeId: int, p1: boolean): void
	/**  **/
	function IS_ROPE_ATTACHED_AT_BOTH_ENDS(ropeId: IntPointer): boolean
	/**  **/
	function GET_ROPE_LAST_VERTEX_COORD(ropeId: int): Vector3
	/**  **/
	function GET_ROPE_VERTEX_COORD(ropeId: int, vertex: int): Vector3
	/**  **/
	function START_ROPE_WINDING(ropeId: int): void
	/**  **/
	function STOP_ROPE_WINDING(ropeId: int): void
	/**  **/
	function START_ROPE_UNWINDING_FRONT(ropeId: int): void
	/**  **/
	function STOP_ROPE_UNWINDING_FRONT(ropeId: int): void
	/**  **/
	function ROPE_CONVERT_TO_SIMPLE(ropeId: int): void
	/** Loads rope textures for all ropes in the current scene. **/
	function ROPE_LOAD_TEXTURES(): void
	/**  **/
	function ROPE_ARE_TEXTURES_LOADED(): boolean
	/** Unloads rope textures for all ropes in the current scene. **/
	function ROPE_UNLOAD_TEXTURES(): void
	/**  **/
	function DOES_SCRIPT_OWN_ROPE(ropeId: int): boolean
	/**  **/
	function ROPE_ATTACH_VIRTUAL_BOUND_GEOM(ropeId: int, p1: int, p2: float, p3: float, p4: float, p5: float, p6: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void
	/**  **/
	function ROPE_CHANGE_SCRIPT_OWNER(p0: any, p1: boolean, p2: boolean): void
	/**  **/
	function ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(ropeId: int, p1: int): void
	/**  **/
	function ROPE_GET_DISTANCE_BETWEEN_ENDS(ropeId: int): float
	/** Forces a rope to a certain length. **/
	function ROPE_FORCE_LENGTH(ropeId: int, length: float): void
	/** Reset a rope to a certain length. **/
	function ROPE_RESET_LENGTH(ropeId: int, length: float): void
	/**  **/
	function APPLY_IMPULSE_TO_CLOTH(posX: float, posY: float, posZ: float, vecX: float, vecY: float, vecZ: float, impulse: float): void
	/**  **/
	function SET_DAMPING(entity: EntityHandle, vertex: int, value: float): void
	/**  **/
	function ACTIVATE_PHYSICS(entity: EntityHandle): void
	/**  **/
	function SET_CGOFFSET(entity: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function GET_CGOFFSET(entity: EntityHandle): Vector3
	/**  **/
	function SET_CG_AT_BOUNDCENTER(entity: EntityHandle): void
	/**  **/
	function BREAK_ENTITY_GLASS(entity: EntityHandle, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float, p7: float, p8: float, p9: any, p10: boolean): void
	/**  **/
	function GET_IS_ENTITY_A_FRAG(object: EntityHandle): boolean
	/**  **/
	function SET_DISABLE_BREAKING(object: EntityHandle, toggle: boolean): void
	/**  **/
	function RESET_DISABLE_BREAKING(object: EntityHandle): void
	/**  **/
	function SET_DISABLE_FRAG_DAMAGE(object: EntityHandle, toggle: boolean): void
	/** PED_RAGDOLL_BUMP Proof? **/
	function SET_USE_KINEMATIC_PHYSICS(entity: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_IN_STUNT_MODE(p0: boolean): void
	/** Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds. **/
	function SET_IN_ARENA_MODE(toggle: boolean): void
}

/** @noSelf **/
declare namespace PLAYER {
	/** Gets the ped for a specified player index. **/
	function GET_PLAYER_PED(player: Player): EntityHandle
	/** Does the same like PLAYER::GET_PLAYER_PED **/
	function GET_PLAYER_PED_SCRIPT_INDEX(player: Player): EntityHandle
	/** Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
	Make sure to request the model first and wait until it has loaded. **/
	function SET_PLAYER_MODEL(player: Player, model: Hash): void
	/**  **/
	function CHANGE_PLAYER_PED(player: Player, ped: EntityHandle, p2: boolean, resetDamage: boolean): void
	/**  **/
	function GET_PLAYER_RGB_COLOUR(player: Player, r: IntPointer, g: IntPointer, b: IntPointer): void
	/** Gets the number of players in the current session.
	If not multiplayer, always returns 1. **/
	function GET_NUMBER_OF_PLAYERS(): int
	/** Gets the player's team.
	Does nothing in singleplayer. **/
	function GET_PLAYER_TEAM(player: Player): int
	/** Set player team on deathmatch and last team standing.. **/
	function SET_PLAYER_TEAM(player: Player, team: int): void
	/**  **/
	function GET_NUMBER_OF_PLAYERS_IN_TEAM(team: int): int
	/**  **/
	function GET_PLAYER_NAME(player: Player): string
	/** Remnant from GTA IV. Does nothing in GTA V. **/
	function GET_WANTED_LEVEL_RADIUS(player: Player): float
	/**  **/
	function GET_PLAYER_WANTED_CENTRE_POSITION(player: Player): Vector3
	/** # Predominant call signatures
	PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));
	
	# Parameter value ranges
	P0: PLAYER::PLAYER_ID()
	P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
	P2: Not set by any call **/
	function SET_PLAYER_WANTED_CENTRE_POSITION(player: Player, position: Vector3Pointer, p2: boolean, p3: boolean): void
	/** Drft **/
	function GET_WANTED_LEVEL_THRESHOLD(wantedLevel: int): int
	/** Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
	
	wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
	
	disableNoMission-  Disables When Off Mission- appears to always be false
	 **/
	function SET_PLAYER_WANTED_LEVEL(player: Player, wantedLevel: int, disableNoMission: boolean): void
	/** p2 is always false in R* scripts **/
	function SET_PLAYER_WANTED_LEVEL_NO_DROP(player: Player, wantedLevel: int, p2: boolean): void
	/** Forces any pending wanted level to be applied to the specified player immediately.
	
	Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
	
	Second parameter is unknown (always false). **/
	function SET_PLAYER_WANTED_LEVEL_NOW(player: Player, p1: boolean): void
	/**  **/
	function ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(player: Player): boolean
	/**  **/
	function ARE_PLAYER_STARS_GREYED_OUT(player: Player): boolean
	/**  **/
	function IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(player: Player): boolean
	/**  **/
	function SET_DISPATCH_COPS_FOR_PLAYER(player: Player, toggle: boolean): void
	/**  **/
	function IS_PLAYER_WANTED_LEVEL_GREATER(player: Player, wantedLevel: int): boolean
	/** This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
	
	PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.  **/
	function CLEAR_PLAYER_WANTED_LEVEL(player: Player): void
	/**  **/
	function IS_PLAYER_DEAD(player: Player): boolean
	/**  **/
	function IS_PLAYER_PRESSING_HORN(player: Player): boolean
	/** Flags:
	SPC_AMBIENT_SCRIPT = (1 << 1),
	SPC_CLEAR_TASKS = (1 << 2),
	SPC_REMOVE_FIRES = (1 << 3),
	SPC_REMOVE_EXPLOSIONS = (1 << 4),
	SPC_REMOVE_PROJECTILES = (1 << 5),
	SPC_DEACTIVATE_GADGETS = (1 << 6),
	SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
	SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
	SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
	SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
	SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
	SPC_ALLOW_PAD_SHAKE = (1 << 12)
	
	See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt **/
	function SET_PLAYER_CONTROL(player: Player, bHasControl: boolean, flags: int): void
	/**  **/
	function GET_PLAYER_WANTED_LEVEL(player: Player): int
	/**  **/
	function SET_MAX_WANTED_LEVEL(maxWantedLevel: int): void
	/** If toggle is set to false:
	 The police won't be shown on the (mini)map
	
	If toggle is set to true:
	 The police will be shown on the (mini)map **/
	function SET_POLICE_RADAR_BLIPS(toggle: boolean): void
	/** The player will be ignored by the police if toggle is set to true **/
	function SET_POLICE_IGNORE_PLAYER(player: Player, toggle: boolean): void
	/** Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested. **/
	function IS_PLAYER_PLAYING(player: Player): boolean
	/**  **/
	function SET_EVERYONE_IGNORE_PLAYER(player: Player, toggle: boolean): void
	/**  **/
	function SET_ALL_RANDOM_PEDS_FLEE(player: Player, toggle: boolean): void
	/**  **/
	function SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(player: Player): void
	/**  **/
	function SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(player: Player, toggle: boolean): void
	/** - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
	 **/
	function SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(player: Player): void
	/**  **/
	function SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(player: Player): void
	/**  **/
	function SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(player: Player, toggle: boolean): void
	/**  **/
	function SET_WANTED_LEVEL_MULTIPLIER(multiplier: float): void
	/** Max value is 1.0 **/
	function SET_WANTED_LEVEL_DIFFICULTY(player: Player, difficulty: float): void
	/**  **/
	function RESET_WANTED_LEVEL_DIFFICULTY(player: Player): void
	/**  **/
	function GET_WANTED_LEVEL_TIME_TO_ESCAPE(): int
	/**  **/
	function SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(player: Player, wantedLevel: int, lossTime: int): void
	/**  **/
	function RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(player: Player): void
	/**  **/
	function START_FIRING_AMNESTY(duration: int): void
	/** PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));
	
	From am_armybase.ysc.c4:
	
	PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));
	
	-----
	
	This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: https://pastebin.com/09qSMsN7 
	
	-----
	crimeType:
	1: Firearms possession
	2: Person running a red light ("5-0-5")
	3: Reckless driver
	4: Speeding vehicle (a "5-10")
	5: Traffic violation (a "5-0-5")
	6: Motorcycle rider without a helmet
	7: Vehicle theft (a "5-0-3")
	8: Grand Theft Auto
	9: ???
	10: ???
	11: Assault on a civilian (a "2-40")
	12: Assault on an officer
	13: Assault with a deadly weapon (a "2-45")
	14: Officer shot (a "2-45")
	15: Pedestrian struck by a vehicle
	16: Officer struck by a vehicle
	17: Helicopter down (an "AC"?)
	18: Civilian on fire (a "2-40")
	19: Officer set on fire (a "10-99")
	20: Car on fire
	21: Air unit down (an "AC"?)
	22: An explosion (a "9-96")
	23: A stabbing (a "2-45") (also something else I couldn't understand)
	24: Officer stabbed (also something else I couldn't understand)
	25: Attack on a vehicle ("MDV"?)
	26: Damage to property
	27: Suspect threatening officer with a firearm
	28: Shots fired
	29: ???
	30: ???
	31: ???
	32: ???
	33: ???
	34: A "2-45"
	35: ???
	36: A "9-25"
	37: ???
	38: ???
	39: ???
	40: ???
	41: ???
	42: ???
	43: Possible disturbance
	44: Civilian in need of assistance
	45: ???
	46: ??? **/
	function REPORT_CRIME(player: Player, crimeType: int, wantedLvlThresh: int): void
	/** crimeType: see REPORT_CRIME **/
	function SUPPRESS_CRIME_THIS_FRAME(player: Player, crimeType: int): void
	/** This native is used in both singleplayer and multiplayer scripts.
	
	Always used like this in scripts
	PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(PLAYER::PLAYER_ID()); **/
	function UPDATE_WANTED_POSITION_THIS_FRAME(player: Player): void
	/** This has been found in use in the decompiled files. **/
	function SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(player: Player): void
	/**  **/
	function ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(player: Player, p1: any): void
	/** This has been found in use in the decompiled files. **/
	function FORCE_START_HIDDEN_EVASION(player: Player): void
	/**  **/
	function SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(player: Player): void
	/**  **/
	function REPORT_POLICE_SPOTTED_PLAYER(player: Player): void
	/** PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(rPtr((&l_122) + 71)); // Found in decompilation
	
	***
	
	In "am_hold_up.ysc" used once:
	
	l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);
	PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE((l_8d._f47)); **/
	function SET_LAW_RESPONSE_DELAY_OVERRIDE(p0: float): void
	/** 2 matches in 1 script - am_hold_up
	
	Used in multiplayer scripts? **/
	function RESET_LAW_RESPONSE_DELAY_OVERRIDE(): void
	/**  **/
	function CAN_PLAYER_START_MISSION(player: Player): boolean
	/**  **/
	function IS_PLAYER_READY_FOR_CUTSCENE(player: Player): boolean
	/**  **/
	function IS_PLAYER_TARGETTING_ENTITY(player: Player, entity: EntityHandle): boolean
	/** Assigns the handle of locked-on melee target to *entity that you pass it.
	Returns false if no entity found. **/
	function GET_PLAYER_TARGET_ENTITY(player: Player, entity: Address): boolean
	/** Gets a value indicating whether the specified player is currently aiming freely. **/
	function IS_PLAYER_FREE_AIMING(player: Player): boolean
	/** Gets a value indicating whether the specified player is currently aiming freely at the specified entity. **/
	function IS_PLAYER_FREE_AIMING_AT_ENTITY(player: Player, entity: EntityHandle): boolean
	/** Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
	Returns false if no entity found. **/
	function GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(player: Player, entity: Address): boolean
	/** Affects the range of auto aim target. **/
	function SET_PLAYER_LOCKON_RANGE_OVERRIDE(player: Player, range: float): void
	/** Set whether this player should be able to do drive-bys.
	
	"A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
	 **/
	function SET_PLAYER_CAN_DO_DRIVE_BY(player: Player, toggle: boolean): void
	/** Sets whether this player can be hassled by gangs. **/
	function SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(player: Player, toggle: boolean): void
	/** Sets whether this player can take cover. **/
	function SET_PLAYER_CAN_USE_COVER(player: Player, toggle: boolean): void
	/** Gets the maximum wanted level the player can get.
	Ranges from 0 to 5. **/
	function GET_MAX_WANTED_LEVEL(): int
	/**  **/
	function IS_PLAYER_TARGETTING_ANYTHING(player: Player): boolean
	/**  **/
	function SET_PLAYER_SPRINT(player: Player, toggle: boolean): void
	/**  **/
	function RESET_PLAYER_STAMINA(player: Player): void
	/**  **/
	function RESTORE_PLAYER_STAMINA(player: Player, p1: float): void
	/**  **/
	function GET_PLAYER_SPRINT_STAMINA_REMAINING(player: Player): float
	/**  **/
	function GET_PLAYER_SPRINT_TIME_REMAINING(player: Player): float
	/**  **/
	function GET_PLAYER_UNDERWATER_TIME_REMAINING(player: Player): float
	/**  **/
	function SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(player: Player, time: float): float
	/** Returns the group ID the player is member of. **/
	function GET_PLAYER_GROUP(player: Player): int
	/**  **/
	function GET_PLAYER_MAX_ARMOUR(player: Player): int
	/** Can the player control himself, used to disable controls for player for things like a cutscene.
	
	---
	
	You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.  **/
	function IS_PLAYER_CONTROL_ON(player: Player): boolean
	/** Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
	
	Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising. **/
	function GET_ARE_CAMERA_CONTROLS_DISABLED(): boolean
	/**  **/
	function IS_PLAYER_SCRIPT_CONTROL_ON(player: Player): boolean
	/** Returns TRUE if the player ('s ped) is climbing at the moment. **/
	function IS_PLAYER_CLIMBING(player: Player): boolean
	/** Return true while player is being arrested / busted.
	
	If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
	
	If atArresting is set to 0, this function will return 1 only when the busted screen is shown. **/
	function IS_PLAYER_BEING_ARRESTED(player: Player, atArresting: boolean): boolean
	/**  **/
	function RESET_PLAYER_ARREST_STATE(player: Player): void
	/** Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1); **/
	function GET_PLAYERS_LAST_VEHICLE(): EntityHandle
	/** Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT **/
	function GET_PLAYER_INDEX(): Player
	/** Simply returns whatever is passed to it (Regardless of whether the handle is valid or not). **/
	function INT_TO_PLAYERINDEX(value: int): Player
	/** Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
	--------------------------------------------------------
	if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
	 **/
	function INT_TO_PARTICIPANTINDEX(value: int): int
	/**  **/
	function GET_TIME_SINCE_PLAYER_HIT_VEHICLE(player: Player): int
	/**  **/
	function GET_TIME_SINCE_PLAYER_HIT_PED(player: Player): int
	/**  **/
	function GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(player: Player): int
	/**  **/
	function GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(player: Player): int
	/**  **/
	function IS_PLAYER_FREE_FOR_AMBIENT_TASK(player: Player): boolean
	/** This returns YOUR 'identity' as a Player type.
	
	Always returns 0 in story mode. **/
	function PLAYER_ID(): Player
	/** Returns current player ped **/
	function PLAYER_PED_ID(): EntityHandle
	/** Does exactly the same thing as PLAYER_ID() **/
	function NETWORK_PLAYER_ID_TO_INT(): int
	/**  **/
	function HAS_FORCE_CLEANUP_OCCURRED(cleanupFlags: int): boolean
	/** used with 1,2,8,64,128 in the scripts **/
	function FORCE_CLEANUP(cleanupFlags: int): void
	/** PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation **/
	function FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(name: string, cleanupFlags: int): void
	/**  **/
	function FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(id: int, cleanupFlags: int): void
	/**  **/
	function GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP(): int
	/**  **/
	function SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(player: Player, vehicle: EntityHandle): void
	/**  **/
	function SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(player: Player): void
	/** 1 - Welcome to Los Santos
	2 - A Friendship Resurrected
	3 - A Fair Day's Pay
	4 - The Moment of Truth
	5 - To Live or Die in Los Santos
	6 - Diamond Hard
	7 - Subversive
	8 - Blitzed
	9 - Small Town, Big Job
	10 - The Government Gimps
	11 - The Big One!
	12 - Solid Gold, Baby!
	13 - Career Criminal
	14 - San Andreas Sightseer
	15 - All's Fare in Love and War
	16 - TP Industries Arms Race
	17 - Multi-Disciplined
	18 - From Beyond the Stars
	19 - A Mystery, Solved
	20 - Waste Management
	21 - Red Mist
	22 - Show Off
	23 - Kifflom!
	24 - Three Man Army
	25 - Out of Your Depth
	26 - Altruist Acolyte
	27 - A Lot of Cheddar
	28 - Trading Pure Alpha
	29 - Pimp My Sidearm
	30 - Wanted: Alive Or Alive
	31 - Los Santos Customs
	32 - Close Shave
	33 - Off the Plane
	34 - Three-Bit Gangster
	35 - Making Moves
	36 - Above the Law
	37 - Numero Uno
	38 - The Midnight Club
	39 - Unnatural Selection
	40 - Backseat Driver
	41 - Run Like The Wind
	42 - Clean Sweep
	43 - Decorated
	44 - Stick Up Kid
	45 - Enjoy Your Stay
	46 - Crew Cut
	47 - Full Refund
	48 - Dialling Digits
	49 - American Dream
	50 - A New Perspective
	51 - Be Prepared
	52 - In the Name of Science
	53 - Dead Presidents
	54 - Parole Day
	55 - Shot Caller
	56 - Four Way
	57 - Live a Little
	58 - Can't Touch This
	59 - Mastermind
	60 - Vinewood Visionary
	61 - Majestic
	62 - Humans of Los Santos
	63 - First Time Director
	64 - Animal Lover
	65 - Ensemble Piece
	66 - Cult Movie
	67 - Location Scout
	68 - Method Actor
	69 - Cryptozoologist
	70 - Getting Started
	71 - The Data Breaches
	72 - The Bogdan Problem
	73 - The Doomsday Scenario
	74 - A World Worth Saving
	75 - Orbital Obliteration
	76 - Elitist
	77 - Masterminds **/
	function GIVE_ACHIEVEMENT_TO_PLAYER(achievementId: int): boolean
	/** For Steam.
	Does nothing and always returns false in the retail version of the game. **/
	function SET_ACHIEVEMENT_PROGRESS(achievementId: int, progress: int): boolean
	/** For Steam.
	Always returns 0 in retail version of the game. **/
	function GET_ACHIEVEMENT_PROGRESS(achievementId: int): int
	/** See GIVE_ACHIEVEMENT_TO_PLAYER **/
	function HAS_ACHIEVEMENT_BEEN_PASSED(achievementId: int): boolean
	/** Returns TRUE if the game is in online mode and FALSE if in offline mode.
	
	This is an alias for NETWORK_IS_SIGNED_ONLINE. **/
	function IS_PLAYER_ONLINE(): boolean
	/** this function is hard-coded to always return 0. **/
	function IS_PLAYER_LOGGING_IN_NP(): boolean
	/** Purpose of the BOOL currently unknown.
	Both, true and false, work **/
	function DISPLAY_SYSTEM_SIGNIN_UI(unk: boolean): void
	/**  **/
	function IS_SYSTEM_UI_BEING_DISPLAYED(): boolean
	/** Simply sets you as invincible (Health will not deplete).
	
	Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
	*(DWORD *)(playerPedAddress + 0x188) |= (1 << 9); **/
	function SET_PLAYER_INVINCIBLE(player: Player, toggle: boolean): void
	/** Returns the Player's Invincible status.
	
	This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
	
	 bool IsPlayerInvincible(Player player)
	    {
	     auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player)); 
	
	        if (addr)
	     {
	         DWORD flag = *(DWORD *)(addr + 0x188);
	            return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
	      }
	
	       return false;
	 }
	
	 **/
	function GET_PLAYER_INVINCIBLE(player: Player): boolean
	/** Always returns false. **/
	function GET_PLAYER_DEBUG_INVINCIBLE(player: Player): boolean
	/**  **/
	function SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(player: Player, toggle: boolean): void
	/**  **/
	function SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(player: Player, p1: boolean): void
	/**  **/
	function REMOVE_PLAYER_HELMET(player: Player, p2: boolean): void
	/**  **/
	function GIVE_PLAYER_RAGDOLL_CONTROL(player: Player, toggle: boolean): void
	/** Example from fm_mission_controler.ysc.c4:
	
	PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);
	
	All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.
	
	No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol. **/
	function SET_PLAYER_LOCKON(player: Player, toggle: boolean): void
	/** Sets your targeting mode.
	0 = Assisted Aim - Full
	1 = Assisted Aim - Partial
	2 = Free Aim - Assisted
	3 = Free Aim **/
	function SET_PLAYER_TARGETING_MODE(targetMode: int): void
	/**  **/
	function SET_PLAYER_TARGET_LEVEL(targetLevel: int): void
	/** Returns profile setting 237. **/
	function GET_IS_USING_FPS_THIRD_PERSON_COVER(): boolean
	/** Returns profile setting 243. **/
	function GET_IS_USING_HOOD_CAMERA(): boolean
	/**  **/
	function CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(player: Player): void
	/**  **/
	function HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(player: Player): boolean
	/**  **/
	function CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player: Player): void
	/**  **/
	function HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player: Player): boolean
	/** This can be between 1.0f - 14.9f 
	
	You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
	
	 **/
	function SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(player: Player, multiplier: float): void
	/** Swim speed multiplier.
	Multiplier goes up to 1.49
	
	Just call it one time, it is not required to be called once every tick. - Note copied from below native.
	
	Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default. **/
	function SET_SWIM_MULTIPLIER_FOR_PLAYER(player: Player, multiplier: float): void
	/** Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
	
	Just call it one time, it is not required to be called once every tick.
	
	Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default. **/
	function SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(player: Player, multiplier: float): void
	/** Returns the time since the character was arrested in (ms) milliseconds.
	
	example
	
	var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
	
	UI.DrawSubtitle(time.ToString());
	
	if player has not been arrested, the int returned will be -1. **/
	function GET_TIME_SINCE_LAST_ARREST(): int
	/** Returns the time since the character died in (ms) milliseconds.
	
	example
	
	var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
	
	UI.DrawSubtitle(time.ToString());
	
	if player has not died, the int returned will be -1. **/
	function GET_TIME_SINCE_LAST_DEATH(): int
	/**  **/
	function ASSISTED_MOVEMENT_CLOSE_ROUTE(): void
	/**  **/
	function ASSISTED_MOVEMENT_FLUSH_ROUTE(): void
	/**  **/
	function SET_PLAYER_FORCED_AIM(player: Player, toggle: boolean): void
	/**  **/
	function SET_PLAYER_FORCED_ZOOM(player: Player, toggle: boolean): void
	/**  **/
	function SET_PLAYER_FORCE_SKIP_AIM_INTRO(player: Player, toggle: boolean): void
	/** Inhibits the player from using any method of combat including melee and firearms.
	
	NOTE: Only disables the firing for one frame **/
	function DISABLE_PLAYER_FIRING(player: Player, toggle: boolean): void
	/** Used only once in R* scripts (freemode.ysc). **/
	function DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN(): void
	/**  **/
	function SET_DISABLE_AMBIENT_MELEE_MOVE(player: Player, toggle: boolean): void
	/** Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4 **/
	function SET_PLAYER_MAX_ARMOUR(player: Player, value: int): void
	/** p1 is always 0 in the scripts **/
	function SPECIAL_ABILITY_ACTIVATE(player: Player, p1: int): void
	/**  **/
	function SET_SPECIAL_ABILITY_MP(player: Player, p1: int, p2: any): void
	/** p1 is always 0 in the scripts **/
	function SPECIAL_ABILITY_DEACTIVATE_MP(player: Player, p1: int): void
	/**  **/
	function SPECIAL_ABILITY_DEACTIVATE(player: Player, p1: any): void
	/**  **/
	function SPECIAL_ABILITY_DEACTIVATE_FAST(player: Player, p1: any): void
	/**  **/
	function SPECIAL_ABILITY_RESET(player: Player, p1: any): void
	/**  **/
	function SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(player: Player, p1: any): void
	/** Every occurrence of p1 & p2 were both true. **/
	function SPECIAL_ABILITY_CHARGE_SMALL(player: Player, p1: boolean, p2: boolean, p3: any): void
	/** Only 1 match. Both p1 & p2 were true. **/
	function SPECIAL_ABILITY_CHARGE_MEDIUM(player: Player, p1: boolean, p2: boolean, p3: any): void
	/** 2 matches. p1 was always true. **/
	function SPECIAL_ABILITY_CHARGE_LARGE(player: Player, p1: boolean, p2: boolean, p3: any): void
	/** p1 appears to always be 1 (only comes up twice) **/
	function SPECIAL_ABILITY_CHARGE_CONTINUOUS(player: Player, p1: EntityHandle, p2: any): void
	/** p1 appears as 5, 10, 15, 25, or 30. p2 is always true. **/
	function SPECIAL_ABILITY_CHARGE_ABSOLUTE(player: Player, p1: int, p2: boolean, p3: any): void
	/** 
	normalizedValue is from 0.0 - 1.0
	p2 is always 1 **/
	function SPECIAL_ABILITY_CHARGE_NORMALIZED(player: Player, normalizedValue: float, p2: boolean, p3: any): void
	/** Also known as _RECHARGE_SPECIAL_ABILITY **/
	function SPECIAL_ABILITY_FILL_METER(player: Player, p1: boolean, p2: any): void
	/** p1 was always true. **/
	function SPECIAL_ABILITY_DEPLETE_METER(player: Player, p1: boolean, p2: any): void
	/**  **/
	function SPECIAL_ABILITY_LOCK(playerModel: Hash, p1: any): void
	/**  **/
	function SPECIAL_ABILITY_UNLOCK(playerModel: Hash, p1: any): void
	/**  **/
	function IS_SPECIAL_ABILITY_UNLOCKED(playerModel: Hash): boolean
	/**  **/
	function IS_SPECIAL_ABILITY_ACTIVE(player: Player, p1: any): boolean
	/**  **/
	function IS_SPECIAL_ABILITY_METER_FULL(player: Player, p1: any): boolean
	/**  **/
	function ENABLE_SPECIAL_ABILITY(player: Player, toggle: boolean, p2: any): void
	/**  **/
	function IS_SPECIAL_ABILITY_ENABLED(player: Player, p1: any): boolean
	/**  **/
	function SET_SPECIAL_ABILITY_MULTIPLIER(multiplier: float): void
	/**  **/
	function UPDATE_SPECIAL_ABILITY_FROM_STAT(player: Player, p1: any): void
	/** Appears once in "re_dealgonewrong" **/
	function GET_IS_PLAYER_DRIVING_ON_HIGHWAY(player: Player): boolean
	/** Only 1 occurrence. p1 was 2. **/
	function GET_IS_PLAYER_DRIVING_WRECKLESS(player: Player, p1: int): boolean
	/** 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f. **/
	function GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(player: Player, p1: float): boolean
	/** `findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky. **/
	function START_PLAYER_TELEPORT(player: Player, x: float, y: float, z: float, heading: float, p5: boolean, findCollisionLand: boolean, p7: boolean): void
	/**  **/
	function UPDATE_PLAYER_TELEPORT(player: Player): boolean
	/** Disables the player's teleportation **/
	function STOP_PLAYER_TELEPORT(): void
	/**  **/
	function IS_PLAYER_TELEPORT_ACTIVE(): boolean
	/**  **/
	function GET_PLAYER_CURRENT_STEALTH_NOISE(player: Player): float
	/** `regenRate`: The recharge multiplier, a value between 0.0 and 1.0.
	Use 1.0 to reset it back to normal **/
	function SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(player: Player, regenRate: float): void
	/**  **/
	function GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(player: Player): float
	/**  **/
	function SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(player: Player, limit: float): void
	/**  **/
	function SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(player: Player, p1: float): void
	/** This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown. 
	
	Based on tests, it is unlikely to be a multiplier.
	
	modifier's min value is 0.1 **/
	function SET_PLAYER_WEAPON_DAMAGE_MODIFIER(player: Player, modifier: float): void
	/** modifier's min value is 0.1 **/
	function SET_PLAYER_WEAPON_DEFENSE_MODIFIER(player: Player, modifier: float): void
	/** modifier's min value is 0.1 **/
	function SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(player: Player, modifier: float): void
	/** modifier's min value is 0.1 **/
	function SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(player: Player, modifier: float, p2: boolean): void
	/** modifier's min value is 0.1 **/
	function SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(player: Player, modifier: float): void
	/** modifier's min value is 0.1 **/
	function SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(player: Player, modifier: float): void
	/** modifier's min value is 0.1 **/
	function SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(player: Player, modifier: float): void
	/**  **/
	function SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(player: Player, p1: float): void
	/**  **/
	function SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(player: Player, p1: any): void
	/**  **/
	function SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(player: Player, p1: float): void
	/** Tints:
	   None = -1,
	    Rainbow = 0,
	  Red = 1,
	  SeasideStripes = 2,
	   WidowMaker = 3,
	   Patriot = 4,
	  Blue = 5,
	 Black = 6,
	    Hornet = 7,
	   AirFocce = 8,
	 Desert = 9,
	   Shadow = 10,
	  HighAltitude = 11,
	    Airbone = 12,
	 Sunrise = 13,
	 **/
	function SET_PLAYER_PARACHUTE_TINT_INDEX(player: Player, tintIndex: int): void
	/** Tints:
	  None = -1,
	    Rainbow = 0,
	  Red = 1,
	  SeasideStripes = 2,
	   WidowMaker = 3,
	   Patriot = 4,
	  Blue = 5,
	 Black = 6,
	    Hornet = 7,
	   AirFocce = 8,
	 Desert = 9,
	   Shadow = 10,
	  HighAltitude = 11,
	    Airbone = 12,
	 Sunrise = 13, **/
	function GET_PLAYER_PARACHUTE_TINT_INDEX(player: Player, tintIndex: IntPointer): void
	/** Tints:
	   None = -1,
	    Rainbow = 0,
	  Red = 1,
	  SeasideStripes = 2,
	   WidowMaker = 3,
	   Patriot = 4,
	  Blue = 5,
	 Black = 6,
	    Hornet = 7,
	   AirFocce = 8,
	 Desert = 9,
	   Shadow = 10,
	  HighAltitude = 11,
	    Airbone = 12,
	 Sunrise = 13, **/
	function SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(player: Player, index: int): void
	/** Tints:
	  None = -1,
	    Rainbow = 0,
	  Red = 1,
	  SeasideStripes = 2,
	   WidowMaker = 3,
	   Patriot = 4,
	  Blue = 5,
	 Black = 6,
	    Hornet = 7,
	   AirFocce = 8,
	 Desert = 9,
	   Shadow = 10,
	  HighAltitude = 11,
	    Airbone = 12,
	 Sunrise = 13, **/
	function GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(player: Player, index: IntPointer): void
	/** tints 0- 13
	0 - unkown
	1 - unkown
	2 - unkown
	3 - unkown
	4 - unkown **/
	function SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(player: Player, tintIndex: int): void
	/**  **/
	function GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(player: Player, tintIndex: IntPointer): void
	/**  **/
	function SET_PLAYER_HAS_RESERVE_PARACHUTE(player: Player): void
	/**  **/
	function GET_PLAYER_HAS_RESERVE_PARACHUTE(player: Player): boolean
	/**  **/
	function SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(player: Player, enabled: boolean): void
	/**  **/
	function SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(player: Player, r: int, g: int, b: int): void
	/**  **/
	function GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(player: Player, r: IntPointer, g: IntPointer, b: IntPointer): void
	/** example:
	
	flags: 0-6
	
	PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);
	
	wouldnt the flag be the seatIndex? **/
	function SET_PLAYER_PHONE_PALETTE_IDX(player: Player, flags: int): void
	/**  **/
	function SET_PLAYER_NOISE_MULTIPLIER(player: Player, multiplier: float): void
	/** Values around 1.0f to 2.0f used in game scripts. **/
	function SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(player: Player, multiplier: float): void
	/**  **/
	function CAN_PED_HEAR_PLAYER(player: Player, ped: EntityHandle): boolean
	/** This is to make the player walk without accepting input from INPUT.
	
	gaitType is in increments of 100s. 2000, 500, 300, 200, etc.
	
	p4 is always 1 and p5 is always 0.
	
	C# Example :
	
	Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms **/
	function SIMULATE_PLAYER_INPUT_GAIT(player: Player, amount: float, gaitType: int, speed: float, p4: boolean, p5: boolean): void
	/**  **/
	function RESET_PLAYER_INPUT_GAIT(player: Player): void
	/**  **/
	function SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(player: Player, toggle: boolean): void
	/**  **/
	function SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(player: Player, toggle: boolean): void
	/**  **/
	function SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(player: Player, value: float): void
	/**  **/
	function IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(player: Player): boolean
	/**  **/
	function INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(player: Player): void
	/**  **/
	function SET_PLAYER_SIMULATE_AIMING(player: Player, toggle: boolean): void
	/**  **/
	function SET_PLAYER_CLOTH_PIN_FRAMES(player: Player, p1: int): void
	/** Every occurrence was either 0 or 2. **/
	function SET_PLAYER_CLOTH_PACKAGE_INDEX(index: int): void
	/** 6 matches across 4 scripts. 5 occurrences were 240. The other was 255. **/
	function SET_PLAYER_CLOTH_LOCK_COUNTER(value: int): void
	/** Only 1 match. ob_sofa_michael.
	
	PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1; **/
	function PLAYER_ATTACH_VIRTUAL_BOUND(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float, p7: float): void
	/** 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1; **/
	function PLAYER_DETACH_VIRTUAL_BOUND(): void
	/**  **/
	function HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(player: Player): boolean
	/** Returns true if an unk value is greater than 0.0f **/
	function IS_PLAYER_BATTLE_AWARE(player: Player): boolean
	/**  **/
	function GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(player: Player, p1: int, p2: boolean): boolean
	/** Appears only 3 times in the scripts, more specifically in michael1.ysc
	
	-
	This can be used to prevent dying if you are "out of the world" **/
	function EXTEND_WORLD_BOUNDARY_FOR_PLAYER(x: float, y: float, z: float): void
	/**  **/
	function RESET_WORLD_BOUNDARY_FOR_PLAYER(): void
	/** Returns true if the player is riding a train. **/
	function IS_PLAYER_RIDING_TRAIN(player: Player): boolean
	/**  **/
	function HAS_PLAYER_LEFT_THE_WORLD(player: Player): boolean
	/**  **/
	function SET_PLAYER_LEAVE_PED_BEHIND(player: Player, toggle: boolean): void
	/** p1 was always 5.
	p4 was always false. **/
	function SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player: Player, p1: int, p2: any, p3: any, p4: boolean): void
	/**  **/
	function CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player: Player): void
	/**  **/
	function SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(player: Player, model: Hash): void
	/**  **/
	function SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player: Player, model: Hash): void
	/**  **/
	function GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(player: Player): Hash
	/**  **/
	function GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player: Player): Hash
	/**  **/
	function CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(player: Player): void
	/**  **/
	function CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player: Player): void
	/**  **/
	function SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player: Player, model: Hash): void
	/**  **/
	function CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player: Player): void
	/**  **/
	function DISABLE_PLAYER_VEHICLE_REWARDS(player: Player): void
	/**  **/
	function SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(p0: boolean): void
	/**  **/
	function SET_PLAYER_BLUETOOTH_STATE(player: Player, state: boolean): void
	/**  **/
	function IS_PLAYER_BLUETOOTH_ENABLE(player: Player): boolean
	/**  **/
	function DISABLE_CAMERA_VIEW_MODE_CYCLE(player: Player): void
	/**  **/
	function GET_PLAYER_FAKE_WANTED_LEVEL(player: Player): int
	/**  **/
	function SET_PLAYER_CAN_DAMAGE_PLAYER(player1: Player, player2: Player, toggle: boolean): void
	/**  **/
	function SET_APPLY_WAYPOINT_OF_PLAYER(p0: any, p1: any): void
	/**  **/
	function IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(p0: any): boolean
	/** Unsets playerPed+330 if the current weapon has certain flags. **/
	function SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(p0: any): void
	/**  **/
	function SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(p0: any, p1: any): void
	/**  **/
	function ADD_PLAYER_TARGETABLE_ENTITY(player: Player, entity: EntityHandle): void
	/**  **/
	function REMOVE_PLAYER_TARGETABLE_ENTITY(player: Player, entity: EntityHandle): void
	/**  **/
	function SET_PLAYER_PREVIOUS_VARIATION_DATA(player: Player, p1: int, p2: int, p3: any, p4: any, p5: any): void
	/** Resets values set by SET_SCRIPT_FIRE_POSITION **/
	function REMOVE_SCRIPT_FIRE_POSITION(): void
	/**  **/
	function SET_SCRIPT_FIRE_POSITION(coordX: float, coordY: float, coordZ: float): void
}

/** @noSelf **/
declare namespace RECORDING {
	/**  **/
	function REPLAY_START_EVENT(p0: int): void
	/**  **/
	function REPLAY_STOP_EVENT(): void
	/**  **/
	function REPLAY_CANCEL_EVENT(): void
	/**  **/
	function REPLAY_RECORD_BACK_FOR_TIME(p0: float, p1: float, p2: int): void
	/** -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
	
	first one seems to be a string of a mission name, second one seems to be a bool/toggle
	
	p1 was always 0.
	 **/
	function REPLAY_CHECK_FOR_EVENT_THIS_FRAME(missionNameLabel: string, p1: any): void
	/** This disable the recording feature and has to be called every frame. **/
	function REPLAY_PREVENT_RECORDING_THIS_FRAME(): void
	/**  **/
	function REPLAY_RESET_EVENT_INFO(): void
	/** This will disable the ability to make camera changes in R* Editor. **/
	function REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME(): void
	/** Does nothing (it's a nullsub). **/
	function RECORD_GREATEST_MOMENT(p0: int, p1: int, p2: int): void
	/** Starts recording a replay.
	If mode is 0, turns on action replay.
	If mode is 1, starts recording.
	If already recording a replay, does nothing. **/
	function START_REPLAY_RECORDING(mode: int): void
	/** Stops recording and saves the recorded clip. **/
	function STOP_REPLAY_RECORDING(): void
	/** Stops recording and discards the recorded clip. **/
	function CANCEL_REPLAY_RECORDING(): void
	/**  **/
	function SAVE_REPLAY_RECORDING(): boolean
	/** Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)
	
	mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
	retn **/
	function IS_REPLAY_RECORDING(): boolean
	/**  **/
	function IS_REPLAY_INITIALIZED(): boolean
	/**  **/
	function IS_REPLAY_AVAILABLE(): boolean
	/**  **/
	function IS_REPLAY_RECORD_SPACE_AVAILABLE(p0: boolean): boolean
}

/** @noSelf **/
declare namespace REPLAY {
	/** Does nothing (it's a nullsub). **/
	function REGISTER_EFFECT_FOR_REPLAY_EDITOR(p0: string, p1: boolean): void
	/** Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible **/
	function REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP(): boolean
	/** Disables some other rendering (internal) **/
	function SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM(): void
	/**  **/
	function SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(p0: boolean): void
	/** Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0. **/
	function REPLAY_CONTROL_SHUTDOWN(): void
	/** Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this. **/
	function ACTIVATE_ROCKSTAR_EDITOR(p0: int): void
}

/** @noSelf **/
declare namespace SAVEMIGRATION {
	/**  **/
	function SAVEMIGRATION_IS_MP_ENABLED(): boolean
	/**  **/
	function SAVEMIGRATION_MP_REQUEST_ACCOUNTS(): boolean
	/**  **/
	function SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS(): int
	/**  **/
	function SAVEMIGRATION_MP_NUM_ACCOUNTS(): int
	/**  **/
	function SAVEMIGRATION_MP_GET_ACCOUNT(p0: int, p1: Address): boolean
	/**  **/
	function SAVEMIGRATION_MP_REQUEST_STATUS(): boolean
	/**  **/
	function SAVEMIGRATION_MP_GET_STATUS(): int
}

/** @noSelf **/
declare namespace SCRIPT {
	/**  **/
	function REQUEST_SCRIPT(scriptName: string): void
	/**  **/
	function SET_SCRIPT_AS_NO_LONGER_NEEDED(scriptName: string): void
	/** Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting. **/
	function HAS_SCRIPT_LOADED(scriptName: string): boolean
	/**  **/
	function DOES_SCRIPT_EXIST(scriptName: string): boolean
	/** formerly _REQUEST_STREAMED_SCRIPT **/
	function REQUEST_SCRIPT_WITH_NAME_HASH(scriptHash: Hash): void
	/**  **/
	function SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(scriptHash: Hash): void
	/**  **/
	function HAS_SCRIPT_WITH_NAME_HASH_LOADED(scriptHash: Hash): boolean
	/**  **/
	function DOES_SCRIPT_WITH_NAME_HASH_EXIST(scriptHash: Hash): boolean
	/**  **/
	function TERMINATE_THREAD(threadId: int): void
	/**  **/
	function IS_THREAD_ACTIVE(threadId: int): boolean
	/**  **/
	function GET_NAME_OF_SCRIPT_WITH_THIS_ID(threadId: int): string
	/** Starts a new iteration of the current threads.
	Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F) **/
	function SCRIPT_THREAD_ITERATOR_RESET(): void
	/** If the function returns 0, the end of the iteration has been reached. **/
	function SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID(): int
	/**  **/
	function GET_ID_OF_THIS_THREAD(): int
	/**  **/
	function TERMINATE_THIS_THREAD(): void
	/** Gets the number of instances of the specified script is currently running.
	
	Actually returns numRefs - 1.
	if (program)
		v3 = rage::scrProgram::GetNumRefs(program) - 1;
	return v3; **/
	function GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(scriptHash: Hash): int
	/**  **/
	function GET_THIS_SCRIPT_NAME(): string
	/**  **/
	function GET_HASH_OF_THIS_SCRIPT_NAME(): Hash
	/** eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork) **/
	function GET_NUMBER_OF_EVENTS(eventGroup: int): int
	/** eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork) **/
	function GET_EVENT_EXISTS(eventGroup: int, eventIndex: int): boolean
	/** eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork) **/
	function GET_EVENT_AT_INDEX(eventGroup: int, eventIndex: int): int
	/** eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
	
	Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!). **/
	function GET_EVENT_DATA(eventGroup: int, eventIndex: int, eventData: Address, eventDataSize: int): boolean
	/** eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
	
	Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
	
	playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players. **/
	function TRIGGER_SCRIPT_EVENT(eventGroup: int, eventData: Address, eventDataSize: int, playerBits: int): void
	/**  **/
	function SHUTDOWN_LOADING_SCREEN(): void
	/**  **/
	function SET_NO_LOADING_SCREEN(toggle: boolean): void
	/**  **/
	function GET_NO_LOADING_SCREEN(): boolean
	/**  **/
	function COMMIT_TO_LOADINGSCREEN_SELCTION(): void
	/** Returns true if bit 0 in GtaThread+0x154 is set. **/
	function BG_IS_EXITFLAG_SET(): boolean
	/** Sets bit 1 in GtaThread+0x154 **/
	function BG_SET_EXITFLAG_RESPONSE(): void
	/** Hashed version of BG_START_CONTEXT. **/
	function BG_START_CONTEXT_HASH(contextHash: Hash): void
	/** Hashed version of BG_END_CONTEXT. **/
	function BG_END_CONTEXT_HASH(contextHash: Hash): void
	/** Inserts the given context into the background scripts context map. **/
	function BG_START_CONTEXT(contextName: string): void
	/** Deletes the given context from the background scripts context map. **/
	function BG_END_CONTEXT(contextName: string): void
	/**  **/
	function BG_DOES_LAUNCH_PARAM_EXIST(scriptIndex: int, p1: string): boolean
	/**  **/
	function BG_GET_LAUNCH_PARAM_VALUE(scriptIndex: int, p1: string): int
	/**  **/
	function BG_GET_SCRIPT_ID_FROM_NAME_HASH(p0: Hash): int
	/** See TRIGGER_SCRIPT_EVENT **/
	function SEND_TU_SCRIPT_EVENT(eventGroup: int, eventData: Address, eventDataSize: int, playerBits: int): void
}

/** @noSelf **/
declare namespace SECURITY {
	/** Registers a protected variable that will be checked for modifications by the anticheat **/
	function REGISTER_SCRIPT_VARIABLE(variable: Address): void
	/**  **/
	function UNREGISTER_SCRIPT_VARIABLE(variable: Address): void
	/**  **/
	function FORCE_CHECK_SCRIPT_VARIABLES(): void
}

/** @noSelf **/
declare namespace SHAPETEST {
	/** Asynchronously starts a line-of-sight (raycast) world probe shape test.
	
	Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
	
	p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used. **/
	function START_SHAPE_TEST_LOS_PROBE(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, flags: int, entity: EntityHandle, p8: int): int
	/** Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes. **/
	function START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, flags: int, entity: EntityHandle, p8: int): int
	/**  **/
	function START_SHAPE_TEST_BOUNDING_BOX(entity: EntityHandle, flags1: int, flags2: int): int
	/**  **/
	function START_SHAPE_TEST_BOX(x: float, y: float, z: float, x1: float, y2: float, z2: float, rotX: float, rotY: float, rotZ: float, p9: any, flags: int, entity: EntityHandle, p12: any): int
	/**  **/
	function START_SHAPE_TEST_BOUND(entity: EntityHandle, flags1: int, flags2: int): int
	/** Raycast from point to point, where the ray has a radius. 
	
	flags:
	vehicles=10
	peds =12
	
	Iterating through flags yields many ped / vehicle/ object combinations
	
	p9 = 7, but no idea what it does
	
	Entity is an entity to ignore **/
	function START_SHAPE_TEST_CAPSULE(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, radius: float, flags: int, entity: EntityHandle, p9: int): int
	/**  **/
	function START_SHAPE_TEST_SWEPT_SPHERE(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, radius: float, flags: int, entity: EntityHandle, p9: any): int
	/** Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
	
	In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7 **/
	function START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(pVec1: Vector3Pointer, pVec2: Vector3Pointer, flag: int, entity: EntityHandle, flag2: int): int
	/** Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
	
	When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated. **/
	function GET_SHAPE_TEST_RESULT(shapeTestHandle: int, hit: BoolPointer, endCoords: Vector3Pointer, surfaceNormal: Vector3Pointer, entityHit: Address): int
	/** Returns the result of a shape test, also returning the material of any touched surface.
	
	When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
	
	Unless the return value is 2, the other return values are undefined. **/
	function GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(shapeTestHandle: int, hit: BoolPointer, endCoords: Vector3Pointer, surfaceNormal: Vector3Pointer, materialHash: Address, entityHit: Address): int
	/** Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle. **/
	function RELEASE_SCRIPT_GUID_FROM_ENTITY(entityHit: EntityHandle): void
}

/** @noSelf **/
declare namespace SOCIALCLUB {
	/**  **/
	function SC_INBOX_GET_TOTAL_NUM_MESSAGES(): int
	/**  **/
	function SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(msgIndex: int): Hash
	/**  **/
	function SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(msgIndex: int): boolean
	/**  **/
	function SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(msgIndex: int): boolean
	/**  **/
	function SC_INBOX_MESSAGE_GET_DATA_INT(p0: int, context: string, out: IntPointer): boolean
	/**  **/
	function SC_INBOX_MESSAGE_GET_DATA_BOOL(p0: int, p1: string): boolean
	/**  **/
	function SC_INBOX_MESSAGE_GET_DATA_STRING(p0: int, context: string, out: string): boolean
	/**  **/
	function SC_INBOX_MESSAGE_DO_APPLY(p0: int): boolean
	/**  **/
	function SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(p0: int): string
	/**  **/
	function SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(gamerHandle: Address): void
	/**  **/
	function SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(data: Address): void
	/**  **/
	function SC_INBOX_MESSAGE_GET_UGCDATA(p0: int, p1: Address): boolean
	/**  **/
	function SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST(data: Address): boolean
	/**  **/
	function SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(index: int, outData: Address): boolean
	/**  **/
	function SC_EMAIL_RETRIEVE_EMAILS(offset: int, limit: int): void
	/**  **/
	function SC_EMAIL_GET_RETRIEVAL_STATUS(): int
	/**  **/
	function SC_EMAIL_GET_NUM_RETRIEVED_EMAILS(): int
	/**  **/
	function SC_EMAIL_GET_EMAIL_AT_INDEX(p0: int, p1: Address): boolean
	/**  **/
	function SC_EMAIL_DELETE_EMAILS(p0: Address, p1: any): void
	/**  **/
	function SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(gamerHandle: Address): void
	/**  **/
	function SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST(): void
	/**  **/
	function SC_EMAIL_SEND_EMAIL(p0: string): void
	/**  **/
	function SC_EMAIL_SET_CURRENT_EMAIL_TAG(p0: any): boolean
	/**  **/
	function SC_CACHE_NEW_ROCKSTAR_MSGS(toggle: boolean): void
	/**  **/
	function SC_HAS_NEW_ROCKSTAR_MSG(): boolean
	/**  **/
	function SC_GET_NEW_ROCKSTAR_MSG(): string
	/**  **/
	function SC_PRESENCE_ATTR_SET_INT(attrHash: Hash, value: int): boolean
	/**  **/
	function SC_PRESENCE_ATTR_SET_FLOAT(attrHash: Hash, value: float): boolean
	/**  **/
	function SC_PRESENCE_ATTR_SET_STRING(attrHash: Hash, value: string): boolean
	/**  **/
	function SC_PRESENCE_SET_ACTIVITY_RATING(p0: any, p1: float): boolean
	/**  **/
	function SC_GAMERDATA_GET_INT(name: string, value: IntPointer): boolean
	/**  **/
	function SC_GAMERDATA_GET_FLOAT(name: string, value: FloatPointer): boolean
	/**  **/
	function SC_GAMERDATA_GET_BOOL(name: string): boolean
	/**  **/
	function SC_GAMERDATA_GET_STRING(name: string, value: string): boolean
	/**  **/
	function SC_GAMERDATA_GET_ACTIVE_XP_BONUS(value: FloatPointer): boolean
	/** Starts a task to check an entered string for profanity on the ROS/Social Club services.
	
	See also: 1753344C770358AE, 82E4A58BABC15AE7. **/
	function SC_PROFANITY_CHECK_STRING(string: string, token: IntPointer): boolean
	/**  **/
	function SC_PROFANITY_CHECK_STRING_UGC(string: string, token: IntPointer): boolean
	/**  **/
	function SC_PROFANITY_GET_CHECK_IS_VALID(token: int): boolean
	/**  **/
	function SC_PROFANITY_GET_CHECK_IS_PENDING(token: int): boolean
	/**  **/
	function SC_PROFANITY_GET_STRING_PASSED(token: int): boolean
	/**  **/
	function SC_PROFANITY_GET_STRING_STATUS(token: int): int
	/**  **/
	function SC_LICENSEPLATE_CHECK_STRING(p0: string, p1: IntPointer): boolean
	/**  **/
	function SC_LICENSEPLATE_GET_CHECK_IS_VALID(p0: any): boolean
	/**  **/
	function SC_LICENSEPLATE_GET_CHECK_IS_PENDING(p0: any): boolean
	/**  **/
	function SC_LICENSEPLATE_GET_COUNT(token: int): int
	/**  **/
	function SC_LICENSEPLATE_GET_PLATE(token: int, plateIndex: int): string
	/**  **/
	function SC_LICENSEPLATE_GET_PLATE_DATA(token: int, plateIndex: int): string
	/**  **/
	function SC_LICENSEPLATE_SET_PLATE_DATA(oldPlateText: string, newPlateText: string, plateData: Address): boolean
	/**  **/
	function SC_LICENSEPLATE_ADD(plateText: string, plateData: Address, token: IntPointer): boolean
	/**  **/
	function SC_LICENSEPLATE_GET_ADD_IS_PENDING(token: int): boolean
	/**  **/
	function SC_LICENSEPLATE_GET_ADD_STATUS(token: int): int
	/**  **/
	function SC_LICENSEPLATE_ISVALID(plateText: string, token: IntPointer): boolean
	/**  **/
	function SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(token: int): boolean
	/**  **/
	function SC_LICENSEPLATE_GET_ISVALID_STATUS(token: int): int
	/**  **/
	function SC_COMMUNITY_EVENT_IS_ACTIVE(): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EVENT_ID(): int
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(p0: string, p1: IntPointer): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(p0: string, p1: FloatPointer): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(p0: string, p1: string): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(p0: string): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(p0: string): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(p0: string): int
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(p0: string, p1: IntPointer, p2: string): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(p0: string, p1: FloatPointer, p2: string): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(p0: string, p1: string, p2: string): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(p0: string, p1: string): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(p0: int): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(p0: int, p1: string, p2: IntPointer): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(p0: int, p1: string, p2: FloatPointer): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(p0: int, p1: string, p2: string): boolean
	/**  **/
	function SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(p0: int, p1: string): boolean
	/**  **/
	function SC_TRANSITION_NEWS_SHOW(p0: any): boolean
	/**  **/
	function SC_TRANSITION_NEWS_SHOW_TIMED(p0: any, p1: any): boolean
	/**  **/
	function SC_TRANSITION_NEWS_SHOW_NEXT_ITEM(): boolean
	/**  **/
	function SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU(): boolean
	/**  **/
	function SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(p0: string, p1: IntPointer): boolean
	/**  **/
	function SC_TRANSITION_NEWS_END(): void
	/**  **/
	function SC_PAUSE_NEWS_INIT_STARTER_PACK(p0: any): boolean
	/** Fills some 0x30 sized struct **/
	function SC_PAUSE_NEWS_GET_PENDING_STORY(p0: any): boolean
	/**  **/
	function SC_PAUSE_NEWS_SHUTDOWN(): void
	/** Returns the nickname of the logged-in Rockstar Social Club account. **/
	function SC_ACCOUNT_INFO_GET_NICKNAME(): string
	/**  **/
	function SC_ACHIEVEMENT_INFO_STATUS(p0: IntPointer): boolean
	/** Same as HAS_ACHIEVEMENT_BEEN_PASSED **/
	function SC_HAS_ACHIEVEMENT_BEEN_PASSED(achievementId: int): boolean
}

/** @noSelf **/
declare namespace STATS {
	/** Example:
	
	for (v_2 = 0; v_2 <= 4; v_2 += 1) {
	    STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
	} **/
	function STAT_CLEAR_SLOT_FOR_RELOAD(statSlot: int): boolean
	/**  **/
	function STAT_LOAD(p0: int): boolean
	/**  **/
	function STAT_SAVE(p0: int, p1: boolean, p2: int, p3: any): boolean
	/**  **/
	function STAT_SET_OPEN_SAVETYPE_IN_JOB(p0: int): void
	/**  **/
	function STAT_LOAD_PENDING(p0: any): boolean
	/**  **/
	function STAT_SAVE_PENDING(): boolean
	/**  **/
	function STAT_SAVE_PENDING_OR_REQUESTED(): boolean
	/** p0 is characterSlot? seems range from 0 to 2 **/
	function STAT_DELETE_SLOT(p0: int): boolean
	/**  **/
	function STAT_SLOT_IS_LOADED(p0: int): boolean
	/**  **/
	function STAT_CLOUD_SLOT_LOAD_FAILED(p0: int): boolean
	/**  **/
	function STAT_CLOUD_SLOT_LOAD_FAILED_CODE(p0: any): int
	/**  **/
	function STAT_SET_BLOCK_SAVES(toggle: boolean): void
	/**  **/
	function STAT_GET_BLOCK_SAVES(): boolean
	/**  **/
	function STAT_CLOUD_SLOT_SAVE_FAILED(p0: any): boolean
	/**  **/
	function STAT_CLEAR_PENDING_SAVES(p0: any): void
	/**  **/
	function STAT_LOAD_DIRTY_READ_DETECTED(): boolean
	/**  **/
	function STAT_CLEAR_DIRTY_READ_DETECTED(): void
	/**  **/
	function STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP(): boolean
	/** Example:
	 STATS::STAT_SET_INT(MISC::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 1337, true); **/
	function STAT_SET_INT(statName: Hash, value: int, save: boolean): boolean
	/** Example:
	 STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true); **/
	function STAT_SET_FLOAT(statName: Hash, value: float, save: boolean): boolean
	/** Example:
	 STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true); **/
	function STAT_SET_BOOL(statName: Hash, value: boolean, save: boolean): boolean
	/** The following values have been found in the decompiled scripts:
	"RC_ABI1"
	"RC_ABI2"
	"RC_BA1"
	"RC_BA2"
	"RC_BA3"
	"RC_BA3A"
	"RC_BA3C"
	"RC_BA4"
	"RC_DRE1"
	"RC_EPS1"
	"RC_EPS2"
	"RC_EPS3"
	"RC_EPS4"
	"RC_EPS5"
	"RC_EPS6"
	"RC_EPS7"
	"RC_EPS8"
	"RC_EXT1"
	"RC_EXT2"
	"RC_EXT3"
	"RC_EXT4"
	"RC_FAN1"
	"RC_FAN2"
	"RC_FAN3"
	"RC_HAO1"
	"RC_HUN1"
	"RC_HUN2"
	"RC_JOS1"
	"RC_JOS2"
	"RC_JOS3"
	"RC_JOS4"
	"RC_MAU1"
	"RC_MIN1"
	"RC_MIN2"
	"RC_MIN3"
	"RC_MRS1"
	"RC_MRS2"
	"RC_NI1"
	"RC_NI1A"
	"RC_NI1B"
	"RC_NI1C"
	"RC_NI1D"
	"RC_NI2"
	"RC_NI3"
	"RC_OME1"
	"RC_OME2"
	"RC_PA1"
	"RC_PA2"
	"RC_PA3"
	"RC_PA3A"
	"RC_PA3B"
	"RC_PA4"
	"RC_RAM1"
	"RC_RAM2"
	"RC_RAM3"
	"RC_RAM4"
	"RC_RAM5"
	"RC_SAS1"
	"RC_TON1"
	"RC_TON2"
	"RC_TON3"
	"RC_TON4"
	"RC_TON5" **/
	function STAT_SET_GXT_LABEL(statName: Hash, value: string, save: boolean): boolean
	/** 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
	
	The structure looks like this:
	
	int year
	int month
	int day
	int hour
	int minute
	int second
	int millisecond
	
	The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure. **/
	function STAT_SET_DATE(statName: Hash, value: Address, numFields: int, save: boolean): boolean
	/**  **/
	function STAT_SET_STRING(statName: Hash, value: string, save: boolean): boolean
	/**  **/
	function STAT_SET_POS(statName: Hash, x: float, y: float, z: float, save: boolean): boolean
	/**  **/
	function STAT_SET_MASKED_INT(statName: Hash, p1: any, p2: any, p3: int, save: boolean): boolean
	/**  **/
	function STAT_SET_USER_ID(statName: Hash, value: string, save: boolean): boolean
	/** p1 always true. **/
	function STAT_SET_CURRENT_POSIX_TIME(statName: Hash, p1: boolean): boolean
	/** p2 appears to always be -1
	 **/
	function STAT_GET_INT(statHash: Hash, outValue: IntPointer, p2: int): boolean
	/**  **/
	function STAT_GET_FLOAT(statHash: Hash, outValue: FloatPointer, p2: any): boolean
	/**  **/
	function STAT_GET_BOOL(statHash: Hash, outValue: BoolPointer, p2: any): boolean
	/**  **/
	function STAT_GET_DATE(statHash: Hash, p1: Address, p2: any, p3: any): boolean
	/** p1 is always -1 in the script files **/
	function STAT_GET_STRING(statHash: Hash, p1: int): string
	/**  **/
	function STAT_GET_POS(p0: any, p1: Address, p2: Address, p3: Address, p4: any): boolean
	/**  **/
	function STAT_GET_MASKED_INT(p0: any, p1: Address, p2: any, p3: any, p4: any): boolean
	/** Needs more research. Seems to return "STAT_UNKNOWN" if no such user id exists. **/
	function STAT_GET_USER_ID(p0: any): string
	/**  **/
	function STAT_GET_LICENSE_PLATE(statName: Hash): string
	/**  **/
	function STAT_SET_LICENSE_PLATE(statName: Hash, str: string): boolean
	/**  **/
	function STAT_INCREMENT(statName: Hash, value: float): void
	/**  **/
	function STAT_COMMUNITY_START_SYNCH(): boolean
	/**  **/
	function STAT_COMMUNITY_SYNCH_IS_PENDING(): boolean
	/**  **/
	function STAT_COMMUNITY_GET_HISTORY(statName: Hash, p1: int, outValue: FloatPointer): boolean
	/** p0 seems to range from 0 to 7 **/
	function STAT_RESET_ALL_ONLINE_CHARACTER_STATS(p0: int): void
	/** p0 seems to range from 0 to 7 **/
	function STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(p0: int): void
	/**  **/
	function STAT_GET_NUMBER_OF_DAYS(statName: Hash): int
	/**  **/
	function STAT_GET_NUMBER_OF_HOURS(statName: Hash): int
	/**  **/
	function STAT_GET_NUMBER_OF_MINUTES(statName: Hash): int
	/**  **/
	function STAT_GET_NUMBER_OF_SECONDS(statName: Hash): int
	/** Does not take effect immediately, unfortunately.
	
	profileSetting seems to only be 936, 937 and 938 in scripts **/
	function STAT_SET_PROFILE_SETTING_VALUE(profileSetting: int, value: int): void
	/** This native does absolutely nothing, just a nullsub **/
	function STATS_COMPLETED_CHARACTER_CREATION(p0: any): void
	/** Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"? **/
	function PACKED_STAT_GET_INT_STAT_INDEX(p0: int): int
	/**  **/
	function GET_PACKED_INT_STAT_KEY(index: int, spStat: boolean, charStat: boolean, character: int): Hash
	/**  **/
	function GET_PACKED_TU_INT_STAT_KEY(index: int, spStat: boolean, charStat: boolean, character: int): Hash
	/** Needs more research. Gets the stat name of a masked int?
	
	section - values used in the decompiled scripts:
	"_NGPSTAT_INT"
	"_MP_NGPSTAT_INT"
	"_MP_LRPSTAT_INT"
	"_MP_APAPSTAT_INT"
	"_MP_LR2PSTAT_INT"
	"_MP_BIKEPSTAT_INT"
	"_MP_IMPEXPPSTAT_INT"
	"_MP_GUNRPSTAT_INT"
	"_NGDLCPSTAT_INT"
	"_MP_NGDLCPSTAT_INT"
	"_DLCSMUGCHARPSTAT_INT"
	"_GANGOPSPSTAT_INT"
	"_BUSINESSBATPSTAT_INT"
	"_ARENAWARSPSTAT_INT"
	"_CASINOPSTAT_INT"
	"_CASINOHSTPSTAT_INT" **/
	function GET_PACKED_NG_INT_STAT_KEY(index: int, spStat: boolean, charStat: boolean, character: int, section: string): Hash
	/**  **/
	function GET_PACKED_STAT_BOOL_CODE(index: int, characterSlot: int): boolean
	/**  **/
	function GET_PACKED_STAT_INT_CODE(index: int, characterSlot: int): int
	/**  **/
	function SET_PACKED_STAT_BOOL_CODE(index: int, value: boolean, characterSlot: int): void
	/**  **/
	function SET_PACKED_STAT_INT_CODE(index: int, value: int, characterSlot: int): void
	/**  **/
	function PLAYSTATS_BACKGROUND_SCRIPT_ACTION(action: string, value: int): void
	/**  **/
	function PLAYSTATS_NPC_INVITE(p0: Address): void
	/**  **/
	function PLAYSTATS_AWARD_XP(amount: int, type: Hash, category: Hash): void
	/**  **/
	function PLAYSTATS_RANK_UP(rank: int): void
	/**  **/
	function PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE(): void
	/**  **/
	function PLAYSTATS_ACTIVITY_DONE(p0: any, p1: any): void
	/**  **/
	function PLAYSTATS_LEAVE_JOB_CHAIN(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_MISSION_STARTED(p0: Address, p1: any, p2: any, p3: boolean): void
	/**  **/
	function PLAYSTATS_MISSION_OVER(p0: Address, p1: any, p2: any, p3: boolean, p4: boolean, p5: boolean): void
	/**  **/
	function PLAYSTATS_MISSION_CHECKPOINT(p0: Address, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_RANDOM_MISSION_DONE(name: string, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_ROS_BET(amount: int, act: int, player: Player, cm: float): void
	/**  **/
	function PLAYSTATS_RACE_CHECKPOINT(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(playerAccountId: IntPointer, posixTime: IntPointer): boolean
	/**  **/
	function PLAYSTATS_MATCH_STARTED(p0: any, p1: any, p2: any): void
	/**  **/
	function PLAYSTATS_SHOP_ITEM(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_CRATE_DROP_MISSION_DONE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void
	/**  **/
	function PLAYSTATS_CRATE_CREATED(p0: float, p1: float, p2: float): void
	/**  **/
	function PLAYSTATS_HOLD_UP_MISSION_DONE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_RACE_TO_POINT_MISSION_DONE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(p0: any): void
	/**  **/
	function PLAYSTATS_WEBSITE_VISITED(scaleformHash: Hash, p1: int): void
	/**  **/
	function PLAYSTATS_FRIEND_ACTIVITY(p0: any, p1: any): void
	/** This native does absolutely nothing, just a nullsub **/
	function PLAYSTATS_ODDJOB_DONE(p0: any, p1: any, p2: any): void
	/**  **/
	function PLAYSTATS_PROP_CHANGE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_CLOTH_CHANGE(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/** This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE. **/
	function PLAYSTATS_WEAPON_MODE_CHANGE(weaponHash: Hash, componentHashTo: Hash, componentHashFrom: Hash): void
	/**  **/
	function PLAYSTATS_CHEAT_APPLIED(cheat: string): void
	/**  **/
	function PLAYSTATS_JOB_ACTIVITY_END(p0: Address, p1: Address, p2: Address, p3: Address): void
	/**  **/
	function PLAYSTATS_JOB_BEND(p0: Address, p1: Address, p2: Address, p3: Address): void
	/**  **/
	function PLAYSTATS_JOB_LTS_END(p0: Address, p1: Address, p2: Address, p3: Address): void
	/**  **/
	function PLAYSTATS_JOB_LTS_ROUND_END(p0: Address, p1: Address, p2: Address, p3: Address): void
	/**  **/
	function PLAYSTATS_QUICKFIX_TOOL(element: int, item: string): void
	/**  **/
	function PLAYSTATS_IDLE_KICK(time: int): void
	/**  **/
	function PLAYSTATS_SET_JOIN_TYPE(joinType: int): void
	/**  **/
	function PLAYSTATS_HEIST_SAVE_CHEAT(hash: Hash, p1: int): void
	/**  **/
	function PLAYSTATS_APPEND_DIRECTOR_METRIC(p0: Address): void
	/**  **/
	function PLAYSTATS_AWARD_BAD_SPORT(id: int): void
	/**  **/
	function PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(modelHash: Hash): void
	/**  **/
	function PLAYSTATS_FM_EVENT_CHALLENGES(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_VEHICLETARGET(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_URBANWARFARE(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_ATOB(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_PENNEDIN(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_PASSTHEPARCEL(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_HOTPROPERTY(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_DEADDROP(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(p0: any): void
	/**  **/
	function PLAYSTATS_FM_EVENT_HUNTBEAST(p0: any): void
	/**  **/
	function PLAYSTATS_PIMENU_HIDE_OPTIONS(data: Address): void
	/**  **/
	function LEADERBOARDS_GET_NUMBER_OF_COLUMNS(p0: any, p1: any): int
	/**  **/
	function LEADERBOARDS_GET_COLUMN_ID(p0: any, p1: any, p2: any): int
	/**  **/
	function LEADERBOARDS_GET_COLUMN_TYPE(p0: any, p1: any, p2: any): int
	/**  **/
	function LEADERBOARDS_READ_CLEAR_ALL(): int
	/**  **/
	function LEADERBOARDS_READ_CLEAR(p0: any, p1: any, p2: any): int
	/**  **/
	function LEADERBOARDS_READ_PENDING(p0: any, p1: any, p2: any): boolean
	/**  **/
	function LEADERBOARDS_READ_ANY_PENDING(): boolean
	/**  **/
	function LEADERBOARDS_READ_SUCCESSFUL(p0: any, p1: any, p2: any): boolean
	/**  **/
	function LEADERBOARDS2_READ_FRIENDS_BY_ROW(p0: Address, p1: Address, p2: any, p3: boolean, p4: any, p5: any): boolean
	/**  **/
	function LEADERBOARDS2_READ_BY_HANDLE(p0: Address, p1: Address): boolean
	/**  **/
	function LEADERBOARDS2_READ_BY_ROW(p0: Address, p1: Address, p2: any, p3: Address, p4: any, p5: Address, p6: any): boolean
	/**  **/
	function LEADERBOARDS2_READ_BY_RANK(p0: Address, p1: any, p2: any): boolean
	/**  **/
	function LEADERBOARDS2_READ_BY_RADIUS(p0: Address, p1: any, p2: Address): boolean
	/**  **/
	function LEADERBOARDS2_READ_BY_SCORE_INT(p0: Address, p1: any, p2: any): boolean
	/**  **/
	function LEADERBOARDS2_READ_BY_SCORE_FLOAT(p0: Address, p1: float, p2: any): boolean
	/**  **/
	function LEADERBOARDS2_READ_RANK_PREDICTION(p0: Address, p1: Address, p2: Address): boolean
	/**  **/
	function LEADERBOARDS2_READ_BY_PLAFORM(p0: Address, gamerHandleCsv: string, platformName: string): boolean
	/**  **/
	function LEADERBOARDS2_READ_GET_ROW_DATA_START(p0: Address): boolean
	/**  **/
	function LEADERBOARDS2_READ_GET_ROW_DATA_END(): void
	/**  **/
	function LEADERBOARDS2_READ_GET_ROW_DATA_INFO(p0: any, p1: Address): boolean
	/**  **/
	function LEADERBOARDS2_READ_GET_ROW_DATA_INT(p0: any, p1: any): int
	/**  **/
	function LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(p0: any, p1: any): float
	/**  **/
	function LEADERBOARDS2_WRITE_DATA(p0: Address): boolean
	/**  **/
	function LEADERBOARDS_WRITE_ADD_COLUMN(p0: any, p1: any, p2: float): void
	/**  **/
	function LEADERBOARDS_WRITE_ADD_COLUMN_LONG(p0: any, p1: any, p2: any): void
	/**  **/
	function LEADERBOARDS_CACHE_DATA_ROW(p0: Address): boolean
	/**  **/
	function LEADERBOARDS_CLEAR_CACHE_DATA(): void
	/**  **/
	function LEADERBOARDS_CLEAR_CACHE_DATA_ID(p0: any): void
	/**  **/
	function LEADERBOARDS_GET_CACHE_EXISTS(p0: any): boolean
	/**  **/
	function LEADERBOARDS_GET_CACHE_TIME(p0: any): int
	/**  **/
	function LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(p0: any): int
	/**  **/
	function LEADERBOARDS_GET_CACHE_DATA_ROW(p0: any, p1: any, p2: Address): boolean
	/**  **/
	function PRESENCE_EVENT_UPDATESTAT_INT(statHash: Hash, value: int, p2: int): void
	/**  **/
	function PRESENCE_EVENT_UPDATESTAT_FLOAT(statHash: Hash, value: float, p2: int): void
	/**  **/
	function PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(statHash: Hash, value: int, p2: int, string: string): void
	/**  **/
	function GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES(): boolean
	/**  **/
	function SET_HAS_POSTED_ALL_VEHICLES_DRIVEN(): void
	/**  **/
	function SET_PROFILE_SETTING_PROLOGUE_COMPLETE(): void
	/** Sets profile setting 939 **/
	function SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE(): void
	/** Sets profile setting 933 **/
	function SET_PROFILE_SETTING_CREATOR_RACES_DONE(value: int): void
	/** Sets profile setting 934 **/
	function SET_PROFILE_SETTING_CREATOR_DM_DONE(value: int): void
	/** Sets profile setting 935 **/
	function SET_PROFILE_SETTING_CREATOR_CTF_DONE(value: int): void
	/**  **/
	function SET_JOB_ACTIVITY_ID_STARTED(p0: any, p1: any): void
	/**  **/
	function SET_FREEMODE_PROLOGUE_DONE(p0: any, p1: any): void
	/** Sets profile setting 940 and 941 **/
	function SET_FREEMODE_STRAND_PROGRESSION_STATUS(profileSetting: int, settingValue: int): void
	/**  **/
	function STAT_NETWORK_INCREMENT_ON_SUICIDE(p0: any, p1: float): void
	/**  **/
	function STAT_SET_CHEAT_IS_ACTIVE(): void
	/**  **/
	function LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(p0: Address, p1: Address): boolean
	/**  **/
	function FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE(): void
	/**  **/
	function STAT_MIGRATE_CLEAR_FOR_RESTART(): void
	/** platformName must be one of the following: ps3, xbox360, ps4, xboxone **/
	function STAT_MIGRATE_SAVEGAME_START(platformName: string): boolean
	/**  **/
	function STAT_MIGRATE_SAVEGAME_GET_STATUS(): int
	/**  **/
	function STAT_MIGRATE_CHECK_ALREADY_DONE(): boolean
	/**  **/
	function STAT_MIGRATE_CHECK_START(): boolean
	/**  **/
	function STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(p0: any): int
	/**  **/
	function STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(p0: any, p1: Address): int
	/**  **/
	function STAT_GET_SAVE_MIGRATION_STATUS(data: Address): int
	/**  **/
	function STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION(): boolean
	/**  **/
	function STAT_GET_CANCEL_SAVE_MIGRATION_STATUS(): int
	/**  **/
	function STAT_SAVE_MIGRATION_CONSUME_CONTENT(contentId: Hash, srcPlatform: string, srcGamerHandle: string): boolean
	/**  **/
	function STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(p0: IntPointer): int
	/**  **/
	function STAT_ENABLE_STATS_TRACKING(): void
	/** Prevents updates to CStatsMgr (e.g., STAT_SET_* natives) **/
	function STAT_DISABLE_STATS_TRACKING(): void
	/**  **/
	function STAT_IS_STATS_TRACKING_ENABLED(): boolean
	/** enum StatTrackingType
	{
		LongestWheelie = 1,
		LongestStoppie = 2,
		NoCrashes = 3,
		HighestSpeed = 4,
		_MostFlips = 5,
		_LongestSpin = 6,
		_HighestJumpReached = 7,
		LongestJump = 8,
		_NearMissesNoCrash = 9,
		LongestFallSurvived = 10,
		LowestParachute = 11,
		ReverseDriving = 12,
		LongestFreefall = 13,
		VehiclesStolen = 14,
		_SomeCFireEventCount = 15,
		_Unk16 = 16,
		_LowFlyingTime = 17,
		LowFlying = 18,
		_InvertedFlyingTime = 19,
		InvertedFlying = 20,
		_PlaneSpinCount = 21,
		MeleeKills = 22, // Players
		_LongestSniperKill = 23,
		SniperSkills = 24, // Players
		DrivebyKills = 25, // Players
		HeadshotKills = 26, // Players
		LongestBail = 27,
		_TotalRammedByCar = 28,
		NearMissesPrecise = 29,
		_FreefallTime = 30,
		Unk31 = 31,
	}
	
	enum StatTrackingValueType
	{
		Total,
		Max,
		Min
	} **/
	function STAT_START_RECORD_STAT(statType: int, valueType: int): boolean
	/**  **/
	function STAT_STOP_RECORD_STAT(): boolean
	/**  **/
	function STAT_GET_RECORDED_VALUE(value: FloatPointer): boolean
	/**  **/
	function STAT_IS_RECORDING_STAT(): boolean
	/** Perform the most near misses with other vehicles in a land vehicle without crashing **/
	function STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE(): int
	/** Perform the longest wheelie on a motorcycle **/
	function STAT_GET_CURRENT_REAR_WHEEL_DISTANCE(): float
	/** Perform the longest stoppie on a motorcycle **/
	function STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE(): float
	/** Perform the longest jump in a land vehicle **/
	function STAT_GET_CURRENT_JUMP_DISTANCE(): float
	/** Drive the furthest distance in a land vehicle without crashing **/
	function STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE(): float
	/** Achieve the highest speed in a land vehicle **/
	function STAT_GET_CURRENT_SPEED(): float
	/** Reverse the longest distance without crashing **/
	function STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE(): float
	/** Fall the longest distance with a parachute before opening it **/
	function STAT_GET_CURRENT_SKYDIVING_DISTANCE(): float
	/** Fly low to the ground for the longest distance **/
	function STAT_GET_CHALLENGE_FLYING_DIST(): float
	/**  **/
	function STAT_GET_FLYING_ALTITUDE(outValue: FloatPointer): boolean
	/** Or non-flyable area **/
	function STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN(): boolean
	/** Travel the furthest distance when bailing from a vehicle **/
	function STAT_GET_VEHICLE_BAIL_DISTANCE(): float
	/** This function is hard-coded to always return 1. **/
	function STAT_ROLLBACK_SAVE_MIGRATION(): boolean
	/** Sets profile setting 866 **/
	function SET_HAS_SPECIALEDITION_CONTENT(value: int): void
	/** Sets profile setting 501 **/
	function SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(transactionId: int): void
	/**  **/
	function GET_BOSS_GOON_UUID(p0: any, p1: any, p2: any): void
	/**  **/
	function PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(p0: any): void
	/**  **/
	function PLAYSTATS_BW_YATCHATTACK(p0: any): void
	/**  **/
	function PLAYSTATS_BW_HUNT_THE_BOSS(p0: any): void
	/**  **/
	function PLAYSTATS_BW_SIGHTSEER(p0: any): void
	/**  **/
	function PLAYSTATS_BW_ASSAULT(p0: any): void
	/**  **/
	function PLAYSTATS_BW_BELLY_OF_THE_BEAST(p0: any): void
	/**  **/
	function PLAYSTATS_BW_HEAD_HUNTER(p0: any): void
	/**  **/
	function PLAYSTATS_BW_FRAGILE_GOODS(p0: any): void
	/**  **/
	function PLAYSTATS_BW_AIR_FREIGHT(p0: any): void
	/**  **/
	function PLAYSTATS_BC_CAR_JACKING(p0: any): void
	/**  **/
	function PLAYSTATS_BC_SMASH_AND_GRAB(p0: any): void
	/**  **/
	function PLAYSTATS_BC_PROTECTION_RACKET(p0: any): void
	/**  **/
	function PLAYSTATS_BC_MOST_WANTED(p0: any): void
	/**  **/
	function PLAYSTATS_BC_FINDERS_KEEPERS(p0: any): void
	/**  **/
	function PLAYSTATS_BC_POINT_TO_POINT(p0: any): void
	/**  **/
	function PLAYSTATS_BC_CASHING(p0: any): void
	/**  **/
	function PLAYSTATS_BC_SALVAGE(p0: any): void
	/**  **/
	function PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(amount: int): void
	/**  **/
	function PLAYSTATS_BUY_CONTRABAND_MISSION(data: Address): void
	/**  **/
	function PLAYSTATS_SELL_CONTRABAND_MISSION(data: Address): void
	/**  **/
	function PLAYSTATS_DEFEND_CONTRABAND_MISSION(data: Address): void
	/**  **/
	function PLAYSTATS_RECOVER_CONTRABAND_MISSION(data: Address): void
	/**  **/
	function PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(p0: any): void
	/**  **/
	function START_BEING_BOSS(p0: any): void
	/**  **/
	function START_BEING_GOON(p0: any, p1: any, p2: any): void
	/**  **/
	function END_BEING_BOSS(p0: any, p1: any): void
	/**  **/
	function END_BEING_GOON(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function HIRED_LIMO(p0: any, p1: any): void
	/**  **/
	function ORDER_BOSS_VEHICLE(p0: any, p1: any, vehicleHash: Hash): void
	/**  **/
	function CHANGE_UNIFORM(p0: any, p1: any, p2: any): void
	/**  **/
	function CHANGE_GOON_LOOKING_FOR_WORK(p0: any): void
	/**  **/
	function SEND_METRIC_GHOSTING_TO_PLAYER(p0: any): void
	/**  **/
	function SEND_METRIC_VIP_POACH(p0: any, p1: any, p2: any): void
	/**  **/
	function SEND_METRIC_PUNISH_BODYGUARD(p0: any): void
	/** Allows CEventNetworkStuntPerformed to be triggered. **/
	function PLAYSTATS_START_TRACKING_STUNTS(): void
	/** Disallows CEventNetworkStuntPerformed to be triggered. **/
	function PLAYSTATS_STOP_TRACKING_STUNTS(): void
	/**  **/
	function PLAYSTATS_MISSION_ENDED(p0: any): void
	/**  **/
	function PLAYSTATS_IMPEXP_MISSION_ENDED(p0: any): void
	/**  **/
	function PLAYSTATS_CHANGE_MC_ROLE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void
	/**  **/
	function PLAYSTATS_CHANGE_MC_OUTFIT(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_SWITCH_MC_EMBLEM(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_MC_REQUEST_BIKE(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_ABANDONED_MC(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_EARNED_MC_POINTS(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/**  **/
	function PLAYSTATS_MC_FORMATION_ENDS(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void
	/**  **/
	function PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void
	/**  **/
	function PLAYSTATS_RIVAL_BEHAVIOR(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void
	/**  **/
	function PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void
	/**  **/
	function PLAYSTATS_DUPE_DETECTED(data: Address): void
	/**  **/
	function PLAYSTATS_BAN_ALERT(p0: int): void
	/**  **/
	function PLAYSTATS_GUNRUNNING_MISSION_ENDED(data: Address): void
	/**  **/
	function PLAYSTATS_GUNRUNNING_RND(p0: any): void
	/**  **/
	function PLAYSTATS_BUSINESS_BATTLE_ENDED(p0: any): void
	/**  **/
	function PLAYSTATS_WAREHOUSE_MISSION_ENDED(p0: any): void
	/**  **/
	function PLAYSTATS_NIGHTCLUB_MISSION_ENDED(p0: any): void
	/**  **/
	function PLAYSTATS_DJ_USAGE(p0: any, p1: any): void
	/**  **/
	function PLAYSTATS_MINIGAME_USAGE(p0: any, p1: any, p2: any): void
	/**  **/
	function PLAYSTATS_STONE_HATCHET_ENDED(data: Address): void
	/**  **/
	function PLAYSTATS_SMUGGLER_MISSION_ENDED(data: Address): void
	/**  **/
	function PLAYSTATS_FM_HEIST_PREP_ENDED(data: Address): void
	/**  **/
	function PLAYSTATS_INSTANCED_HEIST_ENDED(data: Address, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_DAR_CHECKPOINT(data: Address): void
	/**  **/
	function PLAYSTATS_ENTER_SESSION_PACK(data: Address): void
	/**  **/
	function PLAYSTATS_DRONE_USAGE(p0: int, p1: int, p2: int): void
	/**  **/
	function PLAYSTATS_SPIN_WHEEL(p0: int, p1: int, p2: int, p3: int): void
	/**  **/
	function PLAYSTATS_ARENA_WARS_SPECTATOR(p0: int, p1: int, p2: int, p3: int, p4: int): void
	/**  **/
	function PLAYSTATS_ARENA_WARS_ENDED(data: Address): void
	/**  **/
	function PLAYSTATS_SWITCH_PASSIVE_MODE(p0: boolean, p1: int, p2: int, p3: int): void
	/**  **/
	function PLAYSTATS_COLLECTIBLE_PICKED_UP(p0: any, p1: any, p2: any, p3: any, moneyAmount: int, rpAmount: int, chipsAmount: int, p7: any, p8: int, p9: any, p10: any): void
	/**  **/
	function PLAYSTATS_CASINO_STORY_MISSION_ENDED(p0: any, p1: any): void
	/**  **/
	function PLAYSTATS_CASINO_CHIP(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_ROULETTE(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_BLACKJACK(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_THREE_CARD_POKER(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_SLOT_MACHINE(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_INSIDE_TRACK(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_LUCKY_SEVEN(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_ROULETTE_LIGHT(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_BLACKJACK_LIGHT(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(p0: any): void
	/**  **/
	function PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(p0: any): void
	/**  **/
	function PLAYSTATS_ARCADE_GAME(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void
	/**  **/
	function PLAYSTATS_ARCADE_LOVE_MATCH(p0: any, p1: any): void
	/**  **/
	function PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(data: Address): void
	/**  **/
	function PLAYSTATS_HEIST3_DRONE(p0: any): void
	/**  **/
	function PLAYSTATS_HEIST3_HACK(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/**  **/
	function PLAYSTATS_NPC_PHONE(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/**  **/
	function PLAYSTATS_ARCADE_CABINET(p0: any): void
	/**  **/
	function PLAYSTATS_HEIST3_FINALE(p0: any): void
	/**  **/
	function PLAYSTATS_HEIST3_PREP(p0: any): void
	/**  **/
	function PLAYSTATS_MASTER_CONTROL(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_QUIT_MODE(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_MISSION_VOTE(p0: any): void
	/**  **/
	function PLAYSTATS_NJVS_VOTE(p0: any): void
	/**  **/
	function PLAYSTATS_KILL_YOURSELF(): void
	/**  **/
	function PLAYSTATS_FM_MISSION_END(p0: any, p1: any, p2: any): void
	/**  **/
	function PLAYSTATS_HEIST4_PREP(p0: any): void
	/**  **/
	function PLAYSTATS_HEIST4_FINALE(p0: any): void
	/**  **/
	function PLAYSTATS_HEIST4_HACK(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function PLAYSTATS_SUB_WEAP(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_FAST_TRVL(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void
	/**  **/
	function PLAYSTATS_HUB_ENTRY(p0: any): void
	/**  **/
	function PLAYSTATS_DJ_MISSION_ENDED(p0: any): void
	/**  **/
	function PLAYSTATS_ROBBERY_PREP(p0: any): void
	/**  **/
	function PLAYSTATS_ROBBERY_FINALE(p0: any): void
	/**  **/
	function PLAYSTATS_EXTRA_EVENT(p0: any): void
	/**  **/
	function PLAYSTATS_CARCLUB_POINTS(p0: any): void
	/**  **/
	function PLAYSTATS_CARCLUB_CHALLENGE(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function PLAYSTATS_CARCLUB_PRIZE(p0: int, vehicleModel: Hash): void
	/**  **/
	function PLAYSTATS_AWARD_NAV(p0: any, p1: any): void
	/**  **/
	function PLAYSTATS_INST_MISSION_END(p0: any): void
	/**  **/
	function PLAYSTATS_HUB_EXIT(p0: any): void
	/**  **/
	function PLAYSTATS_INVENTORY(p0: any): void
}

/** @noSelf **/
declare namespace STREAMING {
	/**  **/
	function LOAD_ALL_OBJECTS_NOW(): void
	/**  **/
	function LOAD_SCENE(x: float, y: float, z: float): void
	/**  **/
	function NETWORK_UPDATE_LOAD_SCENE(): boolean
	/**  **/
	function IS_NETWORK_LOADING_SCENE(): boolean
	/**  **/
	function SET_INTERIOR_ACTIVE(interiorID: int, toggle: boolean): void
	/** Request a model to be loaded into memory.
	 **/
	function REQUEST_MODEL(model: Hash): void
	/**  **/
	function REQUEST_MENU_PED_MODEL(model: Hash): void
	/** Checks if the specified model has loaded into memory. **/
	function HAS_MODEL_LOADED(model: Hash): boolean
	/** STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");
	STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
	STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");
	STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");
	STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");
	STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo"); **/
	function REQUEST_MODELS_IN_ROOM(interior: Interior, roomName: string): void
	/** Unloads model from memory **/
	function SET_MODEL_AS_NO_LONGER_NEEDED(model: Hash): void
	/** Check if model is in cdimage(rpf) **/
	function IS_MODEL_IN_CDIMAGE(model: Hash): boolean
	/** Returns whether the specified model exists in the game. **/
	function IS_MODEL_VALID(model: Hash): boolean
	/**  **/
	function IS_MODEL_A_PED(model: Hash): boolean
	/** Returns whether the specified model represents a vehicle. **/
	function IS_MODEL_A_VEHICLE(model: Hash): boolean
	/**  **/
	function REQUEST_COLLISION_AT_COORD(x: float, y: float, z: float): void
	/**  **/
	function REQUEST_COLLISION_FOR_MODEL(model: Hash): void
	/**  **/
	function HAS_COLLISION_FOR_MODEL_LOADED(model: Hash): boolean
	/** Alias of REQUEST_COLLISION_AT_COORD. **/
	function REQUEST_ADDITIONAL_COLLISION_AT_COORD(x: float, y: float, z: float): void
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function DOES_ANIM_DICT_EXIST(animDict: string): boolean
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function REQUEST_ANIM_DICT(animDict: string): void
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function HAS_ANIM_DICT_LOADED(animDict: string): boolean
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function REMOVE_ANIM_DICT(animDict: string): void
	/** Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function REQUEST_ANIM_SET(animSet: string): void
	/** Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
	
	Animation set and clip set are synonymous.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function HAS_ANIM_SET_LOADED(animSet: string): boolean
	/** Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
	
	Animation set and clip set are synonymous.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function REMOVE_ANIM_SET(animSet: string): void
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function REQUEST_CLIP_SET(clipSet: string): void
	/** Alias for HAS_ANIM_SET_LOADED.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function HAS_CLIP_SET_LOADED(clipSet: string): boolean
	/** Alias for REMOVE_ANIM_SET.
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json **/
	function REMOVE_CLIP_SET(clipSet: string): void
	/** Exemple: REQUEST_IPL("TrevorsTrailerTrash");
	
	Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json **/
	function REQUEST_IPL(iplName: string): void
	/** Removes an IPL from the map.
	
	Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
	
	Example:
	C#:
	Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");
	
	C++:
	STREAMING::REMOVE_IPL("trevorstrailertidy");
	
	iplName = Name of IPL you want to remove. **/
	function REMOVE_IPL(iplName: string): void
	/** Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json **/
	function IS_IPL_ACTIVE(iplName: string): boolean
	/**  **/
	function SET_STREAMING(toggle: boolean): void
	/** 0 - default
	1 - HeistIsland **/
	function LOAD_GLOBAL_WATER_FILE(waterType: int): void
	/**  **/
	function GET_GLOBAL_WATER_FILE(): int
	/**  **/
	function SET_GAME_PAUSES_FOR_STREAMING(toggle: boolean): void
	/**  **/
	function SET_REDUCE_PED_MODEL_BUDGET(toggle: boolean): void
	/**  **/
	function SET_REDUCE_VEHICLE_MODEL_BUDGET(toggle: boolean): void
	/** This is a NOP function. It does nothing at all. **/
	function SET_DITCH_POLICE_MODELS(toggle: boolean): void
	/**  **/
	function GET_NUMBER_OF_STREAMING_REQUESTS(): int
	/** maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty **/
	function REQUEST_PTFX_ASSET(): void
	/**  **/
	function HAS_PTFX_ASSET_LOADED(): boolean
	/**  **/
	function REMOVE_PTFX_ASSET(): void
	/**  From the b678d decompiled scripts:
	
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
	 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station"); **/
	function REQUEST_NAMED_PTFX_ASSET(fxName: string): void
	/**  **/
	function HAS_NAMED_PTFX_ASSET_LOADED(fxName: string): boolean
	/**  **/
	function REMOVE_NAMED_PTFX_ASSET(fxName: string): void
	/**  **/
	function SET_VEHICLE_POPULATION_BUDGET(p0: int): void
	/** Control how many new (ambient?) peds will spawn in the game world.
	Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level. **/
	function SET_PED_POPULATION_BUDGET(p0: int): void
	/**  **/
	function CLEAR_FOCUS(): void
	/** Override the area where the camera will render the terrain.
	p3, p4 and p5 are usually set to 0.0
	 **/
	function SET_FOCUS_POS_AND_VEL(x: float, y: float, z: float, offsetX: float, offsetY: float, offsetZ: float): void
	/** It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity. **/
	function SET_FOCUS_ENTITY(entity: EntityHandle): void
	/**  **/
	function IS_ENTITY_FOCUS(entity: EntityHandle): boolean
	/**  **/
	function SET_RESTORE_FOCUS_ENTITY(p0: EntityHandle): void
	/** Possible p0 values:
	
	"prologue"
	"Prologue_Main" **/
	function SET_MAPDATACULLBOX_ENABLED(name: string, toggle: boolean): void
	/** This native does absolutely nothing, just a nullsub **/
	function SET_ALL_MAPDATA_CULLED(p0: any): void
	/** Always returns zero. **/
	function STREAMVOL_CREATE_SPHERE(x: float, y: float, z: float, rad: float, p4: any, p5: any): int
	/** Always returns zero. **/
	function STREAMVOL_CREATE_FRUSTUM(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float, p7: any, p8: any): int
	/** Always returns zero. **/
	function STREAMVOL_CREATE_LINE(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: any): int
	/**  **/
	function STREAMVOL_DELETE(unused: any): void
	/**  **/
	function STREAMVOL_HAS_LOADED(unused: any): boolean
	/**  **/
	function STREAMVOL_IS_VALID(unused: any): boolean
	/**  **/
	function IS_STREAMVOL_ACTIVE(): boolean
	/** `radius` value is usually between `3f` and `7000f` in original 1868 scripts.
	`p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
	Returns True if success, used only 7 times in decompiled scripts of 1868 **/
	function NEW_LOAD_SCENE_START(posX: float, posY: float, posZ: float, offsetX: float, offsetY: float, offsetZ: float, radius: float, p7: int): boolean
	/**  **/
	function NEW_LOAD_SCENE_START_SPHERE(x: float, y: float, z: float, radius: float, p4: any): boolean
	/**  **/
	function NEW_LOAD_SCENE_STOP(): void
	/**  **/
	function IS_NEW_LOAD_SCENE_ACTIVE(): boolean
	/**  **/
	function IS_NEW_LOAD_SCENE_LOADED(): boolean
	/**  **/
	function IS_SAFE_TO_START_PLAYER_SWITCH(): boolean
	/** // this enum comes directly from R* so don't edit this
	enum ePlayerSwitchTypes
	{
	  SWITCH_TYPE_AUTO,
	 SWITCH_TYPE_LONG,
	 SWITCH_TYPE_MEDIUM,
	   SWITCH_TYPE_SHORT
	};
	
	Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.
	
	----------------------------------------------------
	
	Examples from the decompiled scripts:
	
	STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);
	STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);
	STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);
	STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);
	
	Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.
	
	Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
	Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there. **/
	function START_PLAYER_SWITCH(from: EntityHandle, to: EntityHandle, flags: int, switchType: int): void
	/**  **/
	function STOP_PLAYER_SWITCH(): void
	/** Returns true if the player is currently switching, false otherwise.
	(When the camera is in the sky moving from Trevor to Franklin for example) **/
	function IS_PLAYER_SWITCH_IN_PROGRESS(): boolean
	/**  **/
	function GET_PLAYER_SWITCH_TYPE(): int
	/** x1, y1, z1 -- Coords of your ped model
	x2, y2, z2 -- Coords of the ped you want to switch to **/
	function GET_IDEAL_PLAYER_SWITCH_TYPE(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): int
	/**  **/
	function GET_PLAYER_SWITCH_STATE(): int
	/**  **/
	function GET_PLAYER_SHORT_SWITCH_STATE(): int
	/**  **/
	function SET_PLAYER_SHORT_SWITCH_STYLE(p0: int): void
	/**  **/
	function GET_PLAYER_SWITCH_JUMP_CUT_INDEX(): int
	/**  **/
	function SET_PLAYER_SWITCH_OUTRO(cameraCoordX: float, cameraCoordY: float, cameraCoordZ: float, camRotationX: float, camRotationY: float, camRotationZ: float, camFov: float, camFarClip: float, rotationOrder: int): void
	/** All names can be found in playerswitchestablishingshots.meta **/
	function SET_PLAYER_SWITCH_ESTABLISHING_SHOT(name: string): void
	/**  **/
	function ALLOW_PLAYER_SWITCH_PAN(): void
	/**  **/
	function ALLOW_PLAYER_SWITCH_OUTRO(): void
	/**  **/
	function ALLOW_PLAYER_SWITCH_ASCENT(): void
	/**  **/
	function ALLOW_PLAYER_SWITCH_DESCENT(): void
	/**  **/
	function IS_SWITCH_READY_FOR_DESCENT(): boolean
	/**  **/
	function ENABLE_SWITCH_PAUSE_BEFORE_DESCENT(): void
	/**  **/
	function DISABLE_SWITCH_OUTRO_FX(): void
	/** doesn't act normally when used on mount chilliad
	Flags is a bitflag:
	2^n - Enabled Functionality:
	0 - Skip camera rotate up
	3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit "properly" and then STOP_PLAYER_SWITCH
	6 - Invert Switch Direction (false = out, true = in)
	8 - Hang above ped
	
	switchType: 0 - 3
	0: 1 step towards ped
	1: 3 steps out from ped
	2: 1 step out from ped
	3: 1 step towards ped **/
	function SWITCH_TO_MULTI_FIRSTPART(ped: EntityHandle, flags: int, switchType: int): void
	/**  **/
	function SWITCH_TO_MULTI_SECONDPART(ped: EntityHandle): void
	/**  **/
	function IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED(): boolean
	/**  **/
	function GET_PLAYER_SWITCH_INTERP_OUT_DURATION(): int
	/**  **/
	function GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME(): int
	/**  **/
	function IS_SWITCH_SKIPPING_DESCENT(): boolean
	/**  **/
	function SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME(): void
	/**  **/
	function GET_LODSCALE(): float
	/** This allows you to override "extended distance scaling" setting. Needs to be called each frame.
	Max scaling seems to be 200.0, normal is 1.0
	See https://gfycat.com/DetailedHauntingIncatern **/
	function OVERRIDE_LODSCALE_THIS_FRAME(scaling: float): void
	/**  **/
	function REMAP_LODSCALE_RANGE_THIS_FRAME(p0: float, p1: float, p2: float, p3: float): void
	/**  **/
	function SUPPRESS_HD_MAP_STREAMING_THIS_FRAME(): void
	/**  **/
	function SET_RENDER_HD_ONLY(toggle: boolean): void
	/**  **/
	function FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME(): void
	/**  **/
	function IPL_GROUP_SWAP_START(iplName1: string, iplName2: string): void
	/**  **/
	function IPL_GROUP_SWAP_CANCEL(): void
	/**  **/
	function IPL_GROUP_SWAP_IS_READY(): boolean
	/**  **/
	function IPL_GROUP_SWAP_FINISH(): void
	/**  **/
	function IPL_GROUP_SWAP_IS_ACTIVE(): boolean
	/** This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
	For instance, GTA:O opening cutscene.
	https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
	https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker. **/
	function PREFETCH_SRL(srl: string): void
	/** Returns true when the srl from BEGIN_SRL is loaded. **/
	function IS_SRL_LOADED(): boolean
	/**  **/
	function BEGIN_SRL(): void
	/** Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL. **/
	function END_SRL(): void
	/**  **/
	function SET_SRL_TIME(p0: float): void
	/**  **/
	function SET_SRL_POST_CUTSCENE_CAMERA(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/**  **/
	function SET_SRL_READAHEAD_TIMES(p0: any, p1: any, p2: any, p3: any): void
	/**  **/
	function SET_SRL_LONG_JUMP_MODE(p0: boolean): void
	/**  **/
	function SET_SRL_FORCE_PRESTREAM(p0: any): void
	/**  **/
	function SET_HD_AREA(x: float, y: float, z: float, radius: float): void
	/**  **/
	function CLEAR_HD_AREA(): void
	/**  **/
	function INIT_CREATOR_BUDGET(): void
	/**  **/
	function SHUTDOWN_CREATOR_BUDGET(): void
	/**  **/
	function ADD_MODEL_TO_CREATOR_BUDGET(modelHash: Hash): boolean
	/**  **/
	function REMOVE_MODEL_FROM_CREATOR_BUDGET(modelHash: Hash): void
	/** 0.0 = no memory used
	1.0 = all memory used
	
	Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB **/
	function GET_USED_CREATOR_BUDGET(): float
	/** Enables the specified island. For more information, see islandhopper.meta **/
	function SET_ISLAND_ENABLED(name: string, toggle: boolean): void
}

/** @noSelf **/
declare namespace TASK {
	/** Stand still (?) **/
	function TASK_PAUSE(ped: EntityHandle, ms: int): void
	/** Makes the specified ped stand still for (time) milliseconds. **/
	function TASK_STAND_STILL(ped: EntityHandle, time: int): void
	/** Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
	
	v350: Ped ped, bool unused
	v678: Ped ped, bool unused, bool flag1, bool flag2
	
	flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true. **/
	function TASK_JUMP(ped: EntityHandle, usePlayerLaunchForce: boolean, doSuperJump: boolean, useFullSuperJumpForce: boolean): void
	/**  **/
	function TASK_COWER(ped: EntityHandle, duration: int): void
	/** In the scripts, p3 was always -1.
	
	p3 seems to be duration or timeout of turn animation.
	Also facingPed can be 0 or -1 so ped will just raise hands up. **/
	function TASK_HANDS_UP(ped: EntityHandle, duration: int, facingPed: EntityHandle, timeToFacePed: int, flags: int): void
	/**  **/
	function UPDATE_TASK_HANDS_UP_DURATION(ped: EntityHandle, duration: int): void
	/** The given ped will try to open the nearest door to 'seat'.
	Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer. **/
	function TASK_OPEN_VEHICLE_DOOR(ped: EntityHandle, vehicle: EntityHandle, timeOut: int, seat: int, speed: float): void
	/** speed 1.0 = walk, 2.0 = run
	p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
	p6 is always 0
	
	Usage of seat 
	-1 = driver
	0 = passenger
	1 = left back seat
	2 = right back seat
	3 = outside left
	4 = outside right **/
	function TASK_ENTER_VEHICLE(ped: EntityHandle, vehicle: EntityHandle, timeout: int, seat: int, speed: float, flag: int, overrideEntryClipsetName: string): void
	/** Flags from decompiled scripts:
	0 = normal exit and closes door.
	1 = normal exit and closes door.
	16 = teleports outside, door kept closed.
	64 = normal exit and closes door, maybe a bit slower animation than 0.
	256 = normal exit but does not close the door.
	4160 = ped is throwing himself out, even when the vehicle is still.
	262144 = ped moves to passenger seat first, then exits normally
	
	Others to be tried out: 320, 512, 131072. **/
	function TASK_LEAVE_VEHICLE(ped: EntityHandle, vehicle: EntityHandle, flags: int): void
	/**  **/
	function TASK_GET_OFF_BOAT(ped: EntityHandle, boat: EntityHandle): void
	/**  **/
	function TASK_SKY_DIVE(ped: EntityHandle, instant: boolean): void
	/** Second parameter is unused.
	
	second parameter was for jetpack in the early stages of gta and the hard coded code is now removed **/
	function TASK_PARACHUTE(ped: EntityHandle, giveParachuteItem: boolean, instant: boolean): void
	/** makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED **/
	function TASK_PARACHUTE_TO_TARGET(ped: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function SET_PARACHUTE_TASK_TARGET(ped: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function SET_PARACHUTE_TASK_THRUST(ped: EntityHandle, thrust: float): void
	/** minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling
	
	Only appears twice in the scripts.
	
	TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);
	TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f); **/
	function TASK_RAPPEL_FROM_HELI(ped: EntityHandle, minHeightAboveGround: float): void
	/** info about driving modes: https://gtaforums.com/topic/822314-guide-driving-styles/ **/
	function TASK_VEHICLE_DRIVE_TO_COORD(ped: EntityHandle, vehicle: EntityHandle, x: float, y: float, z: float, speed: float, p6: any, vehicleModel: Hash, drivingMode: int, stopRange: float, straightLineDistance: float): void
	/**  **/
	function TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(ped: EntityHandle, vehicle: EntityHandle, x: float, y: float, z: float, speed: float, driveMode: int, stopRange: float): void
	/**  **/
	function TASK_VEHICLE_DRIVE_WANDER(ped: EntityHandle, vehicle: EntityHandle, speed: float, drivingStyle: int): void
	/** p6 always -1
	p7 always 10.0
	p8 always 1 **/
	function TASK_FOLLOW_TO_OFFSET_OF_ENTITY(ped: EntityHandle, entity: EntityHandle, offsetX: float, offsetY: float, offsetZ: float, movementSpeed: float, timeout: int, stoppingRange: float, persistFollowing: boolean): void
	/**  **/
	function TASK_GO_STRAIGHT_TO_COORD(ped: EntityHandle, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void
	/**  **/
	function TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(ped: EntityHandle, entity: EntityHandle, x: float, y: float, z: float, moveBlendRatio: float, time: int): void
	/** Makes the specified ped achieve the specified heading.
	
	pedHandle: The handle of the ped to assign the task to.
	heading: The desired heading.
	timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time. **/
	function TASK_ACHIEVE_HEADING(ped: EntityHandle, heading: float, timeout: int): void
	/** MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE. **/
	function TASK_FLUSH_ROUTE(): void
	/** MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
	
	A maximum of 8 points can be added. **/
	function TASK_EXTEND_ROUTE(x: float, y: float, z: float): void
	/** MulleKD19: Makes the ped go on the created point route.
	
	ped: The ped to give the task to.
	speed: The speed to move at in m/s.
	int: Unknown. Can be 0, 1, 2 or 3.
	
	Example:
	TASK_FLUSH_ROUTE();
	TASK_EXTEND_ROUTE(0f, 0f, 70f);
	TASK_EXTEND_ROUTE(10f, 0f, 70f);
	TASK_EXTEND_ROUTE(10f, 10f, 70f);
	TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0); **/
	function TASK_FOLLOW_POINT_ROUTE(ped: EntityHandle, speed: float, mode: int): void
	/** The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
	
	Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
	
	Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
	
	Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
	
	enum EGOTO_ENTITY_SCRIPT_FLAGS
	{
		EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,
	}; **/
	function TASK_GO_TO_ENTITY(entity: EntityHandle, target: EntityHandle, duration: int, distance: float, moveBlendRatio: float, slowDownDistance: float, flags: int): void
	/** Makes the specified ped flee the specified distance from the specified position. **/
	function TASK_SMART_FLEE_COORD(ped: EntityHandle, x: float, y: float, z: float, distance: float, time: int, preferPavements: boolean, quitIfOutOfRange: boolean): void
	/** Makes a ped run away from another ped (fleeTarget).
	
	distance = ped will flee this distance.
	fleeTime = ped will flee for this amount of time, set to "-1" to flee forever **/
	function TASK_SMART_FLEE_PED(ped: EntityHandle, fleeTarget: EntityHandle, safeDistance: float, fleeTime: int, preferPavements: boolean, updateToNearestHatedPed: boolean): void
	/**  **/
	function TASK_REACT_AND_FLEE_PED(ped: EntityHandle, fleeTarget: EntityHandle): void
	/**  **/
	function TASK_SHOCKING_EVENT_REACT(ped: EntityHandle, eventHandle: int): void
	/**  **/
	function TASK_WANDER_IN_AREA(ped: EntityHandle, x: float, y: float, z: float, radius: float, minimalLength: float, timeBetweenWalks: float): void
	/** Makes ped walk around the area.
	
	set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration. **/
	function TASK_WANDER_STANDARD(ped: EntityHandle, heading: float, flags: int): void
	/**  **/
	function TASK_WANDER_SPECIFIC(ped: EntityHandle, conditionalAnimGroupStr: string, conditionalAnimStr: string, heading: float): void
	/** Modes:
	0 - ignore heading
	1 - park forward
	2 - park backwards
	
	Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
	
	Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something. **/
	function TASK_VEHICLE_PARK(ped: EntityHandle, vehicle: EntityHandle, x: float, y: float, z: float, heading: float, mode: int, radius: float, keepEngineOn: boolean): void
	/** known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a". **/
	function TASK_STEALTH_KILL(killer: EntityHandle, target: EntityHandle, stealthKillActionResultHash: Hash, desiredMoveBlendRatio: float, stealthFlags: int): void
	/**  **/
	function TASK_PLANT_BOMB(ped: EntityHandle, x: float, y: float, z: float, heading: float): void
	/** If no timeout, set timeout to -1. **/
	function TASK_FOLLOW_NAV_MESH_TO_COORD(ped: EntityHandle, x: float, y: float, z: float, moveBlendRatio: float, time: int, targetRadius: float, flags: int, targetHeading: float): void
	/**  **/
	function TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(ped: EntityHandle, x: float, y: float, z: float, moveBlendRatio: float, time: int, targetRadius: float, flags: int, slideToCoordHeading: float, maxSlopeNavigable: float, clampMaxSearchDistance: float, targetHeading: float): void
	/**  **/
	function SET_PED_PATH_CAN_USE_CLIMBOVERS(ped: EntityHandle, Toggle: boolean): void
	/**  **/
	function SET_PED_PATH_CAN_USE_LADDERS(ped: EntityHandle, Toggle: boolean): void
	/**  **/
	function SET_PED_PATH_CAN_DROP_FROM_HEIGHT(ped: EntityHandle, Toggle: boolean): void
	/** Default modifier is 1.0, minimum is 0.0 and maximum is 10.0. **/
	function SET_PED_PATH_CLIMB_COST_MODIFIER(ped: EntityHandle, modifier: float): void
	/**  **/
	function SET_PED_PATH_MAY_ENTER_WATER(ped: EntityHandle, mayEnterWater: boolean): void
	/**  **/
	function SET_PED_PATH_PREFER_TO_AVOID_WATER(ped: EntityHandle, avoidWater: boolean): void
	/**  **/
	function SET_PED_PATH_AVOID_FIRE(ped: EntityHandle, avoidFire: boolean): void
	/** Needs to be looped! And yes, it does work and is not a hash collision.
	Birds will try to reach the given height. **/
	function SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(height: float): void
	/** Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
	Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
	Looks like the native returns an int for the path's state:
	1 - ???
	2 - ???
	3 - Finished Generating  **/
	function GET_NAVMESH_ROUTE_DISTANCE_REMAINING(ped: EntityHandle, distanceRemaining: FloatPointer, isPathReady: BoolPointer): int
	/** See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details. **/
	function GET_NAVMESH_ROUTE_RESULT(ped: EntityHandle): int
	/**  **/
	function IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(ped: EntityHandle): boolean
	/** example from fm_mission_controller
	
	TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
	  **/
	function TASK_GO_TO_COORD_ANY_MEANS(ped: EntityHandle, x: float, y: float, z: float, moveBlendRatio: float, vehicle: EntityHandle, useLongRangeVehiclePathing: boolean, drivingFlags: int, maxRangeToShootTargets: float): void
	/**  **/
	function TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(ped: EntityHandle, x: float, y: float, z: float, moveBlendRatio: float, vehicle: EntityHandle, useLongRangeVehiclePathing: boolean, drivingFlags: int, maxRangeToShootTargets: float, extraVehToTargetDistToPreferVehicle: float, driveStraightLineDistance: float, extraFlags: int, warpTimerMS: float): void
	/**  **/
	function TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(ped: EntityHandle, x: float, y: float, z: float, moveBlendRatio: float, vehicle: EntityHandle, useLongRangeVehiclePathing: boolean, drivingFlags: int, maxRangeToShootTargets: float, extraVehToTargetDistToPreferVehicle: float, driveStraightLineDistance: float, extraFlags: int, cruiseSpeed: float, targetArriveDist: float): void
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
	
	float speed > normal speed is 8.0f
	----------------------
	
	float speedMultiplier > multiply the playback speed
	----------------------
	
	int duration: time in millisecond
	----------------------
	-1 _ _ _ _ _ _ _> Default (see flag)
	0 _ _ _ _ _ _ _ > Not play at all
	Small value _ _ > Slow down animation speed
	Other _ _ _ _ _ > freeze player control until specific time (ms) has 
	_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be 
	_ _ _ _ _ _ _ _ _ controllable.)
	
	int flag:
	----------------------
	enum eAnimationFlags
	{
	 ANIM_FLAG_NORMAL = 0,
	   ANIM_FLAG_REPEAT = 1,
	   ANIM_FLAG_STOP_LAST_FRAME = 2,
	   ANIM_FLAG_UPPERBODY = 16,
	   ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
	   ANIM_FLAG_CANCELABLE = 120,
	};
	Odd number : loop infinitely
	Even number : Freeze at last frame
	Multiple of 4: Freeze at last frame but controllable
	
	01 to 15 > Full body
	10 to 31 > Upper body
	32 to 47 > Full body > Controllable
	48 to 63 > Upper body > Controllable
	...
	001 to 255 > Normal
	256 to 511 > Garbled
	...
	
	playbackRate:
	
	values are between 0.0 and 1.0
	
	
	lockX:  
	
	0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
	> 1 for mini@sprunk
	 
	
	lockY:
	
	0 in most cases 
	1 for missfam5_yoga, missfra1mcs_2_crew_react
	
	
	lockZ: 
	
	    0 for single player 
	    Can be 1 but only for MP  **/
	function TASK_PLAY_ANIM(ped: EntityHandle, animDictionary: string, animationName: string, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: boolean, lockY: boolean, lockZ: boolean): void
	/** It's similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function TASK_PLAY_ANIM_ADVANCED(ped: EntityHandle, animDict: string, animName: string, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: any, animTime: float, rotOrder: int, ikFlags: int): void
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function STOP_ANIM_TASK(entity: EntityHandle, animDictionary: string, animationName: string, blendDelta: float): void
	/** From fm_mission_controller.c:
	reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
	           vVar28 = {0.094f, 0.02f, -0.005f};
	            vVar29 = {-92.24f, 63.64f, 150.24f};
	          func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
	         set_entity_lod_dist(net_to_ent(uVar30), 500);
	         attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
	           Var31.imm_4 = 1065353216;
	         Var31.imm_5 = 1065353216;
	         Var31.imm_9 = 1065353216;
	         Var31.imm_10 = 1065353216;
	            Var31.imm_14 = 1065353216;
	            Var31.imm_15 = 1065353216;
	            Var31.imm_17 = 1040187392;
	            Var31.imm_18 = 1040187392;
	            Var31.imm_19 = -1;
	            Var32.imm_4 = 1065353216;
	         Var32.imm_5 = 1065353216;
	         Var32.imm_9 = 1065353216;
	         Var32.imm_10 = 1065353216;
	            Var32.imm_14 = 1065353216;
	            Var32.imm_15 = 1065353216;
	            Var32.imm_17 = 1040187392;
	            Var32.imm_18 = 1040187392;
	            Var32.imm_19 = -1;
	            Var31 = 1;
	            Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
	          Var31.imm_2 = "idle";
	           Var31.imm_20 = 1048633;
	           Var31.imm_4 = 0.5f;
	           Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
	          task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
	          set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
	            remove_anim_dict("anim@heists@biolab@"); **/
	function TASK_SCRIPTED_ANIMATION(ped: EntityHandle, priorityLowData: IntPointer, priorityMidData: IntPointer, priorityHighData: IntPointer, blendInDelta: float, blendOutDelta: float): void
	/**  **/
	function PLAY_ENTITY_SCRIPTED_ANIM(entity: EntityHandle, priorityLowData: IntPointer, priorityMidData: IntPointer, priorityHighData: IntPointer, blendInDelta: float, blendOutDelta: float): void
	/** Looks like p1 may be a flag, still need to do some research, though. **/
	function STOP_ANIM_PLAYBACK(entity: EntityHandle, priority: int, secondary: boolean): void
	/**  **/
	function SET_ANIM_WEIGHT(entity: EntityHandle, weight: float, priority: int, index: int, secondary: boolean): void
	/**  **/
	function SET_ANIM_PHASE(entity: EntityHandle, phase: float, priority: int, secondary: boolean): void
	/**  **/
	function SET_ANIM_RATE(entity: EntityHandle, rate: float, priority: int, secondary: boolean): void
	/**  **/
	function SET_ANIM_LOOPED(entity: EntityHandle, looped: boolean, priority: int, secondary: boolean): void
	/** Example from the scripts:
	TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);
	
	=========================================================
	^^ No offense, but Idk how that would really help anyone.
	
	As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
	
	Known boneMaskTypes'
	"BONEMASK_HEADONLY"
	"BONEMASK_HEAD_NECK_AND_ARMS"
	"BONEMASK_HEAD_NECK_AND_L_ARM"
	"BONEMASK_HEAD_NECK_AND_R_ARM"
	
	p4 known args - 0.0f, 0.5f, 0.25f
	p5 known args - 0.0f, 0.25f
	p6 known args - 1 if a global if check is passed.
	p7 known args - 1 if a global if check is passed.
	
	The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
	=========================================================
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function TASK_PLAY_PHONE_GESTURE_ANIMATION(ped: EntityHandle, animDict: string, animation: string, boneMaskType: string, blendInDuration: float, blendOutDuration: float, isLooping: boolean, holdLastFrame: boolean): void
	/**  **/
	function TASK_STOP_PHONE_GESTURE_ANIMATION(ped: EntityHandle, blendOutOverride: float): void
	/**  **/
	function IS_PLAYING_PHONE_GESTURE_ANIM(ped: EntityHandle): boolean
	/**  **/
	function GET_PHONE_GESTURE_ANIM_CURRENT_TIME(ped: EntityHandle): float
	/**  **/
	function GET_PHONE_GESTURE_ANIM_TOTAL_TIME(ped: EntityHandle): float
	/** Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
	
	Here's how its used - 
	
	TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");
	
	TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0/ *1* /], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");
	
	FYI : Speedo is the name of van in which chop was put in the mission. **/
	function TASK_VEHICLE_PLAY_ANIM(vehicle: EntityHandle, animationSet: string, animationName: string): void
	/** enum eScriptLookatFlags
	{
		SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly
		SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly
		SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits
		SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit
		SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit
		SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit
		SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits
		SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit
		SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit
		SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit
		SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)
		SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV
		SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target
		SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes  
		SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF
		SLF_FROM_SCRIPT                = 32768, // internal use only
		SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver
	}; **/
	function TASK_LOOK_AT_COORD(entity: EntityHandle, x: float, y: float, z: float, duration: int, flags: int, priority: int): void
	/** For flags, please refer to TASK_LOOK_AT_COORD. **/
	function TASK_LOOK_AT_ENTITY(ped: EntityHandle, lookAt: EntityHandle, duration: int, flags: int, priority: int): void
	/**  **/
	function TASK_CLEAR_LOOK_AT(ped: EntityHandle): void
	/**  **/
	function OPEN_SEQUENCE_TASK(taskSequenceId: IntPointer): void
	/**  **/
	function CLOSE_SEQUENCE_TASK(taskSequenceId: int): void
	/**  **/
	function TASK_PERFORM_SEQUENCE(ped: EntityHandle, taskSequenceId: int): void
	/**  **/
	function TASK_PERFORM_SEQUENCE_LOCALLY(ped: EntityHandle, taskSequenceId: int): void
	/**  **/
	function CLEAR_SEQUENCE_TASK(taskSequenceId: IntPointer): void
	/**  **/
	function SET_SEQUENCE_TO_REPEAT(taskSequenceId: int, repeat: boolean): void
	/** returned values:
	0 to 7 = task that's currently in progress, 0 meaning the first one.
	-1 no task sequence in progress. **/
	function GET_SEQUENCE_PROGRESS(ped: EntityHandle): int
	/** Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt **/
	function GET_IS_TASK_ACTIVE(ped: EntityHandle, taskIndex: int): boolean
	/** Gets the status of a script-assigned task.
	taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt **/
	function GET_SCRIPT_TASK_STATUS(ped: EntityHandle, taskHash: Hash): int
	/** https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt **/
	function GET_ACTIVE_VEHICLE_MISSION_TYPE(vehicle: EntityHandle): int
	/** Flags are the same flags used in TASK_LEAVE_VEHICLE **/
	function TASK_LEAVE_ANY_VEHICLE(ped: EntityHandle, delayTime: int, flags: int): void
	/**  **/
	function TASK_AIM_GUN_SCRIPTED(ped: EntityHandle, scriptTask: Hash, disableBlockingClip: boolean, instantBlendToAim: boolean): void
	/**  **/
	function TASK_AIM_GUN_SCRIPTED_WITH_TARGET(ped: EntityHandle, target: EntityHandle, x: float, y: float, z: float, gunTaskType: int, disableBlockingClip: boolean, forceAim: boolean): void
	/**  **/
	function UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(ped: EntityHandle, target: EntityHandle, x: float, y: float, z: float, disableBlockingClip: boolean): void
	/**  **/
	function GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(gunTaskType: int): string
	/** duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped **/
	function TASK_AIM_GUN_AT_ENTITY(ped: EntityHandle, entity: EntityHandle, duration: int, instantBlendToAim: boolean): void
	/** duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped **/
	function TASK_TURN_PED_TO_FACE_ENTITY(ped: EntityHandle, entity: EntityHandle, duration: int): void
	/**  **/
	function TASK_AIM_GUN_AT_COORD(ped: EntityHandle, x: float, y: float, z: float, time: int, instantBlendToAim: boolean, playAnimIntro: boolean): void
	/** Firing Pattern Hash Information: https://pastebin.com/Px036isB **/
	function TASK_SHOOT_AT_COORD(ped: EntityHandle, x: float, y: float, z: float, duration: int, firingPattern: Hash): void
	/** Makes the specified ped shuffle to the next vehicle seat.
	The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle. **/
	function TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(ped: EntityHandle, vehicle: EntityHandle, useAlternateShuffle: boolean): void
	/**  **/
	function CLEAR_PED_TASKS(ped: EntityHandle): void
	/**  **/
	function CLEAR_PED_SECONDARY_TASK(ped: EntityHandle): void
	/**  **/
	function TASK_EVERYONE_LEAVE_VEHICLE(vehicle: EntityHandle): void
	/** enum ESEEK_ENTITY_OFFSET_FLAGS
	{
		ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,
		ESEEK_KEEP_TO_PAVEMENTS = 0x02
	}; **/
	function TASK_GOTO_ENTITY_OFFSET(ped: EntityHandle, entity: EntityHandle, time: int, seekRadius: float, seekAngleDeg: float, moveBlendRatio: float, gotoEntityOffsetFlags: int): void
	/**  **/
	function TASK_GOTO_ENTITY_OFFSET_XY(ped: EntityHandle, entity: EntityHandle, duration: int, targetRadius: float, offsetX: float, offsetY: float, moveBlendRatio: float, gotoEntityOffsetFlags: int): void
	/** duration in milliseconds **/
	function TASK_TURN_PED_TO_FACE_COORD(ped: EntityHandle, x: float, y: float, z: float, duration: int): void
	/** '1 - brake
	'3 - brake + reverse
	'4 - turn left 90 + braking
	'5 - turn right 90 + braking
	'6 - brake strong (handbrake?) until time ends
	'7 - turn left + accelerate
	'8 - turn right + accelerate
	'9 - weak acceleration
	'10 - turn left + restore wheel pos to center in the end
	'11 - turn right + restore wheel pos to center in the end
	'13 - turn left + go reverse
	'14 - turn left + go reverse
	'16 - crash the game after like 2 seconds :)
	'17 - keep actual state, game crashed after few tries
	'18 - game crash
	'19 - strong brake + turn left/right
	'20 - weak brake + turn left then turn right
	'21 - weak brake + turn right then turn left
	'22 - brake + reverse
	'23 - accelerate fast
	'24 - brake
	'25 - brake turning left then when almost stopping it turns left more
	'26 - brake turning right then when almost stopping it turns right more
	'27 - brake until car stop or until time ends
	'28 - brake + strong reverse acceleration
	'30 - performs a burnout (brake until stop + brake and accelerate)
	'31 - accelerate + handbrake
	'32 - accelerate very strong
	
	Seems to be this:
	Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else **/
	function TASK_VEHICLE_TEMP_ACTION(driver: EntityHandle, vehicle: EntityHandle, action: int, time: int): void
	/** missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt **/
	function TASK_VEHICLE_MISSION(driver: EntityHandle, vehicle: EntityHandle, vehicleTarget: EntityHandle, missionType: int, cruiseSpeed: float, drivingStyle: int, targetReached: float, straightLineDistance: float, DriveAgainstTraffic: boolean): void
	/** See TASK_VEHICLE_MISSION **/
	function TASK_VEHICLE_MISSION_PED_TARGET(ped: EntityHandle, vehicle: EntityHandle, pedTarget: EntityHandle, missionType: int, maxSpeed: float, drivingStyle: int, minDistance: float, straightLineDistance: float, DriveAgainstTraffic: boolean): void
	/** See TASK_VEHICLE_MISSION **/
	function TASK_VEHICLE_MISSION_COORS_TARGET(ped: EntityHandle, vehicle: EntityHandle, x: float, y: float, z: float, mission: int, cruiseSpeed: float, drivingStyle: int, targetReached: float, straightLineDistance: float, DriveAgainstTraffic: boolean): void
	/** Makes a ped follow the targetVehicle with <minDistance> in between.
	
	note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
	
	Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
	-1 = behind
	0 = ahead
	1 = left
	2 = right
	3 = back left
	4 = back right
	
	if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
	
	Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/ **/
	function TASK_VEHICLE_ESCORT(ped: EntityHandle, vehicle: EntityHandle, targetVehicle: EntityHandle, mode: int, speed: float, drivingStyle: int, minDistance: float, minHeightAboveTerrain: int, noRoadsDistance: float): void
	/** Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
	
	drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/ **/
	function TASK_VEHICLE_FOLLOW(driver: EntityHandle, vehicle: EntityHandle, targetEntity: EntityHandle, speed: float, drivingStyle: int, minDistance: int): void
	/** chases targetEnt fast and aggressively
	--
	Makes ped (needs to be in vehicle) chase targetEnt. **/
	function TASK_VEHICLE_CHASE(driver: EntityHandle, targetEnt: EntityHandle): void
	/** pilot, vehicle and altitude are rather self-explanatory.
	
	p4: is unused variable in the function.
	
	entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
	
	'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
	
	'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
	
	NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
	
	NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter. **/
	function TASK_VEHICLE_HELI_PROTECT(pilot: EntityHandle, vehicle: EntityHandle, entityToFollow: EntityHandle, targetSpeed: float, drivingFlags: int, radius: float, altitude: int, heliFlags: int): void
	/** Flag 8: Medium-aggressive boxing tactic with a bit of PIT
	Flag 1: Aggressive ramming of suspect
	Flag 2: Ram attempts
	Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
	Flag 16: Ramming, seems to be slightly less aggressive than 1-2. **/
	function SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(ped: EntityHandle, flag: int, set: boolean): void
	/**  **/
	function SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(ped: EntityHandle, distance: float): void
	/** Ped pilot should be in a heli.
	EntityToFollow can be a vehicle or Ped.
	
	x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
	
	
	NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given. **/
	function TASK_HELI_CHASE(pilot: EntityHandle, entityToFollow: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function TASK_PLANE_CHASE(pilot: EntityHandle, entityToFollow: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function TASK_PLANE_LAND(pilot: EntityHandle, plane: EntityHandle, runwayStartX: float, runwayStartY: float, runwayStartZ: float, runwayEndX: float, runwayEndY: float, runwayEndZ: float): void
	/**  **/
	function CLEAR_DEFAULT_PRIMARY_TASK(ped: EntityHandle): void
	/** This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.
	It is necessary to clear the ped's tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches. **/
	function CLEAR_PRIMARY_VEHICLE_TASK(vehicle: EntityHandle): void
	/**  **/
	function CLEAR_VEHICLE_CRASH_TASK(vehicle: EntityHandle): void
	/**  **/
	function TASK_PLANE_GOTO_PRECISE_VTOL(ped: EntityHandle, vehicle: EntityHandle, x: float, y: float, z: float, flightHeight: int, minHeightAboveTerrain: int, useDesiredOrientation: boolean, desiredOrientation: float, autopilot: boolean): void
	/** Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.
	
	p0 is always 0, p5 is always 1
	
	p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.
	
	Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after **/
	function TASK_SUBMARINE_GOTO_AND_STOP(ped: EntityHandle, submarine: EntityHandle, x: float, y: float, z: float, autopilot: boolean): void
	/** Must have targetVehicle, targetPed, OR destination X/Y/Z set
	Will follow targeted vehicle/ped, or fly to destination
	Set whichever is not being used to 0
	
	
	Mission mode type:
	 - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)
	 - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.
	 - 8: Makes the heli flee from the ped/vehicle/coordinate
	 - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.
	 - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target
	 - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)
	 - 20: Makes the heli land when near target ped. It won't resume chasing.
	 - 21: Emulates a helicopter crash
	 - 23: makes the heli circle erratically around ped
	
	
	Heli will fly at maxSpeed (up to actual maximum speed defined by the model's handling config)
	You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.
	
	If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT. 
	
	Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from
	
	Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.
	
	Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:
	   1: Forces heading to face E
	   2: Unknown
	   4: Tight circles around coordinate destination
	   8: Unknown
	  16: Circles around coordinate destination facing towards destination
	  32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)
	  64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.
	 128: Unknown
	 256: Unknown
	 512: Unknown
	1024: Unknown 
	2048: Reverses direction of circling (mission type 9) to clockwise
	4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route
	8192: Unknown
	
	Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.
	
	Notes updated by PNWParksFan, May 2021
	 **/
	function TASK_HELI_MISSION(pilot: EntityHandle, aircraft: EntityHandle, targetVehicle: EntityHandle, targetPed: EntityHandle, destinationX: float, destinationY: float, destinationZ: float, missionFlag: int, maxSpeed: float, radius: float, targetHeading: float, maxHeight: int, minHeight: int, slowDownDistance: float, behaviorFlags: int): void
	/**  **/
	function TASK_HELI_ESCORT_HELI(pilot: EntityHandle, heli1: EntityHandle, heli2: EntityHandle, offsetX: float, offsetY: float, offsetZ: float): void
	/** EXAMPLE USAGE:
	
	Fly around target (Precautiously, keeps high altitude):
	Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);
	
	Fly around target (Dangerously, keeps VERY low altitude):
	Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);
	
	Fly directly into target:
	Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);
	
	EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)
	
	'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
	Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.
	
	VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)
	
	0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
	1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
	300+ =  Vehicle behaves entirely like a normal gameplay plane.
	
	'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)
	
	Scenario: Destination is an Entity on ground level, wide open field
	-5000 = Pilot kamikazes directly into Entity
	-1000 = Pilot flies extremely low -around- Entity, very prone to crashing
	-200 = Pilot flies lower than average around Entity.
	0 = Pilot flies around Entity, normal altitude
	200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)
	
	-- Valid mission types found in the exe: --
	
	0 = None
	1 = Unk
	2 = CTaskVehicleRam
	3 = CTaskVehicleBlock
	4 = CTaskVehicleGoToPlane
	5 = CTaskVehicleStop
	6 = CTaskVehicleAttack
	7 = CTaskVehicleFollow
	8 = CTaskVehicleFleeAirborne
	9= CTaskVehicleCircle
	10 = CTaskVehicleEscort
	15 = CTaskVehicleFollowRecording
	16 = CTaskVehiclePoliceBehaviour
	17 = CTaskVehicleCrash **/
	function TASK_PLANE_MISSION(pilot: EntityHandle, aircraft: EntityHandle, targetVehicle: EntityHandle, targetPed: EntityHandle, destinationX: float, destinationY: float, destinationZ: float, missionFlag: int, angularDrag: float, targetReached: float, targetHeading: float, maxZ: float, minZ: float, precise: boolean): void
	/**  **/
	function TASK_PLANE_TAXI(pilot: EntityHandle, aircraft: EntityHandle, x: float, y: float, z: float, cruiseSpeed: float, targetReached: float): void
	/** You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.
	
	Working example
	float vehicleMaxSpeed = VEHICLE::_GET_VEHICLE_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
	TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
	PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);
	
	P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation **/
	function TASK_BOAT_MISSION(pedDriver: EntityHandle, vehicle: EntityHandle, targetVehicle: EntityHandle, targetPed: EntityHandle, x: float, y: float, z: float, mission: int, maxSpeed: float, drivingStyle: int, targetReached: float, boatFlags: any): void
	/** Example:
	
	TASK::TASK_DRIVE_BY(l_467[1/ *22* /], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
	
	
	
	
	Needs working example. Doesn't seem to do anything.
	
	I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
	I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
	I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not. **/
	function TASK_DRIVE_BY(driverPed: EntityHandle, targetPed: EntityHandle, targetVehicle: EntityHandle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, pushUnderneathDrivingTaskIfDriving: boolean, firingPattern: Hash): void
	/** For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives. **/
	function SET_DRIVEBY_TASK_TARGET(shootingPed: EntityHandle, targetPed: EntityHandle, targetVehicle: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped: EntityHandle): void
	/**  **/
	function IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped: EntityHandle): boolean
	/** Forces the ped to use the mounted weapon.
	Returns false if task is not possible. **/
	function CONTROL_MOUNTED_WEAPON(ped: EntityHandle): boolean
	/** Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa. **/
	function SET_MOUNTED_WEAPON_TARGET(shootingPed: EntityHandle, targetPed: EntityHandle, targetVehicle: EntityHandle, x: float, y: float, z: float, taskMode: int, ignoreTargetVehDeadCheck: boolean): void
	/**  **/
	function IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(ped: EntityHandle): boolean
	/** Actually has 3 params, not 2.
	
	p0: Ped
	p1: int (or bool?)
	p2: int **/
	function TASK_USE_MOBILE_PHONE(ped: EntityHandle, usePhone: boolean, desiredPhoneMode: int): void
	/**  **/
	function TASK_USE_MOBILE_PHONE_TIMED(ped: EntityHandle, duration: int): void
	/** p2 tend to be 16, 17 or 1
	p3 to p7 tend to be 0.0 **/
	function TASK_CHAT_TO_PED(ped: EntityHandle, target: EntityHandle, flags: int, goToLocationX: float, goToLocationY: float, goToLocationZ: float, headingDegs: float, idleTime: float): void
	/** Seat Numbers
	-------------------------------
	Driver = -1
	Any = -2
	Left-Rear = 1
	Right-Front = 0
	Right-Rear = 2
	Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear) **/
	function TASK_WARP_PED_INTO_VEHICLE(ped: EntityHandle, vehicle: EntityHandle, seat: int): void
	/** //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
	Entity aimedentity;
	Player player = PLAYER::PLAYER_ID();
	PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);
	
	//bg is an array of peds
	TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
	
	in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
	
	Firing Pattern Hash Information: https://pastebin.com/Px036isB **/
	function TASK_SHOOT_AT_ENTITY(entity: EntityHandle, target: EntityHandle, duration: int, firingPattern: Hash): void
	/** Climbs or vaults the nearest thing.
	usePlayerLaunchForce is unused. **/
	function TASK_CLIMB(ped: EntityHandle, usePlayerLaunchForce: boolean): void
	/**  **/
	function TASK_CLIMB_LADDER(ped: EntityHandle, fast: boolean): void
	/** Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.
	p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE **/
	function TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(ped: EntityHandle, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, minZ: float, ropeHandle: int, clipSet: string, p10: any): void
	/**  **/
	function GET_TASK_RAPPEL_DOWN_WALL_STATE(ped: EntityHandle): int
	/** Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing. **/
	function CLEAR_PED_TASKS_IMMEDIATELY(ped: EntityHandle): void
	/**  **/
	function TASK_PERFORM_SEQUENCE_FROM_PROGRESS(ped: EntityHandle, taskIndex: int, progress1: int, progress2: int): void
	/** This native does absolutely nothing, just a nullsub
	
	R* Comment:
	SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore **/
	function SET_NEXT_DESIRED_MOVE_STATE(nextMoveState: float): void
	/**  **/
	function SET_PED_DESIRED_MOVE_BLEND_RATIO(ped: EntityHandle, newMoveBlendRatio: float): void
	/**  **/
	function GET_PED_DESIRED_MOVE_BLEND_RATIO(ped: EntityHandle): float
	/** eg
	
	 TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);
	
	ped = Ped you want to perform this task.
	target = the Entity they should aim at.
	distanceToStopAt = distance from the target, where the ped should stop to aim.
	StartAimingDist = distance where the ped should start to aim. **/
	function TASK_GOTO_ENTITY_AIMING(ped: EntityHandle, target: EntityHandle, distanceToStopAt: float, StartAimingDist: float): void
	/** p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used **/
	function TASK_SET_DECISION_MAKER(ped: EntityHandle, decisionMakerId: Hash): void
	/**  **/
	function TASK_SET_SPHERE_DEFENSIVE_AREA(ped: EntityHandle, x: float, y: float, z: float, radius: float): void
	/**  **/
	function TASK_CLEAR_DEFENSIVE_AREA(ped: EntityHandle): void
	/**  **/
	function TASK_PED_SLIDE_TO_COORD(ped: EntityHandle, x: float, y: float, z: float, heading: float, speed: float): void
	/**  **/
	function TASK_PED_SLIDE_TO_COORD_HDG_RATE(ped: EntityHandle, x: float, y: float, z: float, heading: float, speed: float, headingChangeRate: float): void
	/**  **/
	function ADD_COVER_POINT(x: float, y: float, z: float, direction: float, usage: int, height: int, arc: int, isPriority: boolean): ScriptHandle
	/**  **/
	function REMOVE_COVER_POINT(coverpoint: ScriptHandle): void
	/** Checks if there is a cover point at position **/
	function DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(x: float, y: float, z: float): boolean
	/**  **/
	function GET_SCRIPTED_COVER_POINT_COORDS(coverpoint: ScriptHandle): Vector3
	/**  **/
	function ADD_SCRIPTED_COVER_AREA(x: float, y: float, z: float, radius: float): void
	/** Makes the specified ped attack the target ped.
	p2 should be 0
	p3 should be 16 **/
	function TASK_COMBAT_PED(ped: EntityHandle, targetPed: EntityHandle, combatFlags: int, threatResponseFlags: int): void
	/**  **/
	function TASK_COMBAT_PED_TIMED(ped: EntityHandle, target: EntityHandle, time: int, flags: int): void
	/**  **/
	function TASK_SEEK_COVER_FROM_POS(ped: EntityHandle, x: float, y: float, z: float, duration: int, allowPeekingAndFiring: boolean): void
	/**  **/
	function TASK_SEEK_COVER_FROM_PED(ped: EntityHandle, target: EntityHandle, duration: int, allowPeekingAndFiring: boolean): void
	/** p5 is always -1 **/
	function TASK_SEEK_COVER_TO_COVER_POINT(ped: EntityHandle, coverpoint: ScriptHandle, x: float, y: float, z: float, time: int, allowPeekingAndFiring: boolean): void
	/** p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.
	
	from michael2:
	TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);
	
	
	appears to be shorter variation
	from michael3:
	TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0); **/
	function TASK_SEEK_COVER_TO_COORDS(ped: EntityHandle, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, timeout: int, shortRoute: boolean): void
	/**  **/
	function TASK_PUT_PED_DIRECTLY_INTO_COVER(ped: EntityHandle, x: float, y: float, z: float, time: int, allowPeekingAndFiring: boolean, blendInDuration: float, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: int, doEntry: boolean): void
	/**  **/
	function TASK_WARP_PED_DIRECTLY_INTO_COVER(ped: EntityHandle, time: int, allowPeekingAndFiring: boolean, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: int): void
	/** p1 is 1, 2, or 3 in scripts **/
	function TASK_EXIT_COVER(ped: EntityHandle, exitType: int, x: float, y: float, z: float): void
	/** from armenian3.c4
	
	TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
	 **/
	function TASK_PUT_PED_DIRECTLY_INTO_MELEE(ped: EntityHandle, meleeTarget: EntityHandle, blendInDuration: float, timeInMelee: float, strafePhaseSync: float, aiCombatFlags: int): void
	/** used in sequence task
	
	both parameters seems to be always 0 **/
	function TASK_TOGGLE_DUCK(ped: EntityHandle, toggleType: int): void
	/** From re_prisonvanbreak:
	
	TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1); **/
	function TASK_GUARD_CURRENT_POSITION(ped: EntityHandle, maxPatrolProximity: float, defensiveAreaRadius: float, setDefensiveArea: boolean): void
	/**  **/
	function TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(ped: EntityHandle, x: float, y: float, z: float, heading: float, maxPatrolProximity: float, timer: int): void
	/**  **/
	function TASK_GUARD_SPHERE_DEFENSIVE_AREA(ped: EntityHandle, defendPositionX: float, defendPositionY: float, defendPositionZ: float, heading: float, maxPatrolProximity: float, time: int, x: float, y: float, z: float, defensiveAreaRadius: float): void
	/** scenarioName example: "WORLD_HUMAN_GUARD_STAND" **/
	function TASK_STAND_GUARD(ped: EntityHandle, x: float, y: float, z: float, heading: float, scenarioName: string): void
	/**  **/
	function SET_DRIVE_TASK_CRUISE_SPEED(driver: EntityHandle, cruiseSpeed: float): void
	/**  **/
	function SET_DRIVE_TASK_MAX_CRUISE_SPEED(ped: EntityHandle, speed: float): void
	/** This native is used to set the driving style for specific ped.
	
	Driving styles id seems to be:
	786468
	262144
	786469
	
	http://gtaforums.com/topic/822314-guide-driving-styles/ **/
	function SET_DRIVE_TASK_DRIVING_STYLE(ped: EntityHandle, drivingStyle: int): void
	/**  **/
	function ADD_COVER_BLOCKING_AREA(startX: float, startY: float, startZ: float, endX: float, endY: float, endZ: float, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void
	/**  **/
	function REMOVE_ALL_COVER_BLOCKING_AREAS(): void
	/**  **/
	function REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(x: float, y: float, z: float): void
	/**  **/
	function REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(startX: float, startY: float, startZ: float, endX: float, endY: float, endZ: float, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void
	/** Plays a scenario on a Ped at their current location.
	
	unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
	playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
	
	----
	
	From "am_hold_up.ysc.c4" at line 339:
	
	TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);
	
	I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
	WORLD_HUMAN_SMOKING
	WORLD_HUMAN_HANG_OUT_STREET
	WORLD_HUMAN_STAND_MOBILE
	
	This makes sense, as these are what I commonly see when going by a liquor store.
	-------------------------
	List of scenarioNames: https://pastebin.com/6mrYTdQv
	(^ Thank you so fucking much for this)
	
	Also these:
	WORLD_FISH_FLEE
	DRIVE
	WORLD_HUMAN_HIKER
	WORLD_VEHICLE_ATTRACTOR
	WORLD_VEHICLE_BICYCLE_MOUNTAIN
	WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
	WORLD_VEHICLE_BIKER
	WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
	WORLD_VEHICLE_CONSTRUCTION_SOLO
	WORLD_VEHICLE_DRIVE_PASSENGERS
	WORLD_VEHICLE_DRIVE_SOLO
	WORLD_VEHICLE_EMPTY
	WORLD_VEHICLE_PARK_PARALLEL
	WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
	WORLD_VEHICLE_POLICE_BIKE
	WORLD_VEHICLE_POLICE_CAR
	WORLD_VEHICLE_POLICE_NEXT_TO_CAR
	WORLD_VEHICLE_SALTON_DIRT_BIKE
	WORLD_VEHICLE_TRUCK_LOGS
	
	Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json **/
	function TASK_START_SCENARIO_IN_PLACE(ped: EntityHandle, scenarioName: string, unkDelay: int, playEnterAnim: boolean): void
	/** Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
	
	Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.
	---------------
	The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario. 
	
	The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
	
	I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
	
	I have no idea what the last 3 parameters are, but I'll try to find out.
	
	-going on the last 3 parameters, they appear to always be "0, 0, 1"
	
	p6 -1 also used in scrips
	
	p7 used for sitting scenarios
	
	p8 teleports ped to position **/
	function TASK_START_SCENARIO_AT_POSITION(ped: EntityHandle, scenarioName: string, x: float, y: float, z: float, heading: float, duration: int, sittingScenario: boolean, teleport: boolean): void
	/** Updated variables
	
	An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead. **/
	function TASK_USE_NEAREST_SCENARIO_TO_COORD(ped: EntityHandle, x: float, y: float, z: float, distance: float, duration: int): void
	/**  **/
	function TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(ped: EntityHandle, x: float, y: float, z: float, radius: float, timeToLeave: int): void
	/** p5 is always 0 in scripts **/
	function TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(ped: EntityHandle, x: float, y: float, z: float, maxRange: float, timeToLeave: int): void
	/** p5 is always -1 or 0 in scripts **/
	function TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(ped: EntityHandle, x: float, y: float, z: float, radius: float, timeToLeave: int): void
	/**  **/
	function DOES_SCENARIO_EXIST_IN_AREA(x: float, y: float, z: float, radius: float, mustBeFree: boolean): boolean
	/**  **/
	function DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(x: float, y: float, z: float, scenarioName: string, radius: float, mustBeFree: boolean): boolean
	/**  **/
	function IS_SCENARIO_OCCUPIED(x: float, y: float, z: float, maxRange: float, onlyUsersActuallyAtScenario: boolean): boolean
	/**  **/
	function PED_HAS_USE_SCENARIO_TASK(ped: EntityHandle): boolean
	/** Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function PLAY_ANIM_ON_RUNNING_SCENARIO(ped: EntityHandle, animDict: string, animName: string): void
	/** Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
	Occurrences in the b617d scripts:
	
	"ARMY_GUARD",
	"ARMY_HELI",
	"Cinema_Downtown",
	"Cinema_Morningwood",
	"Cinema_Textile",
	"City_Banks",
	"Countryside_Banks",
	"DEALERSHIP",
	"GRAPESEED_PLANES",
	"KORTZ_SECURITY",
	"LOST_BIKERS",
	"LSA_Planes",
	"LSA_Planes",
	"MP_POLICE",
	"Observatory_Bikers", 
	"POLICE_POUND1",
	"POLICE_POUND2",
	"POLICE_POUND3",
	"POLICE_POUND4",
	"POLICE_POUND5"
	"QUARRY",
	"SANDY_PLANES",
	"SCRAP_SECURITY",
	"SEW_MACHINE",
	"SOLOMON_GATE",
	"Triathlon_1_Start", 
	"Triathlon_2_Start", 
	"Triathlon_3_Start"
	
	Sometimes used with IS_SCENARIO_GROUP_ENABLED:
	if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
	else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
	 **/
	function DOES_SCENARIO_GROUP_EXIST(scenarioGroup: string): boolean
	/** Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
	Occurrences in the b617d scripts: 
	
	 "ARMY_GUARD",
	 "ARMY_HELI",
	 "BLIMP",
	 "Cinema_Downtown",
	 "Cinema_Morningwood",
	 "Cinema_Textile",
	 "City_Banks",
	 "Countryside_Banks",
	 "DEALERSHIP",
	 "KORTZ_SECURITY",
	 "LSA_Planes",
	 "MP_POLICE",
	 "Observatory_Bikers",
	 "POLICE_POUND1",
	 "POLICE_POUND2",
	 "POLICE_POUND3",
	 "POLICE_POUND4",
	 "POLICE_POUND5",
	 "Rampage1",
	 "SANDY_PLANES",
	 "SCRAP_SECURITY",
	 "SEW_MACHINE",
	 "SOLOMON_GATE"
	
	Sometimes used with DOES_SCENARIO_GROUP_EXIST:
	if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
	else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) { **/
	function IS_SCENARIO_GROUP_ENABLED(scenarioGroup: string): boolean
	/** Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
	Occurrences in the b617d scripts: https://pastebin.com/Tvg2PRHU **/
	function SET_SCENARIO_GROUP_ENABLED(scenarioGroup: string, enabled: boolean): void
	/**  **/
	function RESET_SCENARIO_GROUPS_ENABLED(): void
	/** Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
	Groups found in the scripts used with this native:
	
	"AMMUNATION",
	"QUARRY",
	"Triathlon_1",
	"Triathlon_2",
	"Triathlon_3" **/
	function SET_EXCLUSIVE_SCENARIO_GROUP(scenarioGroup: string): void
	/**  **/
	function RESET_EXCLUSIVE_SCENARIO_GROUP(): void
	/** Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
	Occurrences in the b617d scripts:
	"PROP_HUMAN_SEAT_CHAIR",
	"WORLD_HUMAN_DRINKING",
	"WORLD_HUMAN_HANG_OUT_STREET",
	"WORLD_HUMAN_SMOKING",
	"WORLD_MOUNTAIN_LION_WANDER",
	"WORLD_HUMAN_DRINKING"
	
	Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.
	
	scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
	 **/
	function IS_SCENARIO_TYPE_ENABLED(scenarioType: string): boolean
	/** Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
	seems to enable/disable specific scenario-types from happening in the game world.
	
	Here are some scenario types from the scripts:
	"WORLD_MOUNTAIN_LION_REST"                                             
	"WORLD_MOUNTAIN_LION_WANDER"                                            
	"DRIVE"                                                                  
	"WORLD_VEHICLE_POLICE_BIKE"                                             
	"WORLD_VEHICLE_POLICE_CAR"                                             
	"WORLD_VEHICLE_POLICE_NEXT_TO_CAR"                                        
	"WORLD_VEHICLE_DRIVE_SOLO"                                                 
	"WORLD_VEHICLE_BIKER"                                                      
	"WORLD_VEHICLE_DRIVE_PASSENGERS"                                           
	"WORLD_VEHICLE_SALTON_DIRT_BIKE"                                           
	"WORLD_VEHICLE_BICYCLE_MOUNTAIN"                                           
	"PROP_HUMAN_SEAT_CHAIR"                                             
	"WORLD_VEHICLE_ATTRACTOR"                                             
	"WORLD_HUMAN_LEANING"                                                 
	"WORLD_HUMAN_HANG_OUT_STREET"                                        
	"WORLD_HUMAN_DRINKING"                                                
	"WORLD_HUMAN_SMOKING"                                                
	"WORLD_HUMAN_GUARD_STAND"                                            
	"WORLD_HUMAN_CLIPBOARD"                                              
	"WORLD_HUMAN_HIKER"                                                  
	"WORLD_VEHICLE_EMPTY"                                                      
	"WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"                                      
	"WORLD_HUMAN_PAPARAZZI"                                               
	"WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"                            
	"WORLD_VEHICLE_PARK_PARALLEL"                                              
	"WORLD_VEHICLE_CONSTRUCTION_SOLO"                               
	"WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"                                                                    
	"WORLD_VEHICLE_TRUCK_LOGS"
	
	scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION. **/
	function SET_SCENARIO_TYPE_ENABLED(scenarioType: string, toggle: boolean): void
	/**  **/
	function RESET_SCENARIO_TYPES_ENABLED(): void
	/**  **/
	function IS_PED_ACTIVE_IN_SCENARIO(ped: EntityHandle): boolean
	/** Used only once (am_mp_property_int)
	
	ped was PLAYER_PED_ID()
	
	Related to CTaskAmbientClips. **/
	function IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(ped: EntityHandle): boolean
	/** Appears only in fm_mission_controller and used only 3 times.
	
	ped was always PLAYER_PED_ID()
	p1 was always true
	p2 was always true **/
	function SET_PED_CAN_PLAY_AMBIENT_IDLES(ped: EntityHandle, blockIdleClips: boolean, removeIdleClipIfPlaying: boolean): void
	/** Despite its name, it only attacks ONE hated target. The one closest to the specified position. **/
	function TASK_COMBAT_HATED_TARGETS_IN_AREA(ped: EntityHandle, x: float, y: float, z: float, radius: float, combatFlags: int): void
	/** Despite its name, it only attacks ONE hated target. The one closest hated target.
	
	p2 seems to be always 0 **/
	function TASK_COMBAT_HATED_TARGETS_AROUND_PED(ped: EntityHandle, radius: float, combatFlags: int): void
	/**  **/
	function TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(ped: EntityHandle, radius: float, time: int, combatFlags: int): void
	/** In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
	
	The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
	---
	It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
	It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
	----------------------------------------------------
	The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason. **/
	function TASK_THROW_PROJECTILE(ped: EntityHandle, x: float, y: float, z: float, ignoreCollisionEntityIndex: int, createInvincibleProjectile: boolean): void
	/**  **/
	function TASK_SWAP_WEAPON(ped: EntityHandle, drawWeapon: boolean): void
	/** The 2nd param (drawWeapon) is not implemented.
	
	-----------------------------------------------------------------------
	
	The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
	
	            if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {
	                TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
	            } **/
	function TASK_RELOAD_WEAPON(ped: EntityHandle, drawWeapon: boolean): void
	/**  **/
	function IS_PED_GETTING_UP(ped: EntityHandle): boolean
	/** EX: Function.Call(Ped1, Ped2, Time, 0);
	
	The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.
	
	
	
	Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value). **/
	function TASK_WRITHE(ped: EntityHandle, target: EntityHandle, minFireLoops: int, startState: int, forceShootOnGround: boolean, shootFromGroundTimer: int): void
	/** This native checks if a ped is on the ground, in pain from a (gunshot) wound.
	Returns `true` if the ped is in writhe, `false` otherwise. **/
	function IS_PED_IN_WRITHE(ped: EntityHandle): boolean
	/**  patrolRoutes found in the b617d scripts:
	 "miss_Ass0",
	 "miss_Ass1",
	 "miss_Ass2",
	 "miss_Ass3",
	 "miss_Ass4",
	 "miss_Ass5",
	 "miss_Ass6",
	 "MISS_PATROL_6",
	 "MISS_PATROL_7",
	 "MISS_PATROL_8",
	 "MISS_PATROL_9",
	 "miss_Tower_01",
	 "miss_Tower_02",
	 "miss_Tower_03",
	 "miss_Tower_04",
	 "miss_Tower_05",
	 "miss_Tower_06",
	 "miss_Tower_07",
	 "miss_Tower_08",
	 "miss_Tower_10" **/
	function OPEN_PATROL_ROUTE(patrolRoute: string): void
	/**  **/
	function CLOSE_PATROL_ROUTE(): void
	/** Example: 
	TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);
	
	p0 is between 0 and 4 in the scripts.
	
	p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
	
	p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates. 
	Examples: 
	TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7/ *3* /], 0.0, 0.0, 0.0, 0);
	
	TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17/ *44* /]._f3, l_B0[17/ *44* /]._f3, 2000);
	
	p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
	
	p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000). **/
	function ADD_PATROL_ROUTE_NODE(nodeId: int, nodeType: string, posX: float, posY: float, posZ: float, headingX: float, headingY: float, headingZ: float, duration: int): void
	/**  **/
	function ADD_PATROL_ROUTE_LINK(nodeId1: int, nodeId2: int): void
	/**  **/
	function CREATE_PATROL_ROUTE(): void
	/** From the b617d scripts:
	
	TASK::DELETE_PATROL_ROUTE("miss_merc0");
	TASK::DELETE_PATROL_ROUTE("miss_merc1");
	TASK::DELETE_PATROL_ROUTE("miss_merc2");
	TASK::DELETE_PATROL_ROUTE("miss_dock"); **/
	function DELETE_PATROL_ROUTE(patrolRoute: string): void
	/**  **/
	function GET_PATROL_TASK_INFO(ped: EntityHandle, timeLeftAtNode: IntPointer, nodeId: IntPointer): boolean
	/** After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
	
	"miss_Tower_01" (this went from 01 - 10)
	"miss_Ass0" (0, 4, 6, 3)
	"MISS_PATROL_8"
	
	I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
	
	
	As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach. 
	From the scripts
	
	    TASK::OPEN_PATROL_ROUTE("miss_Ass0");
	    TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0/ *3* /], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
	    TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1/ *3* /], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
	    TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2/ *3* /], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
	    TASK::ADD_PATROL_ROUTE_LINK(0, 1);
	    TASK::ADD_PATROL_ROUTE_LINK(1, 2);
	    TASK::ADD_PATROL_ROUTE_LINK(2, 0);
	    TASK::CLOSE_PATROL_ROUTE();
	    TASK::CREATE_PATROL_ROUTE();
	
	 **/
	function TASK_PATROL(ped: EntityHandle, patrolRouteName: string, alertState: int, canChatToPeds: boolean, useHeadLookAt: boolean): void
	/** Makes the ped run to take cover **/
	function TASK_STAY_IN_COVER(ped: EntityHandle): void
	/** x, y, z: offset in world coords from some entity. **/
	function ADD_VEHICLE_SUBTASK_ATTACK_COORD(ped: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function ADD_VEHICLE_SUBTASK_ATTACK_PED(ped: EntityHandle, target: EntityHandle): void
	/**  **/
	function TASK_VEHICLE_SHOOT_AT_PED(ped: EntityHandle, target: EntityHandle, fireTolerance: float): void
	/**  **/
	function TASK_VEHICLE_AIM_AT_PED(ped: EntityHandle, target: EntityHandle): void
	/**  **/
	function TASK_VEHICLE_SHOOT_AT_COORD(ped: EntityHandle, x: float, y: float, z: float, fireTolerance: float): void
	/**  **/
	function TASK_VEHICLE_AIM_AT_COORD(ped: EntityHandle, x: float, y: float, z: float): void
	/** Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
	
	WARNING:
	A behaviorFlag value of 0 will result in a clunky, stupid driver!
	
	Recommended settings:
	speed = 30.0f,
	behaviorFlag = 156, 
	stoppingRange = 5.0f;
	
	If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption. 
	
	If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
	
	EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/   **/
	function TASK_VEHICLE_GOTO_NAVMESH(ped: EntityHandle, vehicle: EntityHandle, x: float, y: float, z: float, speed: float, behaviorFlag: int, stoppingRange: float): void
	/** movement_speed: mostly 2f, but also 1/1.2f, etc.
	p8: always false
	p9: 2f
	p10: 0.5f
	p11: true
	p12: 0 / 512 / 513, etc.
	p13: 0
	firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C **/
	function TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(ped: EntityHandle, x: float, y: float, z: float, aimAtX: float, aimAtY: float, aimAtZ: float, moveBlendRatio: float, shoot: boolean, targetRadius: float, slowDistance: float, useNavMesh: boolean, navFlags: int, instantBlendToAim: boolean, firingPattern: Hash): void
	/**  **/
	function TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(ped: EntityHandle, x: float, y: float, z: float, aimAtID: EntityHandle, moveBlendRatio: float, shoot: boolean, targetRadius: float, slowDistance: float, useNavMesh: boolean, navFlags: int, instantBlendToAim: boolean, firingPattern: Hash, time: int): void
	/** The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
	
	If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
	
	If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
	
	The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
	
	I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
	
	I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
	
	Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
	
	The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
	
	Example:
	
	enum AimFlag
	{
	   AimAtFocusLocation,
	   AimAtGoToLocation
	};
	
	Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
	
	Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
	
	Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
	
	// 1st example
	TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f / *run* /, true / *shoot* /, 3.0f / *stop at* /, 0.0f / *noRoadsDistance* /, true / *always true* /, 0 / *possible flag* /, AimFlag::AimAtGoToLocation, -957453492 / *FullAuto pattern* /);
	
	// 2nd example
	TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f / *walk* /, false / *don't shoot* /, 3.0f / *stop at* /, 0.0f / *noRoadsDistance* /, true / *always true* /, 0 / *possible flag* /, AimFlag::AimAtFocusLocation, -957453492 / *FullAuto pattern* /);
	
	
	1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
	
	2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2. **/
	function TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle: EntityHandle, goToLocationX: float, goToLocationY: float, goToLocationZ: float, focusLocationX: float, focusLocationY: float, focusLocationZ: float, speed: float, shootAtEnemies: boolean, distanceToStopAt: float, noRoadsDistance: float, useNavMesh: boolean, navFlags: int, taskFlags: int, firingPattern: Hash): void
	/**  **/
	function TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(ped: EntityHandle, entity: EntityHandle, aimX: float, aimY: float, aimZ: float, moveBlendRatio: float, shoot: boolean, targetRadius: float, slowDistance: float, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: Hash): void
	/** shootatEntity:
	If true, peds will shoot at Entity till it is dead.
	If false, peds will just walk till they reach the entity and will cease shooting. **/
	function TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(ped: EntityHandle, entityToWalkTo: EntityHandle, entityToAimAt: EntityHandle, speed: float, shootatEntity: boolean, targetRadius: float, slowDistance: float, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: Hash): void
	/** Makes the ped ragdoll like when falling from a great height **/
	function SET_HIGH_FALL_TASK(ped: EntityHandle, minTime: int, maxTime: int, entryType: int): void
	/** Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
	For a full list of the points, see here: goo.gl/wIH0vn
	
	Max number of loaded recordings is 32. **/
	function REQUEST_WAYPOINT_RECORDING(name: string): void
	/** Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json **/
	function GET_IS_WAYPOINT_RECORDING_LOADED(name: string): boolean
	/** Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json **/
	function REMOVE_WAYPOINT_RECORDING(name: string): void
	/** Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
	For a full list of the points, see here: goo.gl/wIH0vn **/
	function WAYPOINT_RECORDING_GET_NUM_POINTS(name: string, points: IntPointer): boolean
	/** Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
	For a full list of the points, see here: goo.gl/wIH0vn **/
	function WAYPOINT_RECORDING_GET_COORD(name: string, point: int, coord: Vector3Pointer): boolean
	/** Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json **/
	function WAYPOINT_RECORDING_GET_SPEED_AT_POINT(name: string, point: int): float
	/** Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
	For a full list of the points, see here: goo.gl/wIH0vn **/
	function WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(name: string, x: float, y: float, z: float, point: IntPointer): boolean
	/**  **/
	function TASK_FOLLOW_WAYPOINT_RECORDING(p0: any, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(p0: any): boolean
	/**  **/
	function GET_PED_WAYPOINT_PROGRESS(ped: EntityHandle): int
	/**  **/
	function GET_PED_WAYPOINT_DISTANCE(p0: any): float
	/**  **/
	function SET_PED_WAYPOINT_ROUTE_OFFSET(p0: any, p1: any, p2: any, p3: any): boolean
	/**  **/
	function GET_WAYPOINT_DISTANCE_ALONG_ROUTE(p0: string, p1: int): float
	/**  **/
	function WAYPOINT_PLAYBACK_GET_IS_PAUSED(p0: any): boolean
	/**  **/
	function WAYPOINT_PLAYBACK_PAUSE(p0: any, p1: boolean, p2: boolean): void
	/**  **/
	function WAYPOINT_PLAYBACK_RESUME(p0: any, p1: boolean, p2: any, p3: any): void
	/**  **/
	function WAYPOINT_PLAYBACK_OVERRIDE_SPEED(p0: any, p1: float, p2: boolean): void
	/**  **/
	function WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(p0: any): void
	/**  **/
	function USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(name: string, p1: boolean, p2: float, p3: float): void
	/**  **/
	function WAYPOINT_PLAYBACK_START_AIMING_AT_PED(p0: any, p1: any, p2: boolean): void
	/**  **/
	function WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(p0: any, p1: float, p2: float, p3: float, p4: boolean): void
	/**  **/
	function WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(p0: any, p1: any, p2: boolean, p3: any): void
	/**  **/
	function WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(p0: any, p1: float, p2: float, p3: float, p4: boolean, p5: any): void
	/**  **/
	function WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(p0: any): void
	/** Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s" **/
	function ASSISTED_MOVEMENT_REQUEST_ROUTE(route: string): void
	/**  **/
	function ASSISTED_MOVEMENT_REMOVE_ROUTE(route: string): void
	/**  **/
	function ASSISTED_MOVEMENT_IS_ROUTE_LOADED(route: string): boolean
	/**  **/
	function ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(route: string, props: int): void
	/**  **/
	function ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(dist: float): void
	/** task_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)
	
	p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
	p3 = 786468
	p4 = 0
	p5 = 16
	p6 = -1 (angle?)
	p7/8/9 = usually v3.zero
	p10 = bool (repeat?)
	p11 = 1073741824
	
	Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json **/
	function TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(ped: EntityHandle, vehicle: EntityHandle, WPRecording: string, p3: int, p4: int, p5: int, p6: int, p7: float, p8: boolean, p9: float): void
	/**  **/
	function IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(vehicle: EntityHandle): boolean
	/**  **/
	function GET_VEHICLE_WAYPOINT_PROGRESS(vehicle: EntityHandle): int
	/**  **/
	function GET_VEHICLE_WAYPOINT_TARGET_POINT(vehicle: EntityHandle): int
	/**  **/
	function VEHICLE_WAYPOINT_PLAYBACK_PAUSE(vehicle: EntityHandle): void
	/**  **/
	function VEHICLE_WAYPOINT_PLAYBACK_RESUME(vehicle: EntityHandle): void
	/**  **/
	function VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(vehicle: EntityHandle): void
	/**  **/
	function VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(vehicle: EntityHandle, speed: float): void
	/** I cant believe I have to define this, this is one of the best natives.
	
	It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
	
	Since it is a task, every time the native is called the ped will stop for a moment.  **/
	function TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped: EntityHandle, toggle: boolean): void
	/** p2 always false
	
	[30/03/2017] ins1de :
	
	See FORCE_PED_MOTION_STATE **/
	function TASK_FORCE_MOTION_STATE(ped: EntityHandle, state: Hash, forceRestart: boolean): void
	/** Example:
	TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0); **/
	function TASK_MOVE_NETWORK_BY_NAME(ped: EntityHandle, task: string, multiplier: float, allowOverrideCloneUpdate: boolean, animDict: string, flags: int): void
	/** Example:
	TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0); **/
	function TASK_MOVE_NETWORK_ADVANCED_BY_NAME(ped: EntityHandle, network: string, x: float, y: float, z: float, rotX: float, rotY: float, rotZ: float, rotOrder: int, blendDuration: float, allowOverrideCloneUpdate: boolean, animDict: string, flags: int): void
	/** Used only once in the scripts (am_mp_nightclub) **/
	function TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(ped: EntityHandle, network: string, initialParameters: IntPointer, blendDuration: float, allowOverrideCloneUpdate: boolean, animDict: string, flags: int): void
	/**  **/
	function TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(ped: EntityHandle, network: string, initialParameters: IntPointer, x: float, y: float, z: float, rotX: float, rotY: float, rotZ: float, rotOrder: int, blendDuration: float, allowOverrideCloneUpdate: boolean, dictionary: string, flags: int): void
	/**  **/
	function IS_TASK_MOVE_NETWORK_ACTIVE(ped: EntityHandle): boolean
	/**  **/
	function IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(ped: EntityHandle): boolean
	/**  **/
	function REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(ped: EntityHandle, name: string): boolean
	/** Used only once in the scripts (fm_mission_controller) like so:
	
	TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(iLocal_3160, "Cutting"); **/
	function SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(ped: EntityHandle, state: string): boolean
	/**  **/
	function GET_TASK_MOVE_NETWORK_STATE(ped: EntityHandle): string
	/**  **/
	function SET_TASK_MOVE_NETWORK_ANIM_SET(ped: EntityHandle, clipSet: Hash, variableClipSet: Hash): void
	/** signalName - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
	p2 - From what i can see it goes up to 1f (maybe).
	
	Example: TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(PLAYER::PLAYER_PED_ID(), "Phase", 0.5); **/
	function SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(ped: EntityHandle, signalName: string, value: float): void
	/**  **/
	function SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(ped: EntityHandle, signalName: string, value: float): void
	/**  **/
	function SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(ped: EntityHandle, signalName: string, value: float): void
	/**  **/
	function SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(ped: EntityHandle, signalName: string, value: boolean): void
	/**  **/
	function GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(ped: EntityHandle, signalName: string): float
	/**  **/
	function GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(ped: EntityHandle, signalName: string): boolean
	/**  **/
	function GET_TASK_MOVE_NETWORK_EVENT(ped: EntityHandle, eventName: string): boolean
	/** Doesn't actually return anything. **/
	function SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(ped: EntityHandle, enable: boolean): boolean
	/**  **/
	function IS_MOVE_BLEND_RATIO_STILL(ped: EntityHandle): boolean
	/**  **/
	function IS_MOVE_BLEND_RATIO_WALKING(ped: EntityHandle): boolean
	/**  **/
	function IS_MOVE_BLEND_RATIO_RUNNING(ped: EntityHandle): boolean
	/**  **/
	function IS_MOVE_BLEND_RATIO_SPRINTING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_STILL(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_WALKING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_RUNNING(ped: EntityHandle): boolean
	/**  **/
	function IS_PED_SPRINTING(ped: EntityHandle): boolean
	/** What's strafing? **/
	function IS_PED_STRAFING(ped: EntityHandle): boolean
	/**  TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);
	
	Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json **/
	function TASK_SYNCHRONIZED_SCENE(ped: EntityHandle, scene: int, animDictionary: string, animationName: string, blendIn: float, blendOut: float, flags: int, ragdollBlockingFlags: int, moverBlendDelta: float, ikFlags: int): void
	/**  **/
	function TASK_AGITATED_ACTION_CONFRONT_RESPONSE(ped: EntityHandle, ped2: EntityHandle): void
	/** This function is called on peds in vehicles.
	
	anim: animation name
	p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
	p5: no idea what it does but is usually -1 **/
	function TASK_SWEEP_AIM_ENTITY(ped: EntityHandle, animDict: string, lowAnimName: string, medAnimName: string, hiAnimName: string, runtime: int, targetEntity: EntityHandle, turnRate: float, blendInDuration: float): void
	/**  **/
	function UPDATE_TASK_SWEEP_AIM_ENTITY(ped: EntityHandle, entity: EntityHandle): void
	/**  **/
	function TASK_SWEEP_AIM_POSITION(ped: EntityHandle, animDict: string, lowAnimName: string, medAnimName: string, hiAnimName: string, runtime: int, x: float, y: float, z: float, turnRate: float, blendInDuration: float): void
	/**  **/
	function UPDATE_TASK_SWEEP_AIM_POSITION(ped: EntityHandle, x: float, y: float, z: float): void
	/** Example from "me_amanda1.ysc.c4":
	TASK::TASK_ARREST_PED(l_19F / * This is a Ped * / , PLAYER::PLAYER_PED_ID());
	
	Example from "armenian1.ysc.c4":
	if (!PED::IS_PED_INJURED(l_B18[0/ *1* /])) {
	    TASK::TASK_ARREST_PED(l_B18[0/ *1* /], PLAYER::PLAYER_PED_ID());
	}
	
	I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
	
	
	Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped. **/
	function TASK_ARREST_PED(ped: EntityHandle, target: EntityHandle): void
	/**  **/
	function IS_PED_RUNNING_ARREST_TASK(ped: EntityHandle): boolean
	/** This function is hard-coded to always return 0. **/
	function IS_PED_BEING_ARRESTED(ped: EntityHandle): boolean
	/**  **/
	function UNCUFF_PED(ped: EntityHandle): void
	/**  **/
	function IS_PED_CUFFED(ped: EntityHandle): boolean
}

/** @noSelf **/
declare namespace VEHICLE {
	/** p7 when set to true allows you to spawn vehicles under -100 z.
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function CREATE_VEHICLE(modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: boolean, bScriptHostVeh: boolean, p7: boolean): EntityHandle
	/** Deletes a vehicle.
	The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
	
	eg how to use:
	SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
	DELETE_VEHICLE(&vehicle);
	
	Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL. **/
	function DELETE_VEHICLE(vehicle: Address): void
	/**  **/
	function SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(vehicle: EntityHandle, toggle: boolean, p2: boolean): void
	/**  **/
	function SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(vehicle: EntityHandle, canBeLockedOn: boolean, unk: boolean): void
	/** Makes the vehicle accept no passengers. **/
	function SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(veh: EntityHandle, toggle: boolean): void
	/** Returns a value depending on the lock-on state of vehicle weapons.
	0: not locked on
	1: locking on
	2: locked on **/
	function GET_VEHICLE_HOMING_LOCKON_STATE(vehicle: EntityHandle): int
	/**  **/
	function GET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0: any): int
	/**  **/
	function SET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0: any, p1: any): void
	/**  **/
	function IS_VEHICLE_MODEL(vehicle: EntityHandle, model: Hash): boolean
	/**  **/
	function DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(vehicleGenerator: int): boolean
	/** Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
	
	Parameters:
	x/y/z - Generator position
	heading - Generator heading
	p4 - Unknown (always 5.0)
	p5 - Unknown (always 3.0)
	modelHash - Vehicle model hash
	p7/8/9/10 - Unknown (always -1)
	p11 - Unknown (usually TRUE, only one instance of FALSE)
	p12/13 - Unknown (always FALSE)
	p14 - Unknown (usally FALSE, only two instances of TRUE)
	p15 - Unknown (always TRUE)
	p16 - Unknown (always -1)
	
	Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1); **/
	function CREATE_SCRIPT_VEHICLE_GENERATOR(x: float, y: float, z: float, heading: float, p4: float, p5: float, modelHash: Hash, p7: int, p8: int, p9: int, p10: int, p11: boolean, p12: boolean, p13: boolean, p14: boolean, p15: boolean, p16: int): int
	/**  **/
	function DELETE_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator: int): void
	/** Only called once in the decompiled scripts. Presumably activates the specified generator. **/
	function SET_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator: int, enabled: boolean): void
	/** When p6 is true, vehicle generators are active.
	p7 seems to always be true in story mode scripts, but it's sometimes false in online scripts. **/
	function SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, toggle: boolean, p7: boolean): void
	/**  **/
	function SET_ALL_VEHICLE_GENERATORS_ACTIVE(): void
	/**  **/
	function SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(active: boolean): void
	/** Related to car generators & CPlayerSwitchMgrLong **/
	function SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(x: float, y: float, z: float, radius: float): void
	/**  **/
	function CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST(): void
	/** Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
	
	sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts. **/
	function SET_VEHICLE_ON_GROUND_PROPERLY(vehicle: EntityHandle, p1: float): boolean
	/**  **/
	function SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(p0: EntityHandle, p1: boolean, p2: boolean, p3: boolean): boolean
	/**  **/
	function IS_VEHICLE_STUCK_ON_ROOF(vehicle: EntityHandle): boolean
	/**  **/
	function ADD_VEHICLE_UPSIDEDOWN_CHECK(vehicle: EntityHandle): void
	/**  **/
	function REMOVE_VEHICLE_UPSIDEDOWN_CHECK(vehicle: EntityHandle): void
	/** Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
	
	For some vehicles it returns true if the current speed is <= 0.00039999999. **/
	function IS_VEHICLE_STOPPED(vehicle: EntityHandle): boolean
	/** Gets the number of passengers.
	
	This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.
	
	To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true. **/
	function GET_VEHICLE_NUMBER_OF_PASSENGERS(vehicle: EntityHandle, includeDriver: boolean, includeDeadOccupants: boolean): int
	/**  **/
	function GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle: EntityHandle): int
	/** Returns max number of passengers (including the driver) for the specified vehicle model.
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_VEHICLE_MODEL_NUMBER_OF_SEATS(modelHash: Hash): int
	/**  **/
	function IS_SEAT_WARP_ONLY(vehicle: EntityHandle, seatIndex: int): boolean
	/**  **/
	function IS_TURRET_SEAT(vehicle: EntityHandle, seatIndex: int): boolean
	/** Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set. **/
	function DOES_VEHICLE_ALLOW_RAPPEL(vehicle: EntityHandle): boolean
	/** Use this native inside a looped function.
	Values:
	- `0.0` = no vehicles on streets
	- `1.0` = normal vehicles on streets **/
	function SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: float): void
	/**  **/
	function SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: float): void
	/**  **/
	function SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: float): void
	/**  **/
	function SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(toggle: boolean): void
	/**  **/
	function SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(value: float): void
	/**  **/
	function SET_FAR_DRAW_VEHICLES(toggle: boolean): void
	/**  **/
	function SET_NUMBER_OF_PARKED_VEHICLES(value: int): void
	/** enum eVehicleLockState
	{
		VEHICLELOCK_NONE,
		VEHICLELOCK_UNLOCKED,
		VEHICLELOCK_LOCKED,
		VEHICLELOCK_LOCKOUT_PLAYER_ONLY,
		VEHICLELOCK_LOCKED_PLAYER_INSIDE,
		VEHICLELOCK_LOCKED_INITIALLY,
		VEHICLELOCK_FORCE_SHUT_DOORS,
		VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED,
		VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED,
		VEHICLELOCK_LOCKED_NO_PASSENGERS,
		VEHICLELOCK_CANNOT_ENTER	
	}; **/
	function SET_VEHICLE_DOORS_LOCKED(vehicle: EntityHandle, doorLockStatus: int): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(vehicle: EntityHandle, doorId: int, doorLockStatus: int): void
	/** If set to true, prevents vehicle sirens from having sound, leaving only the lights. **/
	function SET_VEHICLE_HAS_MUTED_SIRENS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle: EntityHandle, player: Player, toggle: boolean): void
	/**  **/
	function GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle: EntityHandle, player: Player): boolean
	/** After some analysis, I've decided that these are what the parameters are.
	
	We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
	l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
	...
	VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1); **/
	function SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(vehicle: EntityHandle, team: int, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(vehicle: EntityHandle): void
	/** Explodes a selected vehicle.
	
	Vehicle vehicle = Vehicle you want to explode.
	BOOL isAudible = If explosion makes a sound.
	BOOL isInvisible = If the explosion is invisible or not.
	
	First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn. **/
	function EXPLODE_VEHICLE(vehicle: EntityHandle, isAudible: boolean, isInvisible: boolean): void
	/** Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom. **/
	function SET_VEHICLE_OUT_OF_CONTROL(vehicle: EntityHandle, killDriver: boolean, explodeOnImpact: boolean): void
	/**  **/
	function SET_VEHICLE_TIMED_EXPLOSION(vehicle: EntityHandle, ped: EntityHandle, toggle: boolean): void
	/**  **/
	function ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(vehicle: EntityHandle): void
	/**  **/
	function CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE(): void
	/**  **/
	function HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE(): boolean
	/**  **/
	function DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE(): void
	/** This is not tested - it's just an assumption.
	- Nac
	
	Doesn't seem to work.  I'll try with an int instead. --JT
	
	Read the scripts, im dumpass. 
	
	                            if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
	                                VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
	                            } **/
	function SET_TAXI_LIGHTS(vehicle: EntityHandle, state: boolean): void
	/**  **/
	function IS_TAXI_LIGHT_ON(vehicle: EntityHandle): boolean
	/** garageName example "Michael - Beverly Hills"
	
	Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json **/
	function IS_VEHICLE_IN_GARAGE_AREA(garageName: string, vehicle: EntityHandle): boolean
	/** colorPrimary & colorSecondary are the paint index for the vehicle.
	For a list of valid paint indexes, view: https://pastebin.com/pwHci0xK
	-------------------------------------------------------------------------
	Note: minimum color index is 0, maximum color index is (numColorIndices - 1)
	
	Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json **/
	function SET_VEHICLE_COLOURS(vehicle: EntityHandle, colorPrimary: int, colorSecondary: int): void
	/** It switch to highbeam when p1 is set to true. **/
	function SET_VEHICLE_FULLBEAM(vehicle: EntityHandle, toggle: boolean): void
	/** p1 (toggle) was always 1 (true) except in one case in the b678 scripts. **/
	function SET_VEHICLE_IS_RACING(vehicle: EntityHandle, toggle: boolean): void
	/** p1, p2, p3 are RGB values for color (255,0,0 for Red, ect) **/
	function SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle: EntityHandle, r: int, g: int, b: int): void
	/**  **/
	function GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle: EntityHandle, r: IntPointer, g: IntPointer, b: IntPointer): void
	/**  **/
	function CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle: EntityHandle): void
	/**  **/
	function GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(vehicle: EntityHandle): boolean
	/** p1, p2, p3 are RGB values for color (255,0,0 for Red, ect) **/
	function SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle: EntityHandle, r: int, g: int, b: int): void
	/**  **/
	function GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle: EntityHandle, r: IntPointer, g: IntPointer, b: IntPointer): void
	/**  **/
	function CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle: EntityHandle): void
	/** Check if Vehicle Secondary is avaliable for customize **/
	function GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(vehicle: EntityHandle): boolean
	/** The parameter fade is a value from 0-1, where 0 is fresh paint. **/
	function SET_VEHICLE_ENVEFF_SCALE(vehicle: EntityHandle, fade: float): void
	/** The result is a value from 0-1, where 0 is fresh paint. **/
	function GET_VEHICLE_ENVEFF_SCALE(vehicle: EntityHandle): float
	/** Hardcoded to not work in multiplayer. **/
	function SET_CAN_RESPRAY_VEHICLE(vehicle: EntityHandle, state: boolean): void
	/** Used for GTAO CEO/Associate spawned vehicles. **/
	function SET_GOON_BOSS_VEHICLE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_OPEN_REAR_DOORS_ON_EXPLOSION(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function FORCE_SUBMARINE_SURFACE_MODE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function FORCE_SUBMARINE_NEURTAL_BUOYANCY(p0: any, p1: any): void
	/**  **/
	function SET_SUBMARINE_CRUSH_DEPTHS(vehicle: EntityHandle, p1: boolean, depth1: float, depth2: float, depth3: float): void
	/**  **/
	function GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(submarine: EntityHandle): boolean
	/**  **/
	function GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(submarine: EntityHandle): int
	/**  **/
	function SET_BOAT_IGNORE_LAND_PROBES(p0: any, p1: any): void
	/**  **/
	function SET_BOAT_ANCHOR(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function CAN_ANCHOR_BOAT_HERE(vehicle: EntityHandle): boolean
	/**  **/
	function CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(vehicle: EntityHandle): boolean
	/**  **/
	function SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(vehicle: EntityHandle, toggle: boolean): void
	/** No observed effect. **/
	function SET_FORCE_LOW_LOD_ANCHOR_MODE(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(vehicle: EntityHandle, value: float): void
	/**  **/
	function IS_BOAT_ANCHORED(vehicle: EntityHandle): boolean
	/**  **/
	function SET_BOAT_SINKS_WHEN_WRECKED(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_BOAT_WRECKED(vehicle: EntityHandle): void
	/** Activate siren on vehicle (Only works if the vehicle has a siren). **/
	function SET_VEHICLE_SIREN(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_VEHICLE_SIREN_ON(vehicle: EntityHandle): boolean
	/**  **/
	function IS_VEHICLE_SIREN_AUDIO_ON(vehicle: EntityHandle): boolean
	/** If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives **/
	function SET_VEHICLE_STRONG(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function REMOVE_VEHICLE_STUCK_CHECK(vehicle: EntityHandle): void
	/**  **/
	function GET_VEHICLE_COLOURS(vehicle: EntityHandle, colorPrimary: IntPointer, colorSecondary: IntPointer): void
	/** Check if a vehicle seat is free.
	
	seatIndex  = -1 being the driver seat.
	Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
	isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat. **/
	function IS_VEHICLE_SEAT_FREE(vehicle: EntityHandle, seatIndex: int, isTaskRunning: boolean): boolean
	/** If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.
	
	Seat indexes:
	-1 = Driver
	0 = Front Right Passenger
	1 = Back Left Passenger
	2 = Back Right Passenger
	3 = Further Back Left Passenger (vehicles > 4 seats)
	4 = Further Back Right Passenger (vehicles > 4 seats)
	etc.
	
	If p2 is true it uses a different GetOccupant function. **/
	function GET_PED_IN_VEHICLE_SEAT(vehicle: EntityHandle, seatIndex: int, p2: boolean): EntityHandle
	/**  **/
	function GET_LAST_PED_IN_VEHICLE_SEAT(vehicle: EntityHandle, seatIndex: int): EntityHandle
	/**  **/
	function GET_VEHICLE_LIGHTS_STATE(vehicle: EntityHandle, lightsOn: BoolPointer, highbeamsOn: BoolPointer): boolean
	/** wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
	completely - is to check if tire completely gone from rim.
	
	'0 = wheel_lf / bike, plane or jet front
	'1 = wheel_rf
	'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
	'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
	'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
	'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
	'45 = 6 wheels trailer mid wheel left
	'47 = 6 wheels trailer mid wheel right **/
	function IS_VEHICLE_TYRE_BURST(vehicle: EntityHandle, wheelID: int, completely: boolean): boolean
	/** SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
	
	Speed is in meters per second
	You can convert meters/s to mph here:
	http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm **/
	function SET_VEHICLE_FORWARD_SPEED(vehicle: EntityHandle, speed: float): void
	/** Seems to be identical to SET_VEHICLE_FORWARD_SPEED **/
	function SET_VEHICLE_FORWARD_SPEED_XY(vehicle: EntityHandle, speed: float): void
	/** This native makes the vehicle stop immediately, as happens when we enter a MP garage.
	
	. distance defines how far it will travel until stopping. Garage doors use 3.0.
	
	. If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer. **/
	function BRING_VEHICLE_TO_HALT(vehicle: EntityHandle, distance: float, duration: int, unknown: boolean): void
	/**  **/
	function SET_VEHICLE_STEER_FOR_BUILDINGS(vehicle: EntityHandle, p1: any): void
	/**  **/
	function SET_VEHICLE_CAUSES_SWERVING(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(p0: any, p1: any): void
	/** Stops CTaskBringVehicleToHalt **/
	function STOP_BRINGING_VEHICLE_TO_HALT(vehicle: EntityHandle): void
	/** Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT **/
	function IS_VEHICLE_BEING_BROUGHT_TO_HALT(vehicle: EntityHandle): boolean
	/** 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol **/
	function SET_FORKLIFT_FORK_HEIGHT(vehicle: EntityHandle, height: float): void
	/**  **/
	function IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(vehicle: EntityHandle, entity: EntityHandle): boolean
	/**  **/
	function IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(vehicle: EntityHandle): boolean
	/** Finds the vehicle that is carrying this entity with a handler frame.
	The model of the entity must be prop_contr_03b_ld or the function will return 0. **/
	function FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(entity: EntityHandle): EntityHandle
	/**  **/
	function IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(vehicle: EntityHandle, entity: EntityHandle): boolean
	/**  **/
	function ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(vehicle: EntityHandle, entity: EntityHandle): void
	/**  **/
	function DETACH_CONTAINER_FROM_HANDLER_FRAME(vehicle: EntityHandle): void
	/**  **/
	function SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_BOAT_DISABLE_AVOIDANCE(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function IS_HELI_LANDING_AREA_BLOCKED(vehicle: EntityHandle): boolean
	/** Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f **/
	function SET_SHORT_SLOWDOWN_FOR_LANDING(vehicle: EntityHandle): void
	/**  **/
	function SET_HELI_TURBULENCE_SCALAR(vehicle: EntityHandle, p1: float): void
	/** Initially used in Max Payne 3, that's why we know the name. **/
	function SET_CAR_BOOT_OPEN(vehicle: EntityHandle): void
	/** "To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
	to burst all tyres type it 8 times where p1 = 0 to 7.
	
	p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
	
	'0 = wheel_lf / bike, plane or jet front
	'1 = wheel_rf
	'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
	'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
	'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
	'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
	'45 = 6 wheels trailer mid wheel left
	'47 = 6 wheels trailer mid wheel right **/
	function SET_VEHICLE_TYRE_BURST(vehicle: EntityHandle, index: int, onRim: boolean, p3: float): void
	/** Closes all doors of a vehicle: **/
	function SET_VEHICLE_DOORS_SHUT(vehicle: EntityHandle, closeInstantly: boolean): void
	/** Allows you to toggle bulletproof tires. **/
	function SET_VEHICLE_TYRES_CAN_BURST(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_VEHICLE_TYRES_CAN_BURST(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_WHEELS_CAN_BREAK(vehicle: EntityHandle, enabled: boolean): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function SET_VEHICLE_DOOR_OPEN(vehicle: EntityHandle, doorId: int, loose: boolean, openInstantly: boolean): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT
	
	Usually used alongside other vehicle door natives. **/
	function SET_VEHICLE_DOOR_AUTO_LOCK(vehicle: EntityHandle, doorId: int, toggle: boolean): void
	/**  **/
	function SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(p0: any): void
	/** windowIndex:
	0 = Front Right Window
	1 = Front Left Window
	2 = Back Right Window
	3 = Back Left Window
	4 = Unknown
	5 = Unknown
	6 = Windscreen
	7 = Rear Windscreen **/
	function REMOVE_VEHICLE_WINDOW(vehicle: EntityHandle, windowIndex: int): void
	/** Roll down all the windows of the vehicle passed through the first parameter. **/
	function ROLL_DOWN_WINDOWS(vehicle: EntityHandle): void
	/** windowIndex:
	0 = Front Left Window
	1 = Front Right Window
	2 = Rear Left Window
	3 = Rear Right Window
	4 = Front Windscreen
	5 = Rear Windscreen
	6 = Mid Left
	7 = Mid Right
	8 = Invalid **/
	function ROLL_DOWN_WINDOW(vehicle: EntityHandle, windowIndex: int): void
	/** windowIndex:
	0 = Front Left Window
	1 = Front Right Window
	2 = Rear Left Window
	3 = Rear Right Window
	4 = Front Windscreen
	5 = Rear Windscreen
	6 = Mid Left
	7 = Mid Right
	8 = Invalid **/
	function ROLL_UP_WINDOW(vehicle: EntityHandle, windowIndex: int): void
	/** windowIndex:
	0 = Front Left Window
	1 = Front Right Window
	2 = Rear Left Window
	3 = Rear Right Window
	4 = Front Windscreen
	5 = Rear Windscreen
	6 = Mid Left
	7 = Mid Right
	8 = Invalid **/
	function SMASH_VEHICLE_WINDOW(vehicle: EntityHandle, windowIndex: int): void
	/** windowIndex:
	0 = Front Left Window
	1 = Front Right Window
	2 = Rear Left Window
	3 = Rear Right Window
	4 = Front Windscreen
	5 = Rear Windscreen
	6 = Mid Left
	7 = Mid Right
	8 = Invalid
	
	Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.
	
	Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine. **/
	function FIX_VEHICLE_WINDOW(vehicle: EntityHandle, windowIndex: int): void
	/** Detaches the vehicle's windscreen.
	For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566 **/
	function POP_OUT_VEHICLE_WINDSCREEN(vehicle: EntityHandle): void
	/** Pops off the "roof" bone in the direction of the specified offset from the vehicle. **/
	function POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(vehicle: EntityHandle, x: float, y: float, z: float): void
	/** set's if the vehicle has lights or not.
	not an on off toggle.
	p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
	p1 = 1 ;vehicle doesn't have lights, always off
	p1 = 2 ;vehicle has always on lights
	p1 = 3 ;or even larger like 4,5,... normal lights like =1
	note1: when using =2 on day it's lowbeam,highbeam
	but at night it's lowbeam,lowbeam,highbeam
	note2: when using =0 it's affected by day or night for highbeams don't exist in daytime. **/
	function SET_VEHICLE_LIGHTS(vehicle: EntityHandle, state: int): void
	/**  **/
	function SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(vehicle: EntityHandle, toggle: boolean): void
	/** p1 can be either 0, 1 or 2.
	
	Determines how vehicle lights behave when toggled.
	
	0 = Default (Lights can be toggled between off, normal and high beams)
	1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
	2 = Always On (Lights can be toggled between normal and high beams) **/
	function SET_VEHICLE_HEADLIGHT_SHADOWS(vehicle: EntityHandle, p1: int): void
	/**  **/
	function SET_VEHICLE_ALARM(vehicle: EntityHandle, state: boolean): void
	/**  **/
	function START_VEHICLE_ALARM(vehicle: EntityHandle): void
	/**  **/
	function IS_VEHICLE_ALARM_ACTIVATED(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_INTERIORLIGHT(vehicle: EntityHandle, toggle: boolean): void
	/** Sets some bit of vehicle **/
	function SET_VEHICLE_FORCE_INTERIORLIGHT(vehicle: EntityHandle, toggle: boolean): void
	/** multiplier = brightness of head lights.
	this value isn't capped afaik.
	
	multiplier = 0.0 no lights
	multiplier = 1.0 default game value
	 **/
	function SET_VEHICLE_LIGHT_MULTIPLIER(vehicle: EntityHandle, multiplier: float): void
	/**  **/
	function ATTACH_VEHICLE_TO_TRAILER(vehicle: EntityHandle, trailer: EntityHandle, radius: float): void
	/** This is the proper way of attaching vehicles to the car carrier, it's what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo **/
	function ATTACH_VEHICLE_ON_TO_TRAILER(vehicle: EntityHandle, trailer: EntityHandle, offsetX: float, offsetY: float, offsetZ: float, coordsX: float, coordsY: float, coordsZ: float, rotationX: float, rotationY: float, rotationZ: float, disableCollisions: float): void
	/**  **/
	function STABILISE_ENTITY_ATTACHED_TO_HELI(vehicle: EntityHandle, entity: EntityHandle, p2: float): void
	/**  **/
	function DETACH_VEHICLE_FROM_TRAILER(vehicle: EntityHandle): void
	/**  **/
	function IS_VEHICLE_ATTACHED_TO_TRAILER(vehicle: EntityHandle): boolean
	/**  **/
	function SET_TRAILER_INVERSE_MASS_SCALE(vehicle: EntityHandle, p1: float): void
	/** in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer. **/
	function SET_TRAILER_LEGS_RAISED(vehicle: EntityHandle): void
	/**  **/
	function SET_TRAILER_LEGS_LOWERED(vehicle: EntityHandle): void
	/** tyreIndex = 0 to 4 on normal vehicles
	
	'0 = wheel_lf / bike, plane or jet front
	'1 = wheel_rf
	'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
	'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
	'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
	'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
	'45 = 6 wheels trailer mid wheel left
	'47 = 6 wheels trailer mid wheel right **/
	function SET_VEHICLE_TYRE_FIXED(vehicle: EntityHandle, tyreIndex: int): void
	/** Sets a vehicle's license plate text.  8 chars maximum.
	
	Example:
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
	char *plateText = "KING";
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText); **/
	function SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle: EntityHandle, plateText: string): void
	/** Returns the license plate text from a vehicle. 8 chars maximum. **/
	function GET_VEHICLE_NUMBER_PLATE_TEXT(vehicle: EntityHandle): string
	/** Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX. **/
	function GET_NUMBER_OF_VEHICLE_NUMBER_PLATES(): int
	/** Plates:
	Blue/White - 0
	Yellow/black - 1
	Yellow/Blue - 2
	Blue/White2 - 3
	Blue/White3 - 4
	Yankton - 5 **/
	function SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle: EntityHandle, plateIndex: int): void
	/** Returns the PlateType of a vehicle
	      Blue_on_White_1 = 3,
	      Blue_on_White_2 = 0,
	      Blue_on_White_3 = 4,
	      Yellow_on_Blue = 2,
	       Yellow_on_Black = 1,
	      North_Yankton = 5, **/
	function GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle: EntityHandle): int
	/**  **/
	function SET_RANDOM_TRAINS(toggle: boolean): void
	/** Train models HAVE TO be loaded (requested) before you use this.
	For variation 15 - request:
	
	freight
	freightcar
	freightgrain
	freightcont1
	freightcont2
	freighttrailer
	
	 **/
	function CREATE_MISSION_TRAIN(variation: int, x: float, y: float, z: float, direction: boolean, p5: any, p6: any): EntityHandle
	/** Toggles whether ambient trains can spawn on the specified track or not
	
	`trackId` is the internal id of the train track to switch.
	`state` is whether ambient trains can spawn or not
	
	trackIds
	0 (`trains1.dat`) Main track around SA
	1 (`trains2.dat`) Davis Quartz Quarry branch
	2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.
	3 (`trains4.dat`) Metro track circuit
	4 (`trains5.dat`) Branch in Mirror Park Railyard
	5 (`trains6.dat`) Branch in Mirror Park Railyard
	6 (`trains7.dat`) LS branch to Mirror Park Railyard
	7 (`trains8.dat`) Overground part of metro track along Forum Dr.
	8 (`trains9.dat`) Branch to Mirror Park Railyard
	9 (`trains10.dat`) Yankton train
	10 (`trains11.dat`) Part of metro track near mission row
	11 (`trains12.dat`) Yankton prologue mission train
	Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json **/
	function SWITCH_TRAIN_TRACK(trackId: int, state: boolean): void
	/** Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000
	
	trackIndex: 0 - 26
	Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json **/
	function SET_TRAIN_TRACK_SPAWN_FREQUENCY(trackIndex: int, frequency: int): void
	/**  **/
	function ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(p0: any): void
	/**  **/
	function DELETE_ALL_TRAINS(): void
	/**  **/
	function SET_TRAIN_SPEED(train: EntityHandle, speed: float): void
	/**  **/
	function SET_TRAIN_CRUISE_SPEED(train: EntityHandle, speed: float): void
	/**  **/
	function SET_RANDOM_BOATS(toggle: boolean): void
	/**  **/
	function SET_RANDOM_BOATS_MP(toggle: boolean): void
	/**  **/
	function SET_GARBAGE_TRUCKS(toggle: boolean): void
	/** Maximum amount of vehicles with vehicle stuck check appears to be 16. **/
	function DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(vehicle: EntityHandle): boolean
	/** See REQUEST_VEHICLE_RECORDING **/
	function GET_VEHICLE_RECORDING_ID(recording: int, script: string): int
	/** Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
	For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
	Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins. **/
	function REQUEST_VEHICLE_RECORDING(recording: int, script: string): void
	/** See REQUEST_VEHICLE_RECORDING **/
	function HAS_VEHICLE_RECORDING_BEEN_LOADED(recording: int, script: string): boolean
	/** See REQUEST_VEHICLE_RECORDING **/
	function REMOVE_VEHICLE_RECORDING(recording: int, script: string): void
	/**  **/
	function GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(id: int, time: float): Vector3
	/** This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
	
	See REQUEST_VEHICLE_RECORDING **/
	function GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(recording: int, time: float, script: string): Vector3
	/**  **/
	function GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(id: int, time: float): Vector3
	/** This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
	
	See REQUEST_VEHICLE_RECORDING **/
	function GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(recording: int, time: float, script: string): Vector3
	/**  **/
	function GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(id: int): float
	/** See REQUEST_VEHICLE_RECORDING **/
	function GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(recording: int, script: string): float
	/** Distance traveled in the vehicles current recording. **/
	function GET_POSITION_IN_RECORDING(vehicle: EntityHandle): float
	/** Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage. **/
	function GET_TIME_POSITION_IN_RECORDING(vehicle: EntityHandle): float
	/** p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
	
	See REQUEST_VEHICLE_RECORDING **/
	function START_PLAYBACK_RECORDED_VEHICLE(vehicle: EntityHandle, recording: int, script: string, p3: boolean): void
	/** flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.
	
	time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER **/
	function START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(vehicle: EntityHandle, recording: int, script: string, flags: int, time: int, drivingStyle: int): void
	/** Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE. **/
	function FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function STOP_PLAYBACK_RECORDED_VEHICLE(vehicle: EntityHandle): void
	/**  **/
	function PAUSE_PLAYBACK_RECORDED_VEHICLE(vehicle: EntityHandle): void
	/**  **/
	function UNPAUSE_PLAYBACK_RECORDED_VEHICLE(vehicle: EntityHandle): void
	/**  **/
	function IS_PLAYBACK_GOING_ON_FOR_VEHICLE(vehicle: EntityHandle): boolean
	/**  **/
	function IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(vehicle: EntityHandle): boolean
	/**  **/
	function GET_CURRENT_PLAYBACK_FOR_VEHICLE(vehicle: EntityHandle): int
	/**  **/
	function SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(vehicle: EntityHandle): void
	/**  **/
	function SET_PLAYBACK_SPEED(vehicle: EntityHandle, speed: float): void
	/** AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.
	
	FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE is a related native that deals with the AI physics for such recordings. **/
	function START_PLAYBACK_RECORDED_VEHICLE_USING_AI(vehicle: EntityHandle, recording: int, script: string, speed: float, drivingStyle: int): void
	/** SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle) **/
	function SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(vehicle: EntityHandle, time: float): void
	/** Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3. **/
	function SET_PLAYBACK_TO_USE_AI(vehicle: EntityHandle, drivingStyle: int): void
	/** Time is number of milliseconds before reverting, zero for indefinitely. **/
	function SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(vehicle: EntityHandle, time: int, drivingStyle: int, p3: boolean): void
	/**  **/
	function SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(vehicle: EntityHandle, x: float, y: float, z: float, p4: any): void
	/**  **/
	function SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(p0: any, p1: float, p2: float, p3: float): void
	/**  **/
	function SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(p0: any, p1: float, p2: float, p3: float): void
	/** A vehicle recording playback flag only used in jewelry_heist **/
	function SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function EXPLODE_VEHICLE_IN_CUTSCENE(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function ADD_VEHICLE_STUCK_CHECK_WITH_WARP(p0: any, p1: float, p2: any, p3: boolean, p4: boolean, p5: boolean, p6: any): void
	/** seems to make the vehicle stop spawning naturally in traffic. Here's an essential example:
	
	VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY("taco"), true);
	
	god I hate taco vans
	
	Confirmed to work? Needs to be looped? Can not get it to work.
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function SET_VEHICLE_MODEL_IS_SUPPRESSED(model: Hash, suppressed: boolean): void
	/** Gets a random vehicle in a sphere at the specified position, of the specified radius.
	
	x: The X-component of the position of the sphere.
	y: The Y-component of the position of the sphere.
	z: The Z-component of the position of the sphere.
	radius: The radius of the sphere. Max is 9999.9004.
	modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
	flags: The bitwise flags that modifies the behaviour of this function.
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_RANDOM_VEHICLE_IN_SPHERE(x: float, y: float, z: float, radius: float, modelHash: Hash, flags: int): EntityHandle
	/**  **/
	function GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(p0: float, p1: float, p2: float, p3: float, p4: int, p5: int, p6: int): EntityHandle
	/**  **/
	function GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(p0: float, p1: float, p2: float, p3: float, p4: int, p5: int, p6: int): EntityHandle
	/** Example usage
	VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70) 
	
	x, y, z: Position to get closest vehicle to.
	radius: Max radius to get a vehicle.
	modelHash: Limit to vehicles with this model. 0 for any.
	flags: The bitwise flags altering the function's behaviour.
	
	Does not return police cars or helicopters.
	
	It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
	
	Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above. 
	
	These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
	Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
	
	Conversion of found flags to binary: https://pastebin.com/kghNFkRi
	
	At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned. 
	
	It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT
	
	-------------------------------------------------------------------------
	
	Conclusion: This native is not worth trying to use. Use something like this instead: https://pastebin.com/xiFdXa7h
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_CLOSEST_VEHICLE(x: float, y: float, z: float, radius: float, modelHash: Hash, flags: int): EntityHandle
	/** Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3. **/
	function GET_TRAIN_CARRIAGE(train: EntityHandle, trailerNumber: int): EntityHandle
	/**  **/
	function IS_MISSION_TRAIN(train: EntityHandle): boolean
	/**  **/
	function DELETE_MISSION_TRAIN(train: Address): void
	/** p1 is always 0 **/
	function SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(train: Address, p1: boolean): void
	/**  **/
	function SET_MISSION_TRAIN_COORDS(train: EntityHandle, x: float, y: float, z: float): void
	/**  **/
	function IS_THIS_MODEL_A_BOAT(model: Hash): boolean
	/** Checks if model is a boat, then checks for FLAG_IS_JETSKI. **/
	function IS_THIS_MODEL_A_JETSKI(model: Hash): boolean
	/**  **/
	function IS_THIS_MODEL_A_PLANE(model: Hash): boolean
	/**  **/
	function IS_THIS_MODEL_A_HELI(model: Hash): boolean
	/** To check if the model is an amphibious car, use IS_THIS_MODEL_AN_AMPHIBIOUS_CAR. **/
	function IS_THIS_MODEL_A_CAR(model: Hash): boolean
	/**  **/
	function IS_THIS_MODEL_A_TRAIN(model: Hash): boolean
	/**  **/
	function IS_THIS_MODEL_A_BIKE(model: Hash): boolean
	/**  **/
	function IS_THIS_MODEL_A_BICYCLE(model: Hash): boolean
	/**  **/
	function IS_THIS_MODEL_A_QUADBIKE(model: Hash): boolean
	/**  **/
	function IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(model: Hash): boolean
	/**  **/
	function IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(model: Hash): boolean
	/** Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
	
	this native works on planes to? **/
	function SET_HELI_BLADES_FULL_SPEED(vehicle: EntityHandle): void
	/** Sets the speed of the helicopter blades in percentage of the full speed.
	
	vehicleHandle: The helicopter.
	speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%. **/
	function SET_HELI_BLADES_SPEED(vehicle: EntityHandle, speed: float): void
	/**  **/
	function FORCE_SUB_THROTTLE_FOR_TIME(vehicle: EntityHandle, p1: float, p2: float): void
	/** This has not yet been tested - it's just an assumption of what the types could be. **/
	function SET_VEHICLE_CAN_BE_TARGETTED(vehicle: EntityHandle, state: boolean): void
	/**  **/
	function SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(vehicle: EntityHandle, state: boolean): void
	/**  **/
	function SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(p0: any, p1: any): void
	/** Dirt level 0..15 **/
	function GET_VEHICLE_DIRT_LEVEL(vehicle: EntityHandle): float
	/** You can't use values greater than 15.0
	Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle. **/
	function SET_VEHICLE_DIRT_LEVEL(vehicle: EntityHandle, dirtLevel: float): void
	/** Appears to return true if the vehicle has any damage, including cosmetically. **/
	function GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(vehicle: EntityHandle): boolean
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function IS_VEHICLE_DOOR_FULLY_OPEN(vehicle: EntityHandle, doorId: int): boolean
	/** Starts or stops the engine on the specified vehicle.
	
	vehicle: The vehicle to start or stop the engine on.
	value: true to turn the vehicle on; false to turn it off.
	instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
	disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.
	
	from what I've tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on? **/
	function SET_VEHICLE_ENGINE_ON(vehicle: EntityHandle, value: boolean, instantly: boolean, disableAutoStart: boolean): void
	/**  **/
	function SET_VEHICLE_UNDRIVEABLE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_PROVIDES_COVER(vehicle: EntityHandle, toggle: boolean): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function SET_VEHICLE_DOOR_CONTROL(vehicle: EntityHandle, doorId: int, speed: int, angle: float): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function SET_VEHICLE_DOOR_LATCHED(vehicle: EntityHandle, doorId: int, p2: boolean, p3: boolean, p4: boolean): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function GET_VEHICLE_DOOR_ANGLE_RATIO(vehicle: EntityHandle, doorId: int): float
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function GET_PED_USING_VEHICLE_DOOR(vehicle: EntityHandle, doord: int): EntityHandle
	/** enum eDoorId
	{
		VEH_EXT_DOOR_INVALID_ID = -1,
		VEH_EXT_DOOR_DSIDE_F,
		VEH_EXT_DOOR_DSIDE_R,
		VEH_EXT_DOOR_PSIDE_F,
		VEH_EXT_DOOR_PSIDE_R,
		VEH_EXT_BONNET,
		VEH_EXT_BOOT
	}; **/
	function SET_VEHICLE_DOOR_SHUT(vehicle: EntityHandle, doorId: int, closeInstantly: boolean): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function SET_VEHICLE_DOOR_BROKEN(vehicle: EntityHandle, doorId: int, deleteDoor: boolean): void
	/**  **/
	function SET_VEHICLE_CAN_BREAK(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function DOES_VEHICLE_HAVE_ROOF(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(p0: any): void
	/**  **/
	function SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(p0: any): void
	/**  **/
	function SET_CARJACK_MISSION_REMOVAL_PARAMETERS(p0: any, p1: any): void
	/** Returns true if MF_IS_BIG (strModelFlags 0x8) handling model flag is set. **/
	function IS_BIG_VEHICLE(vehicle: EntityHandle): boolean
	/** Returns the total amount of color combinations found in the vehicle's carvariations.meta entry. **/
	function GET_NUMBER_OF_VEHICLE_COLOURS(vehicle: EntityHandle): int
	/** Sets the selected vehicle's colors to the specified index of the color combination found in the vehicle's carvariations.meta entry. **/
	function SET_VEHICLE_COLOUR_COMBINATION(vehicle: EntityHandle, colorCombination: int): void
	/** Returns the index of the color combination found in the vehicle's carvariations.meta entry. **/
	function GET_VEHICLE_COLOUR_COMBINATION(vehicle: EntityHandle): int
	/** `color`: is the paint index for the vehicle.
	Paint index goes from 0 to 12.
	Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png
	Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json **/
	function SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(vehicle: EntityHandle, colorIndex: int): void
	/** Returns the headlight color index from the vehicle. Value between 0, 12.
	Use SET_VEHICLE_XENON_LIGHT_COLOR_INDEX to set the headlights color for the vehicle.
	Must enable xenon headlights before it'll take affect.
	
	Returns an int, value between 0-12 or 255 if no color is set. **/
	function GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(vehicle: EntityHandle): int
	/** Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored. **/
	function SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(vehicle: EntityHandle, p1: boolean): void
	/** Not present in the retail version! It's just a nullsub.
	
	p0 always true (except in one case)
	successIndicator: 0 if success, -1 if failed **/
	function GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(p0: boolean, modelHash: Address, successIndicator: IntPointer): void
	/** enum VehicleLockStatus = {
	    None = 0,
	    Unlocked = 1,
	    Locked = 2,
	    LockedForPlayer = 3,
	    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
	    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
	    CanBeBrokenIntoPersist = 8, -- Can be broken into persist
	    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
	} **/
	function GET_VEHICLE_DOOR_LOCK_STATUS(vehicle: EntityHandle): int
	/** Returns vehicle door lock state previously set with SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED **/
	function GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(vehicle: EntityHandle, doorId: int): int
	/** doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3. **/
	function IS_VEHICLE_DOOR_DAMAGED(veh: EntityHandle, doorID: int): boolean
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(vehicle: EntityHandle, doorId: int, isBreakable: boolean): void
	/**  **/
	function IS_VEHICLE_BUMPER_BOUNCING(vehicle: EntityHandle, frontBumper: boolean): boolean
	/**  **/
	function IS_VEHICLE_BUMPER_BROKEN_OFF(vehicle: EntityHandle, frontBumper: boolean): boolean
	/** Usage:
	
	public bool isCopInRange(Vector3 Location, float Range)
	        {
	            return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
	        } **/
	function IS_COP_VEHICLE_IN_AREA_3D(x1: float, x2: float, y1: float, y2: float, z1: float, z2: float): boolean
	/**  Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
	        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
	    End Function
	 **/
	function IS_VEHICLE_ON_ALL_WHEELS(vehicle: EntityHandle): boolean
	/** Returns `nMonetaryValue` from handling.meta for specific model. **/
	function GET_VEHICLE_MODEL_VALUE(vehicleModel: Hash): int
	/** Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_VEHICLE_LAYOUT_HASH(vehicle: EntityHandle): Hash
	/**  **/
	function GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(vehicle: EntityHandle, p1: int): Hash
	/** Makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations) **/
	function SET_RENDER_TRAIN_AS_DERAILED(train: EntityHandle, toggle: boolean): void
	/** They use the same color indexs as SET_VEHICLE_COLOURS. **/
	function SET_VEHICLE_EXTRA_COLOURS(vehicle: EntityHandle, pearlescentColor: int, wheelColor: int): void
	/**  **/
	function GET_VEHICLE_EXTRA_COLOURS(vehicle: EntityHandle, pearlescentColor: IntPointer, wheelColor: IntPointer): void
	/**  **/
	function SET_VEHICLE_EXTRA_COLOUR_5(vehicle: EntityHandle, color: int): void
	/**  **/
	function GET_VEHICLE_EXTRA_COLOUR_5(vehicle: EntityHandle, color: IntPointer): void
	/**  **/
	function SET_VEHICLE_EXTRA_COLOUR_6(vehicle: EntityHandle, color: int): void
	/**  **/
	function GET_VEHICLE_EXTRA_COLOUR_6(vehicle: EntityHandle, color: IntPointer): void
	/**  **/
	function STOP_ALL_GARAGE_ACTIVITY(): void
	/** This fixes a vehicle.
	If the vehicle's engine's broken then you cannot fix it with this native. **/
	function SET_VEHICLE_FIXED(vehicle: EntityHandle): void
	/** This fixes the deformation of a vehicle but the vehicle health doesn't improve **/
	function SET_VEHICLE_DEFORMATION_FIXED(vehicle: EntityHandle): void
	/**  **/
	function SET_VEHICLE_CAN_ENGINE_MISSFIRE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_CAN_LEAK_OIL(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_CAN_LEAK_PETROL(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_DISABLE_VEHICLE_ENGINE_FIRES(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(vehicle: EntityHandle, toggle: boolean): void
	/** sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly: 
	CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
	{
	    CVehicle *result; // rax@1
	
	    result = EntityAsCVehicle(a1);
	    if ( result )
	    {
	        result->field_886 &= 0xEFu;
	        result->field_886 |= 16 * (a2 & 1);
	    }
	    return result;
	} **/
	function SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_DISABLE_PRETEND_OCCUPANTS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, unk: any): void
	/** Locks the vehicle's steering to the desired angle, explained below.
	
	Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
	
	Steer bias:
	-1.0 = full right
	0.0 = centered steering
	1.0 = full left **/
	function SET_VEHICLE_STEER_BIAS(vehicle: EntityHandle, value: float): void
	/**  **/
	function IS_VEHICLE_EXTRA_TURNED_ON(vehicle: EntityHandle, extraId: int): boolean
	/** Note: only some vehicle have extras
	extra ids are from 1 - 9 depending on the vehicle
	
	-------------------------------------------------
	
	^ not sure if outdated or simply wrong. Max extra ID for b944 is 14
	
	-------------------------------------------------
	p2 is not a on/off toggle. mostly 0 means on and 1 means off.
	not sure if it really should be a BOOL. **/
	function SET_VEHICLE_EXTRA(vehicle: EntityHandle, extraId: int, disable: boolean): void
	/** Checks via CVehicleModelInfo **/
	function DOES_EXTRA_EXIST(vehicle: EntityHandle, extraId: int): boolean
	/** Returns true if specified extra part is broken off. It only works for extras that can break off during collisions, non-breakable extras always return false. Also returns true if the breakable extra is toggled off through script. **/
	function IS_EXTRA_BROKEN_OFF(vehicle: EntityHandle, extraId: int): boolean
	/**  **/
	function SET_CONVERTIBLE_ROOF(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function LOWER_CONVERTIBLE_ROOF(vehicle: EntityHandle, instantlyLower: boolean): void
	/**  **/
	function RAISE_CONVERTIBLE_ROOF(vehicle: EntityHandle, instantlyRaise: boolean): void
	/** 0 -> up
	1 -> lowering down
	2 -> down
	3 -> raising up **/
	function GET_CONVERTIBLE_ROOF_STATE(vehicle: EntityHandle): int
	/** Returns true if the vehicle has a convertible roof.
	
	p1 is false almost always. However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF. If p1 is true, it seems that every single vehicle will return true irrespective of being a convertible. **/
	function IS_VEHICLE_A_CONVERTIBLE(vehicle: EntityHandle, p1: boolean): boolean
	/** Transforms the `stormberg`/`toreador` to its "submarine" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all. **/
	function TRANSFORM_TO_SUBMARINE(vehicle: EntityHandle, noAnimation: boolean): boolean
	/** Transforms the `stormberg`/`toreador` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all. **/
	function TRANSFORM_TO_CAR(vehicle: EntityHandle, noAnimation: boolean): void
	/**  **/
	function IS_VEHICLE_IN_SUBMARINE_MODE(vehicle: EntityHandle): boolean
	/**  **/
	function IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(vehicle: EntityHandle): boolean
	/** Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
	
	Radius of effect damage applied in a sphere at impact location
	When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact **/
	function SET_VEHICLE_DAMAGE(vehicle: EntityHandle, xOffset: float, yOffset: float, zOffset: float, damage: float, radius: float, focusOnModel: boolean): void
	/**  **/
	function SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(p0: any, p1: any): void
	/** Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
	
	Minimum: -4000
	Maximum: 1000
	
	-4000: Engine is destroyed
	0 and below: Engine catches fire and health rapidly declines
	300: Engine is smoking and losing functionality
	1000: Engine is perfect **/
	function GET_VEHICLE_ENGINE_HEALTH(vehicle: EntityHandle): float
	/** 1000 is max health
	Begins leaking gas at around 650 health
	Minimum: -4000
	Maximum: 1000
	
	-4000: Engine is destroyed
	0 and below: Engine catches fire and health rapidly declines
	300: Engine is smoking and losing functionality
	1000: Engine is perfect **/
	function SET_VEHICLE_ENGINE_HEALTH(vehicle: EntityHandle, health: float): void
	/** Works just like SET_VEHICLE_ENGINE_HEALTH, but only for planes. **/
	function SET_PLANE_ENGINE_HEALTH(vehicle: EntityHandle, health: float): void
	/** 1000 is max health
	Begins leaking gas at around 650 health
	-999.90002441406 appears to be minimum health, although nothing special occurs **/
	function GET_VEHICLE_PETROL_TANK_HEALTH(vehicle: EntityHandle): float
	/** 1000 is max health
	Begins leaking gas at around 650 health
	-999.90002441406 appears to be minimum health, although nothing special occurs **/
	function SET_VEHICLE_PETROL_TANK_HEALTH(vehicle: EntityHandle, health: float): void
	/** p1 can be anywhere from 0 to 3 in the scripts.
	p2 being how long in milliseconds the vehicle has been stuck **/
	function IS_VEHICLE_STUCK_TIMER_UP(vehicle: EntityHandle, p1: int, ms: int): boolean
	/** The inner function has a switch on the second parameter. It's the stuck timer index.
	
	Here's some pseudo code I wrote for the inner function:
	void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
	{
	 switch (timerIndex)
	   {
	 case 0:
	       unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
	 case 1:
	       unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
	    case 2:
	       unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
	 case 3:
	       unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
	    case 4:
	       unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
	     unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
	        unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
	     unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
	        break;
	    };
	} **/
	function RESET_VEHICLE_STUCK_TIMER(vehicle: EntityHandle, nullAttributes: int): void
	/** p1 is always 0 in the scripts.
	
	p1 = check if vehicle is on fire **/
	function IS_VEHICLE_DRIVEABLE(vehicle: EntityHandle, isOnFireCheck: boolean): boolean
	/**  **/
	function SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(vehicle: EntityHandle, owned: boolean): void
	/**  **/
	function SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(vehicle: EntityHandle, toggle: boolean): void
	/** Sounds the horn for the specified vehicle.
	
	vehicle: The vehicle to activate the horn for.
	mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
	duration: The duration to sound the horn, in milliseconds.
	
	Note: If a player is in the vehicle, it will only sound briefly. **/
	function START_VEHICLE_HORN(vehicle: EntityHandle, duration: int, mode: Hash, forever: boolean): void
	/** If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous. **/
	function SET_VEHICLE_IN_CAR_MOD_SHOP(vehicle: EntityHandle, toggle: boolean): void
	/** if true, axles won't bend. **/
	function SET_VEHICLE_HAS_STRONG_AXLES(vehicle: EntityHandle, toggle: boolean): void
	/** Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
	-----------------------------------------------------------------------------------------------------------------------------------------
	While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
	-----------------------------------------------------------------------------------------------------------------------------------------
	
	Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
	
	Using HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION, you can get the localized name.
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(modelHash: Hash): string
	/** Will return a vehicle's manufacturer display label.
	Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_MAKE_NAME_FROM_VEHICLE_MODEL(modelHash: Hash): string
	/** The only example I can find of this function in the scripts, is this:
	
	struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);
	
	-----------------------------------------------------------------------------------------------------------------------------------------
	PC scripts:
	
	v_5/ *{3}* / = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3); **/
	function GET_VEHICLE_DEFORMATION_AT_POS(vehicle: EntityHandle, offsetX: float, offsetY: float, offsetZ: float): Vector3
	/**  **/
	function SET_VEHICLE_LIVERY(vehicle: EntityHandle, livery: int): void
	/** -1 = no livery **/
	function GET_VEHICLE_LIVERY(vehicle: EntityHandle): int
	/** Returns -1 if the vehicle has no livery **/
	function GET_VEHICLE_LIVERY_COUNT(vehicle: EntityHandle): int
	/** Used to set the tornado custom (convertible) rooftop livery.
	
	Livery value that works for tornado custom is between 0 and 9 from what i can tell. Maybe 0-8 even.
	
	Might work on other custom vehicles but im not sure what those might be, only confirmed it working with the tornado custom. **/
	function SET_VEHICLE_LIVERY2(vehicle: EntityHandle, livery: int): void
	/** Returns index of the current vehicle's rooftop livery. A getter for _SET_VEHICLE_ROOF_LIVERY. **/
	function GET_VEHICLE_LIVERY2(vehicle: EntityHandle): int
	/** Returns a number of available rooftop liveries, or -1 if vehicle has no rooftop liveries available. **/
	function GET_VEHICLE_LIVERY2_COUNT(vehicle: EntityHandle): int
	/** This will return false if the window is broken, or rolled down.
	Window indexes:
	0 = Front Right Window
	1 = Front Left Window
	2 = Back Right Window
	3 = Back Left Window
	
	
	Those numbers go on for vehicles that have more than 4 doors with windows. **/
	function IS_VEHICLE_WINDOW_INTACT(vehicle: EntityHandle, windowIndex: int): boolean
	/** Appears to return false if any window is broken. **/
	function ARE_ALL_VEHICLE_WINDOWS_INTACT(vehicle: EntityHandle): boolean
	/** Returns false if every seat is occupied. **/
	function ARE_ANY_VEHICLE_SEATS_FREE(vehicle: EntityHandle): boolean
	/**  **/
	function RESET_VEHICLE_WHEELS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function IS_HELI_PART_BROKEN(vehicle: EntityHandle, p1: boolean, p2: boolean, p3: boolean): boolean
	/** Max 1000.
	At 0 the main rotor will stall. **/
	function GET_HELI_MAIN_ROTOR_HEALTH(vehicle: EntityHandle): float
	/** Max 1000.
	At 0 the tail rotor will stall. **/
	function GET_HELI_TAIL_ROTOR_HEALTH(vehicle: EntityHandle): float
	/** Max 1000.
	At -100 both helicopter rotors will stall. **/
	function GET_HELI_TAIL_BOOM_HEALTH(vehicle: EntityHandle): float
	/**  **/
	function SET_HELI_MAIN_ROTOR_HEALTH(vehicle: EntityHandle, health: float): void
	/**  **/
	function SET_HELI_TAIL_ROTOR_HEALTH(vehicle: EntityHandle, health: float): void
	/**  **/
	function SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(vehicle: EntityHandle, toggle: boolean): boolean
	/** NOTE: Debugging functions are not present in the retail version of the game. **/
	function SET_VEHICLE_NAME_DEBUG(vehicle: EntityHandle, name: string): void
	/** Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off. **/
	function SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_DISABLE_TOWING(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_VEHICLE_HAS_LANDING_GEAR(vehicle: EntityHandle): boolean
	/** Works for vehicles with a retractable landing gear
	
	landing gear states:
	
	0: Deployed
	1: Closing
	2: Opening
	3: Retracted
	
	what can I use to make the hydra thing forward? **/
	function CONTROL_LANDING_GEAR(vehicle: EntityHandle, state: int): void
	/** Landing gear states:
	
	0: Deployed
	1: Closing (Retracting)
	2:(Landing gear state 2 is never used.)
	3: Opening (Deploying)
	4: Retracted
	
	Returns the current state of the vehicles landing gear. **/
	function GET_LANDING_GEAR_STATE(vehicle: EntityHandle): int
	/**  **/
	function IS_ANY_VEHICLE_NEAR_POINT(x: float, y: float, z: float, radius: float): boolean
	/**  **/
	function REQUEST_VEHICLE_HIGH_DETAIL_MODEL(vehicle: EntityHandle): void
	/**  **/
	function REMOVE_VEHICLE_HIGH_DETAIL_MODEL(vehicle: EntityHandle): void
	/**  **/
	function IS_VEHICLE_HIGH_DETAIL(vehicle: EntityHandle): boolean
	/** REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
	
	vehicle found that have asset's:
	cargobob3
	submersible
	blazer **/
	function REQUEST_VEHICLE_ASSET(vehicleHash: Hash, vehicleAsset: int): void
	/**  **/
	function HAS_VEHICLE_ASSET_LOADED(vehicleAsset: int): boolean
	/**  **/
	function REMOVE_VEHICLE_ASSET(vehicleAsset: int): void
	/** Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised. **/
	function SET_VEHICLE_TOW_TRUCK_ARM_POSITION(vehicle: EntityHandle, position: float): void
	/** HookOffset defines where the hook is attached. leave at 0 for default attachment. **/
	function ATTACH_VEHICLE_TO_TOW_TRUCK(towTruck: EntityHandle, vehicle: EntityHandle, rear: boolean, hookOffsetX: float, hookOffsetY: float, hookOffsetZ: float): void
	/** First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second. **/
	function DETACH_VEHICLE_FROM_TOW_TRUCK(towTruck: EntityHandle, vehicle: EntityHandle): void
	/**  **/
	function DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(vehicle: EntityHandle): boolean
	/** Scripts verify that towTruck is the first parameter, not the second. **/
	function IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(towTruck: EntityHandle, vehicle: EntityHandle): boolean
	/**  **/
	function GET_ENTITY_ATTACHED_TO_TOW_TRUCK(towTruck: EntityHandle): EntityHandle
	/**  **/
	function SET_VEHICLE_AUTOMATICALLY_ATTACHES(vehicle: EntityHandle, p1: boolean, p2: any): EntityHandle
	/** Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%). **/
	function SET_VEHICLE_BULLDOZER_ARM_POSITION(vehicle: EntityHandle, position: float, p2: boolean): void
	/**  **/
	function SET_VEHICLE_TANK_TURRET_POSITION(vehicle: EntityHandle, position: float, p2: boolean): void
	/**  **/
	function SET_VEHICLE_TURRET_TARGET(vehicle: EntityHandle, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/**  **/
	function SET_VEHICLE_TANK_STATIONARY(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_VEHICLE_TURRET_SPEED_THIS_FRAME(vehicle: EntityHandle, speed: float): void
	/**  **/
	function DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(vehicle: EntityHandle): void
	/**  **/
	function SET_VEHICLE_FLIGHT_NOZZLE_POSITION(vehicle: EntityHandle, angleRatio: float): void
	/**  **/
	function SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(vehicle: EntityHandle, angle: float): void
	/**  **/
	function GET_VEHICLE_FLIGHT_NOZZLE_POSITION(plane: EntityHandle): float
	/** True stops vtols from switching modes. Doesn't stop the sound though. **/
	function SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(outVec: Vector3Pointer, p1: any, outVec1: Vector3Pointer, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): boolean
	/** On accelerating, spins the driven wheels with the others braked, so you don't go anywhere. **/
	function SET_VEHICLE_BURNOUT(vehicle: EntityHandle, toggle: boolean): void
	/** Returns whether the specified vehicle is currently in a burnout.
	
	
	vb.net
	Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
	        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
	    End Function **/
	function IS_VEHICLE_IN_BURNOUT(vehicle: EntityHandle): boolean
	/** Reduces grip significantly so it's hard to go anywhere. **/
	function SET_VEHICLE_REDUCE_GRIP(vehicle: EntityHandle, toggle: boolean): void
	/** val is 0-3
	Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP **/
	function SET_VEHICLE_REDUCE_GRIP_LEVEL(vehicle: EntityHandle, val: int): void
	/** Sets the turn signal enabled for a vehicle.
	Set turnSignal to 1 for left light, 0 for right light. **/
	function SET_VEHICLE_INDICATOR_LIGHTS(vehicle: EntityHandle, turnSignal: int, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_BRAKE_LIGHTS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_HANDBRAKE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_BRAKE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function INSTANTLY_FILL_VEHICLE_POPULATION(): void
	/**  **/
	function HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED(): boolean
	/**  **/
	function NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(toggle: boolean): void
	/** Default:1000||This sets a value which is used when NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(true) is called each frame. **/
	function NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(p0: int): void
	/** Gets the trailer of a vehicle and puts it into the trailer parameter. **/
	function GET_VEHICLE_TRAILER_VEHICLE(vehicle: EntityHandle, trailer: Address): boolean
	/** vehicle must be a plane **/
	function SET_VEHICLE_USES_LARGE_REAR_RAMP(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_RUDDER_BROKEN(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_CONVERTIBLE_ROOF_LATCH_STATE(vehicle: EntityHandle, state: boolean): void
	/**  **/
	function GET_VEHICLE_ESTIMATED_MAX_SPEED(vehicle: EntityHandle): float
	/**  **/
	function GET_VEHICLE_MAX_BRAKING(vehicle: EntityHandle): float
	/**  **/
	function GET_VEHICLE_MAX_TRACTION(vehicle: EntityHandle): float
	/** static - max acceleration **/
	function GET_VEHICLE_ACCELERATION(vehicle: EntityHandle): float
	/** Returns max speed (without mods) of the specified vehicle model in m/s.
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(modelHash: Hash): float
	/** Returns max braking of the specified vehicle model.
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_VEHICLE_MODEL_MAX_BRAKING(modelHash: Hash): float
	/** Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(modelHash: Hash): float
	/** Returns max traction of the specified vehicle model.
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_VEHICLE_MODEL_MAX_TRACTION(modelHash: Hash): float
	/** Returns the acceleration of the specified model.
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_VEHICLE_MODEL_ACCELERATION(modelHash: Hash): float
	/** 9.8 * thrust if air vehicle, else 0.38 + drive force?
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(modelHash: Hash): float
	/** Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_FLYING_VEHICLE_MODEL_AGILITY(modelHash: Hash): float
	/** Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_BOAT_VEHICLE_MODEL_AGILITY(modelHash: Hash): float
	/**  **/
	function GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(vehicleClass: int): float
	/**  **/
	function GET_VEHICLE_CLASS_MAX_TRACTION(vehicleClass: int): float
	/**  **/
	function GET_VEHICLE_CLASS_MAX_AGILITY(vehicleClass: int): float
	/**  **/
	function GET_VEHICLE_CLASS_MAX_ACCELERATION(vehicleClass: int): float
	/**  **/
	function GET_VEHICLE_CLASS_MAX_BRAKING(vehicleClass: int): float
	/**  **/
	function ADD_ROAD_NODE_SPEED_ZONE(x: float, y: float, z: float, radius: float, speed: float, p5: boolean): int
	/**  **/
	function REMOVE_ROAD_NODE_SPEED_ZONE(speedzone: int): boolean
	/**  **/
	function OPEN_BOMB_BAY_DOORS(vehicle: EntityHandle): void
	/**  **/
	function CLOSE_BOMB_BAY_DOORS(vehicle: EntityHandle): void
	/** Returns true when the bomb bay doors of this plane are open. False if they're closed. **/
	function GET_ARE_BOMB_BAY_DOORS_OPEN(aircraft: EntityHandle): boolean
	/** Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
	
	@Author Nac **/
	function IS_VEHICLE_SEARCHLIGHT_ON(vehicle: EntityHandle): boolean
	/** Only works during nighttime. **/
	function SET_VEHICLE_SEARCHLIGHT(heli: EntityHandle, toggle: boolean, canBeUsedByAI: boolean): void
	/**  **/
	function DOES_VEHICLE_HAVE_SEARCHLIGHT(vehicle: EntityHandle): boolean
	/** Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).
	
	seatIndex  = -1 being the driver seat.
	Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
	side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
	onEnter = check if you can enter (true) or exit (false) a vehicle. **/
	function IS_ENTRY_POINT_FOR_SEAT_CLEAR(ped: EntityHandle, vehicle: EntityHandle, seatIndex: int, side: boolean, onEnter: boolean): boolean
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function GET_ENTRY_POINT_POSITION(vehicle: EntityHandle, doorId: int): Vector3
	/**  **/
	function CAN_SHUFFLE_SEAT(vehicle: EntityHandle, seatIndex: int): boolean
	/**  **/
	function GET_NUM_MOD_KITS(vehicle: EntityHandle): int
	/** Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
	
	Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json **/
	function SET_VEHICLE_MOD_KIT(vehicle: EntityHandle, modKit: int): void
	/**  **/
	function GET_VEHICLE_MOD_KIT(vehicle: EntityHandle): int
	/**  **/
	function GET_VEHICLE_MOD_KIT_TYPE(vehicle: EntityHandle): int
	/** Returns an int
	
	Wheel Types:
	0: Sport
	1: Muscle
	2: Lowrider
	3: SUV
	4: Offroad
	5: Tuner
	6: Bike Wheels
	7: High End
	8: Benny's Originals
	9: Benny's Bespoke
	10: Racing
	11: Street
	12: Track
	
	Tested in Los Santos Customs **/
	function GET_VEHICLE_WHEEL_TYPE(vehicle: EntityHandle): int
	/** 0: Sport
	1: Muscle
	2: Lowrider
	3: SUV
	4: Offroad
	5: Tuner
	6: Bike Wheels
	7: High End
	8: Benny's Originals
	9: Benny's Bespoke
	10: Racing
	11: Street
	12: Track **/
	function SET_VEHICLE_WHEEL_TYPE(vehicle: EntityHandle, WheelType: int): void
	/** paintType:
	0: Normal
	1: Metallic
	2: Pearl
	3: Matte
	4: Metal
	5: Chrome
	6: Chameleon **/
	function GET_NUM_MOD_COLORS(paintType: int, p1: boolean): int
	/** paintType:
	0: Normal
	1: Metallic
	2: Pearl
	3: Matte
	4: Metal
	5: Chrome
	6: Chameleon
	
	color: number of the color.
	
	p3 seems to always be 0.
	
	Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json **/
	function SET_VEHICLE_MOD_COLOR_1(vehicle: EntityHandle, paintType: int, color: int, pearlescentColor: int): void
	/** Changes the secondary paint type and color
	paintType:
	0: Normal
	1: Metallic
	2: Pearl
	3: Matte
	4: Metal
	5: Chrome
	6: Chameleon
	
	color: number of the color
	
	Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json **/
	function SET_VEHICLE_MOD_COLOR_2(vehicle: EntityHandle, paintType: int, color: int): void
	/**  **/
	function GET_VEHICLE_MOD_COLOR_1(vehicle: EntityHandle, paintType: IntPointer, color: IntPointer, pearlescentColor: IntPointer): void
	/**  **/
	function GET_VEHICLE_MOD_COLOR_2(vehicle: EntityHandle, paintType: IntPointer, color: IntPointer): void
	/** Returns a string which is the codename of the vehicle's currently selected primary color
	
	p1 is always 0 **/
	function GET_VEHICLE_MOD_COLOR_1_NAME(vehicle: EntityHandle, p1: boolean): string
	/** Returns a string which is the codename of the vehicle's currently selected secondary color **/
	function GET_VEHICLE_MOD_COLOR_2_NAME(vehicle: EntityHandle): string
	/**  **/
	function HAVE_VEHICLE_MODS_STREAMED_IN(vehicle: EntityHandle): boolean
	/** Returns true for any mod part listed in GEN9_EXCLUSIVE_ASSETS_VEHICLES_FILE. **/
	function IS_VEHICLE_MOD_GEN9_EXCLUSIVE(vehicle: EntityHandle, modType: int, modIndex: int): boolean
	/** In b944, there are 50 (0 - 49) mod types.
	
	Sets the vehicle mod.
	The vehicle must have a mod kit first.
	
	Any out of range ModIndex is stock.
	
	#Mod Type
	Spoilers - 0
	Front Bumper - 1
	Rear Bumper - 2
	Side Skirt - 3
	Exhaust - 4
	Frame - 5
	Grille - 6
	Hood - 7
	Fender - 8
	Right Fender - 9
	Roof - 10
	Engine - 11
	Brakes - 12
	Transmission - 13
	Horns - 14 (modIndex from 0 to 51)
	Suspension - 15
	Armor - 16
	Front Wheels - 23
	Back Wheels - 24 //only for motocycles
	Plate holders - 25
	Trim Design - 27
	Ornaments - 28
	Dial Design - 30
	Steering Wheel - 33
	Shifter Leavers - 34
	Plaques - 35
	Hydraulics - 38
	Livery - 48
	
	ENUMS: https://pastebin.com/QzEAn02v **/
	function SET_VEHICLE_MOD(vehicle: EntityHandle, modType: int, modIndex: int, customTires: boolean): void
	/** In b944, there are 50 (0 - 49) mod types. See SET_VEHICLE_MOD for the list.
	
	Returns -1 if the vehicle mod is stock **/
	function GET_VEHICLE_MOD(vehicle: EntityHandle, modType: int): int
	/** Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels **/
	function GET_VEHICLE_MOD_VARIATION(vehicle: EntityHandle, modType: int): int
	/** Returns how many possible mods a vehicle has for a given mod type **/
	function GET_NUM_VEHICLE_MODS(vehicle: EntityHandle, modType: int): int
	/**  **/
	function REMOVE_VEHICLE_MOD(vehicle: EntityHandle, modType: int): void
	/** Toggles:
	UNK17 - 17
	Turbo - 18
	UNK19 - 19
	Tire Smoke - 20
	UNK21 - 21
	Xenon Headlights - 22 **/
	function TOGGLE_VEHICLE_MOD(vehicle: EntityHandle, modType: int, toggle: boolean): void
	/**  **/
	function IS_TOGGLE_MOD_ON(vehicle: EntityHandle, modType: int): boolean
	/** Returns the text label of a mod type for a given vehicle
	
	Use GET_FILENAME_FOR_AUDIO_CONVERSATION to get the part name in the game's language **/
	function GET_MOD_TEXT_LABEL(vehicle: EntityHandle, modType: int, modValue: int): string
	/** Returns the name for the type of vehicle mod(Armour, engine etc)
	 **/
	function GET_MOD_SLOT_NAME(vehicle: EntityHandle, modType: int): string
	/** Second Param = LiveryIndex
	
	example 
	
	int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
	for (int i = 0; i < count; i++)  
	  {
	     const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
	  }
	
	
	this example will work fine to fetch all names 
	for example for Sanchez we get 
	
	SANC_LV1
	SANC_LV2
	SANC_LV3
	SANC_LV4
	SANC_LV5
	
	
	Use GET_FILENAME_FOR_AUDIO_CONVERSATION, to get the localized livery name.
	
	Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json **/
	function GET_LIVERY_NAME(vehicle: EntityHandle, liveryIndex: int): string
	/**  **/
	function GET_VEHICLE_MOD_MODIFIER_VALUE(vehicle: EntityHandle, modType: int, modIndex: int): int
	/** Can be used for IS_DLC_VEHICLE_MOD and GET_DLC_VEHICLE_MOD_LOCK_HASH **/
	function GET_VEHICLE_MOD_IDENTIFIER_HASH(vehicle: EntityHandle, modType: int, modIndex: int): Hash
	/**  **/
	function PRELOAD_VEHICLE_MOD(vehicle: EntityHandle, modType: int, modIndex: int): void
	/**  **/
	function HAS_PRELOAD_MODS_FINISHED(vehicle: EntityHandle): boolean
	/**  **/
	function RELEASE_PRELOAD_MODS(vehicle: EntityHandle): void
	/** Sets the tire smoke's color of this vehicle.
	
	vehicle: The vehicle that is the target of this method.
	r: The red level in the RGB color code.
	g: The green level in the RGB color code.
	b: The blue level in the RGB color code.
	
	Note:
	setting r,g,b to 0 will give the car independance day tyre smoke **/
	function SET_VEHICLE_TYRE_SMOKE_COLOR(vehicle: EntityHandle, r: int, g: int, b: int): void
	/**  **/
	function GET_VEHICLE_TYRE_SMOKE_COLOR(vehicle: EntityHandle, r: IntPointer, g: IntPointer, b: IntPointer): void
	/** enum WindowTints
	{
	 WINDOWTINT_NONE,
	  WINDOWTINT_PURE_BLACK,
	    WINDOWTINT_DARKSMOKE,
	 WINDOWTINT_LIGHTSMOKE,
	    WINDOWTINT_STOCK,
	 WINDOWTINT_LIMO,
	  WINDOWTINT_GREEN
	};
	Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json **/
	function SET_VEHICLE_WINDOW_TINT(vehicle: EntityHandle, tint: int): void
	/**  **/
	function GET_VEHICLE_WINDOW_TINT(vehicle: EntityHandle): int
	/**  **/
	function GET_NUM_VEHICLE_WINDOW_TINTS(): int
	/** What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific. **/
	function GET_VEHICLE_COLOR(vehicle: EntityHandle, r: IntPointer, g: IntPointer, b: IntPointer): void
	/** Some kind of flags. **/
	function GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(vehicle: EntityHandle): int
	/** iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
	if (iVar3 == joaat("weapon_stickybomb"))
	{
		func_171(726);
		iLocal_260 = 1;
	} **/
	function GET_VEHICLE_CAUSE_OF_DESTRUCTION(vehicle: EntityHandle): Hash
	/** Used for helis. **/
	function OVERRIDE_PLANE_DAMAGE_THREHSOLD(vehicle: EntityHandle, health: float): void
	/** From the driver's perspective, is the left headlight broken. **/
	function GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(vehicle: EntityHandle): boolean
	/** From the driver's perspective, is the right headlight broken. **/
	function GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(vehicle: EntityHandle): boolean
	/** Returns true when both headlights are broken. This does not include extralights. **/
	function GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(vehicle: EntityHandle): boolean
	/**  **/
	function MODIFY_VEHICLE_TOP_SPEED(vehicle: EntityHandle, value: float): void
	/** To reset the max speed, set the `speed` value to `0.0` or lower. **/
	function SET_VEHICLE_MAX_SPEED(vehicle: EntityHandle, speed: float): void
	/** Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
	May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho. **/
	function SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(vehicle: EntityHandle, p1: boolean): void
	/** Sets some bit and float of vehicle. float is >= 0 **/
	function SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(vehicle: EntityHandle, toggle: boolean, p2: float): void
	/**  **/
	function ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float): int
	/**  **/
	function REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(p0: int): void
	/**  **/
	function IS_ANY_PED_RAPPELLING_FROM_HELI(vehicle: EntityHandle): boolean
	/** <1.0 - Decreased torque
	=1.0 - Default torque
	>1.0 - Increased torque
	
	Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
	
	value - is between 0.2 and 1.8 in the decompiled scripts. 
	
	This needs to be called every frame to take effect. **/
	function SET_VEHICLE_CHEAT_POWER_INCREASE(vehicle: EntityHandle, value: float): void
	/**  **/
	function SET_VEHICLE_INFLUENCES_WANTED_LEVEL(p0: any, p1: boolean): void
	/** Sets the wanted state of this vehicle. **/
	function SET_VEHICLE_IS_WANTED(vehicle: EntityHandle, state: boolean): void
	/** Sets the boat boom position for the `TR3` trailer.
	Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
	To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO **/
	function SWING_BOAT_BOOM_TO_RATIO(vehicle: EntityHandle, ratio: float): void
	/** Same call as ALLOW_BOAT_BOOM_TO_ANIMATE **/
	function SWING_BOAT_BOOM_FREELY(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function ALLOW_BOAT_BOOM_TO_ANIMATE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_BOAT_BOOM_POSITION_RATIO(vehicle: EntityHandle): float
	/**  **/
	function DISABLE_PLANE_AILERON(vehicle: EntityHandle, p1: boolean, p2: boolean): void
	/** Returns true when in a vehicle, false whilst entering/exiting. **/
	function GET_IS_VEHICLE_ENGINE_RUNNING(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_USE_ALTERNATE_HANDLING(vehicle: EntityHandle, toggle: boolean): void
	/** Only works on bikes, both X and Y work in the -1 - 1 range.
	
	X forces the bike to turn left or right (-1, 1)
	Y forces the bike to lean to the left or to the right (-1, 1)
	
	Example with X -1/Y 1
	http://i.imgur.com/TgIuAPJ.jpg **/
	function SET_BIKE_ON_STAND(vehicle: EntityHandle, x: float, y: float): void
	/**  **/
	function SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function LOCK_DOORS_WHEN_NO_LONGER_NEEDED(vehicle: EntityHandle): void
	/**  **/
	function SET_LAST_DRIVEN_VEHICLE(vehicle: EntityHandle): void
	/**  **/
	function GET_LAST_DRIVEN_VEHICLE(): EntityHandle
	/**  **/
	function CLEAR_LAST_DRIVEN_VEHICLE(): void
	/**  **/
	function SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(plane: EntityHandle, height: int): void
	/**  **/
	function SET_VEHICLE_LOD_MULTIPLIER(vehicle: EntityHandle, multiplier: float): void
	/**  **/
	function SET_VEHICLE_CAN_SAVE_IN_GARAGE(vehicle: EntityHandle, toggle: boolean): void
	/** Also includes some "turnOffBones" when vehicle mods are installed. **/
	function GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(vehicle: EntityHandle): int
	/**  **/
	function GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(vehicle: EntityHandle): int
	/**  **/
	function SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(p0: any, p1: boolean): void
	/** Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events **/
	function SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(vehicle: EntityHandle, toggle: boolean): void
	/** Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle. **/
	function COPY_VEHICLE_DAMAGES(sourceVehicle: EntityHandle, targetVehicle: EntityHandle): void
	/**  **/
	function DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS(): void
	/**  **/
	function SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(distance: float): void
	/** Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
	
	WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z); **/
	function SET_VEHICLE_SHOOT_AT_TARGET(driver: EntityHandle, entity: EntityHandle, xTarget: float, yTarget: float, zTarget: float): void
	/**  **/
	function GET_VEHICLE_LOCK_ON_TARGET(vehicle: EntityHandle, entity: Address): boolean
	/**  **/
	function SET_FORCE_HD_VEHICLE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(vehicle: EntityHandle, p1: float): void
	/**  **/
	function GET_VEHICLE_PLATE_TYPE(vehicle: EntityHandle): int
	/** in script hook .net 
	
	Vehicle v = ...;
	Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle); **/
	function TRACK_VEHICLE_VISIBILITY(vehicle: EntityHandle): void
	/** must be called after TRACK_VEHICLE_VISIBILITY 
	
	it's not instant so probabilly must pass an 'update' to see correct result. **/
	function IS_VEHICLE_VISIBLE(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_GRAVITY(vehicle: EntityHandle, toggle: boolean): void
	/** Enable/Disables global slipstream physics **/
	function SET_ENABLE_VEHICLE_SLIPSTREAMING(toggle: boolean): void
	/**  **/
	function SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(toggle: boolean): void
	/** Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup). **/
	function GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(vehicle: EntityHandle): float
	/** Returns true if the vehicle is being slipstreamed by another vehicle **/
	function IS_VEHICLE_PRODUCING_SLIP_STREAM(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_INACTIVE_DURING_PLAYBACK(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_ACTIVE_DURING_PLAYBACK(vehicle: EntityHandle, toggle: boolean): void
	/** Returns false if the vehicle has the FLAG_NO_RESPRAY flag set. **/
	function IS_VEHICLE_SPRAYABLE(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_ENGINE_CAN_DEGRADE(vehicle: EntityHandle, toggle: boolean): void
	/** Adds some kind of shadow to the vehicle.
	
	p1 and p2 use values from 0-255 and both make the shadow darker the lower the value is. -1 disables the effect. **/
	function DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(vehicle: EntityHandle, p1: int, p2: int): void
	/** Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES. **/
	function ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(vehicle: EntityHandle): void
	/**  **/
	function IS_PLANE_LANDING_GEAR_INTACT(plane: EntityHandle): boolean
	/**  **/
	function ARE_PLANE_PROPELLERS_INTACT(plane: EntityHandle): boolean
	/**  **/
	function SET_PLANE_PROPELLER_HEALTH(plane: EntityHandle, health: float): boolean
	/**  **/
	function SET_VEHICLE_CAN_DEFORM_WHEELS(vehicle: EntityHandle, toggle: boolean): void
	/** Only returns true if the vehicle was marked as stolen with SET_VEHICLE_IS_STOLEN. **/
	function IS_VEHICLE_STOLEN(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_IS_STOLEN(vehicle: EntityHandle, isStolen: boolean): void
	/** This native sets the turbulence multiplier. It only works for planes.
	0.0 = no turbulence at all.
	1.0 = heavy turbulence.
	Works by just calling it once, does not need to be called every tick. **/
	function SET_PLANE_TURBULENCE_MULTIPLIER(vehicle: EntityHandle, multiplier: float): void
	/**  **/
	function ARE_WINGS_OF_PLANE_INTACT(plane: EntityHandle): boolean
	/** This native doesn't seem to do anything, might be a debug-only native.
	
	Confirmed, it is a debug native. **/
	function ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(vehicle: EntityHandle): void
	/**  **/
	function DETACH_VEHICLE_FROM_CARGOBOB(vehicle: EntityHandle, cargobob: EntityHandle): void
	/**  **/
	function DETACH_VEHICLE_FROM_ANY_CARGOBOB(vehicle: EntityHandle): boolean
	/**  **/
	function DETACH_ENTITY_FROM_CARGOBOB(cargobob: EntityHandle, entity: EntityHandle): boolean
	/**  **/
	function IS_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob: EntityHandle, vehicleAttached: EntityHandle): boolean
	/** Returns attached vehicle (Vehicle in parameter must be cargobob) **/
	function GET_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob: EntityHandle): EntityHandle
	/**  **/
	function GET_ENTITY_ATTACHED_TO_CARGOBOB(p0: any): EntityHandle
	/**  **/
	function ATTACH_VEHICLE_TO_CARGOBOB(vehicle: EntityHandle, cargobob: EntityHandle, p2: int, x: float, y: float, z: float): void
	/**  **/
	function ATTACH_ENTITY_TO_CARGOBOB(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void
	/** Stops cargobob from being able to detach the attached vehicle. **/
	function SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(cargobob: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(p0: any, p1: any): void
	/**  **/
	function CAN_CARGOBOB_PICK_UP_ENTITY(p0: any, p1: any): boolean
	/** Gets the position of the cargobob hook, in world coords. **/
	function GET_ATTACHED_PICK_UP_HOOK_POSITION(cargobob: EntityHandle): Vector3
	/** Returns true only when the hook is active, will return false if the magnet is active **/
	function DOES_CARGOBOB_HAVE_PICK_UP_ROPE(cargobob: EntityHandle): boolean
	/** Drops the Hook/Magnet on a cargobob
	
	state
	enum eCargobobHook
	{
	  CARGOBOB_HOOK = 0,
	    CARGOBOB_MAGNET = 1,
	}; **/
	function CREATE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob: EntityHandle, state: int): void
	/** Retracts the hook on the cargobob.
	
	Note: after you retract it the natives for dropping the hook no longer work **/
	function REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob: EntityHandle): void
	/** min: 1.9f, max: 100.0f **/
	function SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(cargobob: EntityHandle, length1: float, length2: float, p3: boolean): void
	/**  **/
	function SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(p0: any, p1: any, p2: any): void
	/**  **/
	function SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(p0: any, p1: any): void
	/**  **/
	function SET_CARGOBOB_PICKUP_ROPE_TYPE(p0: any, p1: any): void
	/** Returns true only when the magnet is active, will return false if the hook is active **/
	function DOES_CARGOBOB_HAVE_PICKUP_MAGNET(cargobob: EntityHandle): boolean
	/** Won't attract or magnetize to any helicopters or planes of course, but that's common sense. **/
	function SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(cargobob: EntityHandle, isActive: boolean): void
	/**  **/
	function SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(cargobob: EntityHandle, strength: float): void
	/**  **/
	function SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(cargobob: EntityHandle, p1: float): void
	/**  **/
	function SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(cargobob: EntityHandle, p1: float): void
	/**  **/
	function SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(cargobob: EntityHandle, p1: float): void
	/**  **/
	function SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(cargobob: EntityHandle, p1: float): void
	/**  **/
	function SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(vehicle: EntityHandle, p1: float): void
	/**  **/
	function SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(vehicle: EntityHandle, cargobob: EntityHandle): void
	/**  **/
	function SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(vehicle: EntityHandle, p1: boolean, p2: boolean): void
	/**  **/
	function SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function DOES_VEHICLE_HAVE_WEAPONS(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(vehicle: EntityHandle, p1: boolean): void
	/** Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function DISABLE_VEHICLE_WEAPON(disabled: boolean, weaponHash: Hash, vehicle: EntityHandle, owner: EntityHandle): void
	/** Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function IS_VEHICLE_WEAPON_DISABLED(weaponHash: Hash, vehicle: EntityHandle, owner: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_USED_FOR_PILOT_SCHOOL(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(vehicle: EntityHandle, toggle: boolean): void
	/** Returns an int
	
	Vehicle Classes:
	0: Compacts
	1: Sedans
	2: SUVs
	3: Coupes
	4: Muscle
	5: Sports Classics
	6: Sports
	7: Super
	8: Motorcycles
	9: Off-road
	10: Industrial
	11: Utility
	12: Vans
	13: Cycles
	14: Boats
	15: Helicopters
	16: Planes
	17: Service
	18: Emergency
	19: Military
	20: Commercial
	21: Trains
	
	char buffer[128];
	std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));
	
	const char* className = HUD::_GET_LABEL_TEXT(buffer); **/
	function GET_VEHICLE_CLASS(vehicle: EntityHandle): int
	/** char buffer[128];
	std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));
	
	const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
	
	Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json **/
	function GET_VEHICLE_CLASS_FROM_NAME(modelHash: Hash): int
	/**  **/
	function SET_PLAYERS_LAST_VEHICLE(vehicle: EntityHandle): void
	/**  **/
	function SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(vehicle: EntityHandle, p1: float): void
	/** Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
	
	youtu.be/3arlUxzHl5Y 
	i.imgur.com/WrNpYFs.jpg **/
	function SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(vehicle: EntityHandle, toggle: boolean): void
	/** Seems to copy some values in vehicle **/
	function SET_VEHICLE_IMPATIENCE_TIMER(vehicle: EntityHandle, p1: any): void
	/** Use the "AIHandling" string found in handling.meta **/
	function SET_VEHICLE_HANDLING_OVERRIDE(vehicle: EntityHandle, hash: Hash): void
	/** Max value is 32767 **/
	function SET_VEHICLE_EXTENDED_REMOVAL_RANGE(vehicle: EntityHandle, range: int): void
	/**  **/
	function SET_VEHICLE_STEERING_BIAS_SCALAR(p0: any, p1: float): void
	/** value between 0.0 and 1.0 **/
	function SET_HELI_CONTROL_LAGGING_RATE_SCALAR(helicopter: EntityHandle, multiplier: float): void
	/** Seems to be related to the metal parts, not tyres (like i was expecting lol) **/
	function SET_VEHICLE_FRICTION_OVERRIDE(vehicle: EntityHandle, friction: float): void
	/**  **/
	function SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function ARE_PLANE_CONTROL_PANELS_INTACT(vehicle: EntityHandle, p1: boolean): boolean
	/**  **/
	function SET_VEHICLE_CEILING_HEIGHT(vehicle: EntityHandle, height: float): void
	/**  **/
	function SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function CLEAR_VEHICLE_ROUTE_HISTORY(vehicle: EntityHandle): void
	/**  **/
	function DOES_VEHICLE_EXIST_WITH_DECORATOR(decorator: string): EntityHandle
	/** Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
	Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn't enable that feature (or trigger script events related to it). **/
	function SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(vehicle: EntityHandle, toggle: boolean): void
	/** index: 0 - 1
	
	Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2 **/
	function SET_VEHICLE_EXCLUSIVE_DRIVER(vehicle: EntityHandle, ped: EntityHandle, index: int): void
	/**  **/
	function IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(ped: EntityHandle, vehicle: EntityHandle, outIndex: IntPointer): boolean
	/**  **/
	function DISABLE_INDIVIDUAL_PLANE_PROPELLER(vehicle: EntityHandle, propeller: int): void
	/**  **/
	function SET_VEHICLE_FORCE_AFTERBURNER(vehicle: EntityHandle, toggle: boolean): void
	/** R* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc) **/
	function SET_DONT_PROCESS_VEHICLE_GLASS(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_DISABLE_WANTED_CONES_RESPONSE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(vehicle: EntityHandle, p1: float): void
	/**  **/
	function SET_VEHICLE_READY_FOR_CLEANUP(p0: any): void
	/** Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles. **/
	function SET_DISTANT_CARS_ENABLED(toggle: boolean): void
	/** Sets the color of the neon lights of the specified vehicle. **/
	function SET_VEHICLE_NEON_COLOUR(vehicle: EntityHandle, r: int, g: int, b: int): void
	/** Index references CVehicleModelColor **/
	function SET_VEHICLE_NEON_INDEX_COLOUR(vehicle: EntityHandle, index: int): void
	/** Gets the color of the neon lights of the specified vehicle.
	
	See SET_VEHICLE_NEON_COLOUR (0x8E0A582209A62695) for more information **/
	function GET_VEHICLE_NEON_COLOUR(vehicle: EntityHandle, r: IntPointer, g: IntPointer, b: IntPointer): void
	/** Sets the neon lights of the specified vehicle on/off.
	
	Indices:
	0 = Left
	1 = Right
	2 = Front
	3 = Back **/
	function SET_VEHICLE_NEON_ENABLED(vehicle: EntityHandle, index: int, toggle: boolean): void
	/** indices:
	0 = Left
	1 = Right
	2 = Front
	3 = Back **/
	function GET_VEHICLE_NEON_ENABLED(vehicle: EntityHandle, index: int): boolean
	/**  **/
	function SET_AMBIENT_VEHICLE_NEON_ENABLED(p0: boolean): void
	/**  **/
	function SUPPRESS_NEONS_ON_VEHICLE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_DISABLE_SUPERDUMMY(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function REQUEST_VEHICLE_DIAL(vehicle: EntityHandle): void
	/** Seems related to vehicle health, like the one in IV.
	Max 1000, min 0.
	Vehicle does not necessarily explode or become undrivable at 0. **/
	function GET_VEHICLE_BODY_HEALTH(vehicle: EntityHandle): float
	/** p2 often set to 1000.0 in the decompiled scripts. **/
	function SET_VEHICLE_BODY_HEALTH(vehicle: EntityHandle, value: float): void
	/** Outputs 2 Vector3's.
	Scripts check if out2.x - out1.x > someshit.x
	Could be suspension related, as in max suspension height and min suspension height, considering the natives location. **/
	function GET_VEHICLE_SIZE(vehicle: EntityHandle, out1: Vector3Pointer, out2: Vector3Pointer): void
	/** Gets the height of the vehicle's suspension.
	The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
	0.000 is the stock suspension.
	0.008 is Ultra Suspension. **/
	function GET_FAKE_SUSPENSION_LOWERING_AMOUNT(vehicle: EntityHandle): float
	/**  **/
	function SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(multiplier: float): void
	/**  **/
	function GET_NUMBER_OF_VEHICLE_DOORS(vehicle: EntityHandle): int
	/** If false, lowers hydraulics (if raised) and disables hydraulics controls. If true, raises hydraulics and enables hydraulics controls.
	
	Only used once in each carmod script, on a car that does not have hydraulics to begin with. **/
	function SET_HYDRAULICS_CONTROL(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_CAN_ADJUST_GROUND_CLEARANCE(vehicle: EntityHandle, p1: boolean): void
	/** 0 min 100 max
	starts at 100
	Seams to have health zones
	Front of vehicle when damaged goes from 100-50 and stops at 50.
	Rear can be damaged from 100-0
	Only tested with two cars.
	
	any idea how this differs from the first one?
	
	--
	May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)
	
	example:
	
	v_F = ENTITY::GET_ENTITY_MODEL(v_3);
	if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
	    if (VEHICLE::_GET_VEHICLE_BODY_HEALTH_2(v_3) <= 1.0) {
	        NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);
	    }
	} **/
	function GET_VEHICLE_HEALTH_PERCENTAGE(vehicle: EntityHandle, maxEngineHealth: float, maxPetrolTankHealth: float, maxBodyHealth: float, maxMainRotorHealth: float, maxTailRotorHealth: float, maxUnkHealth: float): float
	/**  **/
	function GET_VEHICLE_IS_MERCENARY(vehicle: EntityHandle): boolean
	/**  **/
	function SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(vehicle: EntityHandle, p1: boolean): void
	/**  **/
	function SET_VEHICLE_KERS_ALLOWED(vehicle: EntityHandle, toggle: boolean): void
	/** Returns true if the vehicle has a HF_HAS_KERS (strHandlingFlags 0x4) handing flag set, for instance the lectro/vindicator bikes or the open wheelers. **/
	function GET_VEHICLE_HAS_KERS(vehicle: EntityHandle): boolean
	/**  **/
	function SET_PLANE_RESIST_TO_EXPLOSION(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_HELI_RESIST_TO_EXPLOSION(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_DISABLE_BMX_EXTRA_TRICK_FORCES(p0: any): void
	/** Works only on vehicles that support hydraulics. **/
	function SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(vehicle: EntityHandle, wheelId: int, value: float): void
	/**  **/
	function GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(vehicle: EntityHandle, wheelId: int): float
	/**  **/
	function SET_CAN_USE_HYDRAULICS(vehicle: EntityHandle, toggle: boolean): void
	/** States:
	4 = raise
	5 = lower
	6 = jump **/
	function SET_HYDRAULIC_VEHICLE_STATE(vehicle: EntityHandle, state: int): void
	/** Sets vehicle wheel hydraulic states transition. Known states:
	0 - reset
	1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
	2 - jump using wheel **/
	function SET_HYDRAULIC_WHEEL_STATE(vehicle: EntityHandle, wheelId: int, state: int, value: float, p4: any): void
	/**  **/
	function HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(p0: any, p1: any): boolean
	/**  **/
	function CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(vehicle: EntityHandle): void
	/** Controls how fast bobbleheads and tsurikawas move on each axis.
	
	p2 is probably z, but changing that value didn't seem to have a noticeable effect. **/
	function SET_VEHICLE_BOBBLEHEAD_VELOCITY(x: float, y: float, p2: float): void
	/**  **/
	function GET_VEHICLE_IS_DUMMY(p0: any): boolean
	/**  **/
	function SET_VEHICLE_DAMAGE_SCALE(vehicle: EntityHandle, p1: float): boolean
	/**  **/
	function SET_VEHICLE_WEAPON_DAMAGE_SCALE(vehicle: EntityHandle, multiplier: float): boolean
	/**  **/
	function SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(p0: any, p1: any): boolean
	/**  **/
	function SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(p0: any, p1: any): void
	/** When enabled, the player won't fall off the bike when landing from large heights. **/
	function SET_BIKE_EASY_TO_LAND(vehicle: EntityHandle, toggle: boolean): void
	/** Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
	Doesn't work for planes/helis. **/
	function SET_INVERT_VEHICLE_CONTROLS(vehicle: EntityHandle, state: boolean): void
	/** Disables the screen effects and sound effects when driving over a speed boost pad. **/
	function SET_SPEED_BOOST_EFFECT_DISABLED(disabled: boolean): void
	/** Disables the screen effects and sound effects when driving over a slowdown pad. **/
	function SET_SLOW_DOWN_EFFECT_DISABLED(disabled: boolean): void
	/**  **/
	function SET_FORMATION_LEADER(vehicle: EntityHandle, x: float, y: float, z: float, p4: float): void
	/** Resets the effect of SET_FORMATION_LEADER **/
	function RESET_FORMATION_LEADER(): void
	/**  **/
	function GET_IS_BOAT_CAPSIZED(vehicle: EntityHandle): boolean
	/**  **/
	function SET_ALLOW_RAMMING_SOOP_OR_RAMP(p0: any, p1: any): void
	/**  **/
	function SET_SCRIPT_RAMP_IMPULSE_SCALE(vehicle: EntityHandle, impulseScale: float): void
	/** doorId: see SET_VEHICLE_DOOR_SHUT **/
	function GET_IS_DOOR_VALID(vehicle: EntityHandle, doorId: int): boolean
	/**  **/
	function SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(vehicle: EntityHandle, seconds: float): void
	/**  **/
	function GET_HAS_ROCKET_BOOST(vehicle: EntityHandle): boolean
	/**  **/
	function IS_ROCKET_BOOST_ACTIVE(vehicle: EntityHandle): boolean
	/**  **/
	function SET_ROCKET_BOOST_ACTIVE(vehicle: EntityHandle, active: boolean): void
	/**  **/
	function GET_HAS_RETRACTABLE_WHEELS(vehicle: EntityHandle): boolean
	/**  **/
	function GET_IS_WHEELS_RETRACTED(vehicle: EntityHandle): boolean
	/**  **/
	function SET_WHEELS_EXTENDED_INSTANTLY(vehicle: EntityHandle): void
	/**  **/
	function SET_WHEELS_RETRACTED_INSTANTLY(vehicle: EntityHandle): void
	/** Returns true if the vehicle has the FLAG_JUMPING_CAR flag set. **/
	function GET_CAR_HAS_JUMP(vehicle: EntityHandle): boolean
	/** Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000). **/
	function SET_USE_HIGHER_CAR_JUMP(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(vehicle: EntityHandle, toggle: boolean): void
	/** Set vehicle's primary mounted weapon 2 ammo. For example, use it on APC.
	For example, you can "remove" any vehicle weapon from any vehicle.
	ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho) **/
	function SET_VEHICLE_WEAPON_RESTRICTED_AMMO(vehicle: EntityHandle, weaponIndex: int, capacity: int): void
	/**  **/
	function GET_VEHICLE_WEAPON_RESTRICTED_AMMO(vehicle: EntityHandle, weaponIndex: int): int
	/**  **/
	function GET_VEHICLE_HAS_PARACHUTE(vehicle: EntityHandle): boolean
	/**  **/
	function GET_VEHICLE_CAN_DEPLOY_PARACHUTE(vehicle: EntityHandle): boolean
	/**  **/
	function VEHICLE_START_PARACHUTING(vehicle: EntityHandle, active: boolean): void
	/**  **/
	function IS_VEHICLE_PARACHUTE_DEPLOYED(vehicle: EntityHandle): boolean
	/**  **/
	function VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(p0: any, p1: any): void
	/**  **/
	function VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(p0: any, p1: any): void
	/**  **/
	function VEHICLE_SET_JET_WASH_FORCE_ENABLED(p0: any): void
	/**  **/
	function SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(vehicle: EntityHandle, toggle: boolean): void
	/** Used for blazer5. Changes the quadbike-jetski transformation input from raise/lower convertible roof (hold H by default) to horn (press E by default.) **/
	function SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(toggle: boolean): void
	/** Parachute models:
	- sr_prop_specraces_para_s_01
	- imp_prop_impexp_para_s (SecuroServ; Default)
	Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won't get stuck mid-air when using an umbrella. **/
	function VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(vehicle: EntityHandle, modelHash: Hash): void
	/** Variations available for the generic parachute (sr_prop_specraces_para_s_01):
	- 0: Rainbow
	- 1: Red
	- 2: White, blue, yellow
	- 3: Black, red, white
	- 4: Red, white, blue
	- 5: Blue
	- 6: Black
	- 7: Black, yellow **/
	function VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(vehicle: EntityHandle, textureVariation: int): void
	/**  **/
	function VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(p0: any, p1: any): int
	/**  **/
	function VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(p0: any, p1: any): int
	/**  **/
	function VEHICLE_SET_OVERRIDE_SIDE_RATIO(p0: any, p1: any): int
	/**  **/
	function GET_ALL_VEHICLES(vehsStruct: Address): int
	/**  **/
	function SET_CARGOBOB_EXTA_PICKUP_RANGE(p0: any, p1: any): void
	/**  **/
	function SET_OVERRIDE_VEHICLE_DOOR_TORQUE(p0: any, p1: any, p2: any): void
	/** Enables/disables the ability to wheelie on motorcycles. **/
	function SET_WHEELIE_ENABLED(vehicle: EntityHandle, enabled: boolean): void
	/**  **/
	function SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(p0: any, p1: any): void
	/**  **/
	function SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(vehicle: EntityHandle, value: float): void
	/**  **/
	function SET_TRAILER_ATTACHMENT_ENABLED(p0: any, p1: any): void
	/**  **/
	function SET_ROCKET_BOOST_FILL(vehicle: EntityHandle, percentage: float): void
	/** Set state to true to extend the wings, false to retract them. **/
	function SET_GLIDER_ACTIVE(vehicle: EntityHandle, state: boolean): void
	/** Resets the vehicle's turret to its default position in scripted cameras. Doesn't seem to affect turrets that are occupied by a ped. **/
	function SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(vehicle: EntityHandle, shouldReset: boolean): void
	/**  **/
	function SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(vehicle: EntityHandle, disable: boolean): void
	/**  **/
	function SET_GROUND_EFFECT_REDUCES_DRAG(toggle: boolean): void
	/** Disables collision for this vehicle (maybe it also supports other entities, not sure).
	Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
	Example: https://streamable.com/6n45d5
	Not sure if there is a native (and if so, which one) that resets the collisions. **/
	function SET_DISABLE_MAP_COLLISION(vehicle: EntityHandle): void
	/**  **/
	function SET_DISABLE_PED_STAND_ON_TOP(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_VEHICLE_DAMAGE_SCALES(vehicle: EntityHandle, p1: any, p2: any, p3: any, p4: any): void
	/**  **/
	function SET_PLANE_SECTION_DAMAGE_SCALE(vehicle: EntityHandle, p1: any, p2: any): void
	/** Stops the cargobob from being able to attach any vehicle **/
	function SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(vehicle: EntityHandle, toggle: boolean): void
	/** Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane. **/
	function SET_VEHICLE_BOMB_AMMO(vehicle: EntityHandle, bombCount: int): void
	/** Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane. **/
	function GET_VEHICLE_BOMB_AMMO(vehicle: EntityHandle): int
	/** Similar to SET_VEHICLE_BOMB_AMMO, this sets the amount of countermeasures that are present on this vehicle.
	Use GET_VEHICLE_BOMB_AMMO to get the current amount. **/
	function SET_VEHICLE_COUNTERMEASURE_AMMO(vehicle: EntityHandle, counterMeasureCount: int): void
	/** Similar to `GET_VEHICLE_BOMB_AMMO`, this gets the amount of countermeasures that are present on this vehicle.
	Use SET_VEHICLE_COUNTERMEASURE_AMMO to set the current amount. **/
	function GET_VEHICLE_COUNTERMEASURE_AMMO(vehicle: EntityHandle): int
	/**  **/
	function SET_HELI_COMBAT_OFFSET(vehicle: EntityHandle, x: float, y: float, z: float): void
	/** Used in decompiled scripts in combination with GET_VEHICLE_SIZE
	p7 is usually 2
	p8 is usually 1 **/
	function GET_CAN_VEHICLE_BE_PLACED_HERE(vehicle: EntityHandle, x: float, y: float, z: float, rotX: float, rotY: float, rotZ: float, p7: int, p8: any): boolean
	/** Sets a flag on heli and another vehicle type. **/
	function SET_DISABLE_AUTOMATIC_CRASH_TASK(vehicle: EntityHandle, toggle: boolean): void
	/** Used in conjunction with SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, in Rockstar's scripts. Using this will instantly transform the vehicle into hover mode starting from the given ratio (ranging from 0.0 to 1.0, values greater than 1.0 will put the vehicle into a glitched state.) If this is not used alongside SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, the vehicle will automatically transform back into car mode.
	
	Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
	
	Example:
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
	VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
	VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f); **/
	function SET_SPECIAL_FLIGHT_MODE_RATIO(vehicle: EntityHandle, ratio: float): void
	/** Used in conjunction with SET_SPECIAL_FLIGHT_MODE_RATIO, in Rockstar's scripts. The vehicle will transform into the given targetRatio, starting from the vehicle's current hover mode transform ratio (which can also be manually set by SET_SPECIAL_FLIGHT_MODE_RATIO,) i.e. setting targetRatio to 0.0 while the vehicle is in hover mode will transform the vehicle into car mode, likewise setting targetRatio to 1.0 while the vehicle is in car mode will transform the vehicle into hover mode, and if the current transform ratio is set to 0.7 while targetRatio is 1.0 the vehicle will transform into hover mode starting from being already partially transformed.
	
	targetRatio is recommended to always be 0.0 or 1.0, otherwise the vehicle will transform into a glitched state.
	
	Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
	
	Example:
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
	VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
	VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f); **/
	function SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(vehicle: EntityHandle, targetRatio: float): void
	/** It will override the ability to transform deluxo. For oppressor it will work just like SET_DISABLE_HOVER_MODE_FLIGHT **/
	function SET_SPECIAL_FLIGHT_MODE_ALLOWED(vehicle: EntityHandle, toggle: boolean): void
	/** Disables "wings" for some flying vehicles. Works only for oppressor _2_ and deluxo.
	For deluxo it just immediately removes vehicle's "wings" and you will be not able to fly up.
	For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.
	But for opressor 2 you still can fly if you somehow get back in the air. **/
	function SET_DISABLE_HOVER_MODE_FLIGHT(vehicle: EntityHandle, toggle: boolean): void
	/** Checks if Chernobog's stabilizers are deployed or not.
	These are the metal supports that allow it to fire.
	This native only applies to the Chernobog. **/
	function GET_OUTRIGGERS_DEPLOYED(vehicle: EntityHandle): boolean
	/** Native is significantly more complicated than simply generating a random vector & length.
	The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible **/
	function FIND_SPAWN_COORDINATES_FOR_HELI(ped: EntityHandle): Vector3
	/** Only used with the "akula" and "annihilator2" in the decompiled native scripts. **/
	function SET_DEPLOY_FOLDING_WINGS(vehicle: EntityHandle, deploy: boolean, p2: boolean): void
	/** Only used with the "akula" and "annihilator2" in the decompiled native scripts. **/
	function ARE_FOLDING_WINGS_DEPLOYED(vehicle: EntityHandle): boolean
	/**  **/
	function SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(vehicle: EntityHandle, toggle: boolean): void
	/** Toggles specific flag on turret **/
	function SET_TURRET_HIDDEN(vehicle: EntityHandle, index: int, toggle: boolean): void
	/**  **/
	function SET_HOVER_MODE_WING_RATIO(vehicle: EntityHandle, ratio: float): void
	/** Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though. **/
	function SET_DISABLE_TURRET_MOVEMENT(vehicle: EntityHandle, turretId: int): void
	/**  **/
	function SET_FORCE_FIX_LINK_MATRICES(vehicle: EntityHandle): void
	/** Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted. **/
	function SET_TRANSFORM_RATE_FOR_ANIMATION(vehicle: EntityHandle, transformRate: float): void
	/** When set to true, the key to transform a car to submarine mode changes from raise/lower convertible roof (hold H by default) to special vehicle transform (press X by default.) **/
	function SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(vehicle: EntityHandle, toggle: boolean): void
	/** Does nothing. It's a nullsub. **/
	function SET_VEHICLE_COMBAT_MODE(toggle: boolean): void
	/** Does nothing. It's a nullsub. **/
	function SET_VEHICLE_DETONATION_MODE(toggle: boolean): void
	/** Does nothing. It's a nullsub. **/
	function SET_VEHICLE_SHUNT_ON_STICK(toggle: boolean): void
	/**  **/
	function GET_IS_VEHICLE_SHUNTING(vehicle: EntityHandle): boolean
	/**  **/
	function GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(vehicle: EntityHandle): boolean
	/** Returns last vehicle that was rammed by the given vehicle using the shunt boost. **/
	function GET_LAST_SHUNT_VEHICLE(vehicle: EntityHandle): EntityHandle
	/**  **/
	function SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(toggle: boolean): void
	/**  **/
	function SET_OVERRIDE_NITROUS_LEVEL(vehicle: EntityHandle, toggle: boolean, level: float, power: float, rechargeTime: float, disableSound: boolean): void
	/**  **/
	function SET_INCREASE_WHEEL_CRUSH_DAMAGE(vehicle: EntityHandle, toggle: boolean): void
	/** Sets some global vehicle related bool **/
	function SET_DISABLE_WEAPON_BLADE_FORCES(toggle: boolean): void
	/** Changes the car jump control to require a double-tap to activate. **/
	function SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(toggle: boolean): void
	/** Returns true only if the "tombstone" bone is attached to the vehicle, irrespective of "FLAG_HAS_TOMBSTONE" being present or not. Detaching the tombstone will return false. **/
	function GET_DOES_VEHICLE_HAVE_TOMBSTONE(vehicle: EntityHandle): boolean
	/** Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling **/
	function HIDE_TOMBSTONE(vehicle: EntityHandle, toggle: boolean): void
	/** Returns whether this vehicle is currently disabled by an EMP mine. **/
	function GET_IS_VEHICLE_DISABLED_BY_EMP(vehicle: EntityHandle): boolean
	/**  **/
	function SET_DISABLE_RETRACTING_WEAPON_BLADES(toggle: boolean): void
	/** Usable wheels:
	0: wheel_lf
	1: wheel_rf
	2: wheel_lm1
	3: wheel_rm1
	4: wheel_lr
	5: wheel_rr **/
	function GET_TYRE_HEALTH(vehicle: EntityHandle, wheelIndex: int): float
	/** SET_TYRE_WEAR_RATE must be active, otherwise values set to <1000.0f will default to 350.0f
	
	Usable wheels:
	0: wheel_lf
	1: wheel_rf
	2: wheel_lm1
	3: wheel_rm1
	4: wheel_lr
	5: wheel_rr **/
	function SET_TYRE_HEALTH(vehicle: EntityHandle, wheelIndex: int, health: float): void
	/** Returns the multiplier value from SET_TYRE_WEAR_RATE
	
	Usable wheels:
	0: wheel_lf
	1: wheel_rf
	2: wheel_lm1
	3: wheel_rm1
	4: wheel_lr
	5: wheel_rr **/
	function GET_TYRE_WEAR_RATE(vehicle: EntityHandle, wheelIndex: int): float
	/** Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be >0f.
	Default value in Rockstar's Open Wheel Race JSON's ("owrtws", "owrtwm", "owrtwh") is 1.0
	
	Usable wheels:
	0: wheel_lf
	1: wheel_rf
	2: wheel_lm1
	3: wheel_rm1
	4: wheel_lr
	5: wheel_rr **/
	function SET_TYRE_WEAR_RATE(vehicle: EntityHandle, wheelIndex: int, multiplier: float): void
	/** Controls how fast the tires wear out.
	
	Default values from Rockstar's Open Wheel Race JSON's:
	"owrtss" (Soft): 2.2
	"owrtsm" (Medium): 1.7
	"owrtsh" (Hard): 1.2
	
	Usable wheels:
	0: wheel_lf
	1: wheel_rf
	2: wheel_lm1
	3: wheel_rm1
	4: wheel_lr
	5: wheel_rr **/
	function SET_TYRE_WEAR_RATE_SCALE(vehicle: EntityHandle, wheelIndex: int, multiplier: float): void
	/** Controls how much traction the wheel loses.
	
	Default values from Rockstar's Open Wheel Race JSON's:
	"owrtds" (Soft): 0.05
	"owrtdm" (Medium): 0.45
	"owrtdh" (Hard): 0.8
	
	Usable wheels:
	0: wheel_lf
	1: wheel_rf
	2: wheel_lm1
	3: wheel_rm1
	4: wheel_lr
	5: wheel_rr **/
	function SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(vehicle: EntityHandle, wheelIndex: int, multiplier: float): void
	/**  **/
	function SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(vehicle: EntityHandle, p1: int): void
	/** Lowers the vehicle's stance. Only works for vehicles that have strAdvancedFlags 0x8000 and 0x4000000 set. **/
	function SET_REDUCED_SUSPENSION_FORCE(vehicle: EntityHandle, enable: boolean): void
	/**  **/
	function SET_DRIFT_TYRES(vehicle: EntityHandle, toggle: boolean): void
	/**  **/
	function GET_DRIFT_TYRES_SET(vehicle: EntityHandle): boolean
	/** Implemented only for trains. **/
	function NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(vehicle: EntityHandle, toggle: boolean): void
	/** Only used in R* Script fm_content_cargo **/
	function SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(vehicle: EntityHandle, p1: boolean): void
}

/** @noSelf **/
declare namespace WATER {
	/** This function set height to the value of z-axis of the water surface.
	
	This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
	
	note: seems to return true when you are in water **/
	function GET_WATER_HEIGHT(x: float, y: float, z: float, height: FloatPointer): boolean
	/**  **/
	function GET_WATER_HEIGHT_NO_WAVES(x: float, y: float, z: float, height: FloatPointer): boolean
	/**  **/
	function TEST_PROBE_AGAINST_WATER(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, result: Vector3Pointer): boolean
	/** enum eScriptWaterTestResult
	{
		SCRIPT_WATER_TEST_RESULT_NONE,
		SCRIPT_WATER_TEST_RESULT_WATER,
		SCRIPT_WATER_TEST_RESULT_BLOCKED,
	}; **/
	function TEST_PROBE_AGAINST_ALL_WATER(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, flags: int, waterHeight: FloatPointer): int
	/** See TEST_PROBE_AGAINST_ALL_WATER. **/
	function TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(x: float, y: float, z: float, flags: int, waterHeight: FloatPointer): int
	/** Sets the water height for a given position and radius.
	 **/
	function MODIFY_WATER(x: float, y: float, radius: float, height: float): void
	/**  **/
	function ADD_EXTRA_CALMING_QUAD(xLow: float, yLow: float, xHigh: float, yHigh: float, height: float): int
	/** p0 is the handle returned from ADD_EXTRA_CALMING_QUAD **/
	function REMOVE_EXTRA_CALMING_QUAD(p0: int): void
	/** Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
	
	Works only ~200 meters around the player. **/
	function SET_DEEP_OCEAN_SCALER(intensity: float): void
	/** Gets the aggressiveness factor of the ocean waves. **/
	function GET_DEEP_OCEAN_SCALER(): float
	/**  **/
	function SET_CALMED_WAVE_HEIGHT_SCALER(p0: float): void
	/** Sets the waves intensity back to original (1.0 in most cases). **/
	function RESET_DEEP_OCEAN_SCALER(): void
}

/** @noSelf **/
declare namespace WEAPON {
	/** Enables laser sight on any weapon.
	
	It doesn't work. Neither on tick nor OnKeyDown **/
	function ENABLE_LASER_SIGHT_RENDERING(toggle: boolean): void
	/**  **/
	function GET_WEAPON_COMPONENT_TYPE_MODEL(componentHash: Hash): Hash
	/** Returns the model of any weapon.
	
	Can also take an ammo hash?
	sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg})); **/
	function GET_WEAPONTYPE_MODEL(weaponHash: Hash): Hash
	/**  **/
	function GET_WEAPONTYPE_SLOT(weaponHash: Hash): Hash
	/**  **/
	function GET_WEAPONTYPE_GROUP(weaponHash: Hash): Hash
	/** Returns the amount of extra components the specified component has.
	Returns -1 if the component isn't of type CWeaponComponentVariantModel. **/
	function GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(componentHash: Hash): int
	/** Returns the model hash of the extra component at specified index. **/
	function GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(componentHash: Hash, extraComponentIndex: int): Hash
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_CURRENT_PED_WEAPON(ped: EntityHandle, weaponHash: Hash, bForceInHand: boolean): void
	/** The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
	p2 seems to be 1 most of the time.
	
	
	
	
	
	p2 is not implemented
	
	disassembly said that?
	 **/
	function GET_CURRENT_PED_WEAPON(ped: EntityHandle, weaponHash: Address, p2: boolean): boolean
	/**  **/
	function GET_CURRENT_PED_WEAPON_ENTITY_INDEX(ped: EntityHandle, p1: any): EntityHandle
	/** p1 is always 0 in the scripts. **/
	function GET_BEST_PED_WEAPON(ped: EntityHandle, p1: boolean): Hash
	/** Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_CURRENT_PED_VEHICLE_WEAPON(ped: EntityHandle, weaponHash: Hash): boolean
	/** Example in VB
	
	    Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
	        Dim arg As New OutputArgument()
	        Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
	        Return arg.GetResult(Of Integer)()
	    End Function
	
	Usage:
	If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
	Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET **/
	function GET_CURRENT_PED_VEHICLE_WEAPON(ped: EntityHandle, weaponHash: Address): boolean
	/**  **/
	function SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(ped: EntityHandle): void
	/** Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.
	
	Type flag bit values:
	1 = Melee weapons
	2 = Explosive weapons
	4 = Any other weapons
	
	Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
	7 returns true if you are equipped with any weapon except your fists.
	6 returns true if you are equipped with any weapon except melee weapons.
	5 returns true if you are equipped with any weapon except the Explosives weapon group.
	4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
	3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
	2 returns true only if you are equipped with any weapon from the Explosives weapon group.
	1 returns true only if you are equipped with any Melee weapon.
	0 never returns true.
	
	Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher. **/
	function IS_PED_ARMED(ped: EntityHandle, typeFlags: int): boolean
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function IS_WEAPON_VALID(weaponHash: Hash): boolean
	/** p2 should be FALSE, otherwise it seems to always return FALSE
	
	Bool does not check if the weapon is current equipped, unfortunately.
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function HAS_PED_GOT_WEAPON(ped: EntityHandle, weaponHash: Hash, p2: boolean): boolean
	/**  **/
	function IS_PED_WEAPON_READY_TO_SHOOT(ped: EntityHandle): boolean
	/**  **/
	function GET_PED_WEAPONTYPE_IN_SLOT(ped: EntityHandle, weaponSlot: Hash): Hash
	/** WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)
	
	From decompiled scripts
	Returns total ammo in weapon
	
	GTALua Example :
	natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_AMMO_IN_PED_WEAPON(ped: EntityHandle, weaponhash: Hash): int
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function ADD_AMMO_TO_PED(ped: EntityHandle, weaponHash: Hash, ammo: int): void
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_PED_AMMO(ped: EntityHandle, weaponHash: Hash, ammo: int, p3: boolean): void
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_PED_INFINITE_AMMO(ped: EntityHandle, toggle: boolean, weaponHash: Hash): void
	/**  **/
	function SET_PED_INFINITE_AMMO_CLIP(ped: EntityHandle, toggle: boolean): void
	/**  **/
	function SET_PED_STUN_GUN_FINITE_AMMO(p0: any, p1: any): void
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GIVE_WEAPON_TO_PED(ped: EntityHandle, weaponHash: Hash, ammoCount: int, isHidden: boolean, bForceInHand: boolean): void
	/** Gives a weapon to PED with a delay, example:
	
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GIVE_DELAYED_WEAPON_TO_PED(ped: EntityHandle, weaponHash: Hash, ammoCount: int, bForceInHand: boolean): void
	/** setting the last params to false it does that same so I would suggest its not a toggle **/
	function REMOVE_ALL_PED_WEAPONS(ped: EntityHandle, p1: boolean): void
	/** This native removes a specified weapon from your selected ped.
	
	Example:
	C#:
	Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
	
	C++:
	WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);
	
	The code above removes the knife from the player.
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function REMOVE_WEAPON_FROM_PED(ped: EntityHandle, weaponHash: Hash): void
	/** Hides the players weapon during a cutscene. **/
	function HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(ped: EntityHandle, toggle: boolean): void
	/** Has 5 parameters since latest patches. **/
	function SET_PED_CURRENT_WEAPON_VISIBLE(ped: EntityHandle, visible: boolean, deselectWeapon: boolean, p3: boolean, p4: boolean): void
	/**  **/
	function SET_PED_DROPS_WEAPONS_WHEN_DEAD(ped: EntityHandle, toggle: boolean): void
	/** It determines what weapons caused damage:
	
	If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
	If you want to define any melee weapon, second parameter=0, third parameter=1.
	If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function HAS_PED_BEEN_DAMAGED_BY_WEAPON(ped: EntityHandle, weaponHash: Hash, weaponType: int): boolean
	/** Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead. **/
	function CLEAR_PED_LAST_WEAPON_DAMAGE(ped: EntityHandle): void
	/** It determines what weapons caused damage:
	
	If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
	If you want to define any melee weapon, second parameter=0, third parameter=1.
	If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(entity: EntityHandle, weaponHash: Hash, weaponType: int): boolean
	/**  **/
	function CLEAR_ENTITY_LAST_WEAPON_DAMAGE(entity: EntityHandle): void
	/**  **/
	function SET_PED_DROPS_WEAPON(ped: EntityHandle): void
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_PED_DROPS_INVENTORY_WEAPON(ped: EntityHandle, weaponHash: Hash, xOffset: float, yOffset: float, zOffset: float, ammoCount: int): void
	/** p2 is mostly 1 in the scripts.
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_MAX_AMMO_IN_CLIP(ped: EntityHandle, weaponHash: Hash, p2: boolean): int
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_AMMO_IN_CLIP(ped: EntityHandle, weaponHash: Hash, ammo: IntPointer): boolean
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_AMMO_IN_CLIP(ped: EntityHandle, weaponHash: Hash, ammo: int): boolean
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_MAX_AMMO(ped: EntityHandle, weaponHash: Hash, ammo: IntPointer): boolean
	/** Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1 **/
	function GET_MAX_AMMO_BY_TYPE(ped: EntityHandle, ammoTypeHash: Hash, ammo: IntPointer): boolean
	/** Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1 **/
	function ADD_PED_AMMO_BY_TYPE(ped: EntityHandle, ammoTypeHash: Hash, ammo: int): void
	/** Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1 **/
	function SET_PED_AMMO_BY_TYPE(ped: EntityHandle, ammoTypeHash: Hash, ammo: int): void
	/**  **/
	function GET_PED_AMMO_BY_TYPE(ped: EntityHandle, ammoTypeHash: Hash): int
	/**  **/
	function SET_PED_AMMO_TO_DROP(ped: EntityHandle, p1: int): void
	/**  **/
	function SET_PICKUP_AMMO_AMOUNT_SCALER(p0: float): void
	/** Returns the current ammo type of the specified ped's specified weapon.
	MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
	Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_PED_AMMO_TYPE_FROM_WEAPON(ped: EntityHandle, weaponHash: Hash): Hash
	/** Returns the base/default ammo type of the specified ped's specified weapon.
	Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(ped: EntityHandle, weaponHash: Hash): Hash
	/** Pass ped. Pass address of Vector3.
	The coord will be put into the Vector3.
	The return will determine whether there was a coord found or not. **/
	function GET_PED_LAST_WEAPON_IMPACT_COORD(ped: EntityHandle, coords: Vector3Pointer): boolean
	/** p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
	p2 is always true. **/
	function SET_PED_GADGET(ped: EntityHandle, gadgetHash: Hash, p2: boolean): void
	/** gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE"). **/
	function GET_IS_PED_GADGET_EQUIPPED(ped: EntityHandle, gadgetHash: Hash): boolean
	/** Returns the hash of the weapon. 
	
	            var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);
	            sub_27D3(num7);
	            switch (num7)
	            {
	                case 0x24B17070:
	
	Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?
	
	-------------------------------------------------------------------------
	
	The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_SELECTED_PED_WEAPON(ped: EntityHandle): Hash
	/**              WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001); **/
	function EXPLODE_PROJECTILES(ped: EntityHandle, weaponHash: Hash, p2: boolean): void
	/** If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped. **/
	function REMOVE_ALL_PROJECTILES_OF_TYPE(weaponHash: Hash, explode: boolean): void
	/**  **/
	function GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(ped: EntityHandle): float
	/**  **/
	function GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(ped: EntityHandle): float
	/** Fourth Parameter = unsure, almost always -1 **/
	function HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(driver: EntityHandle, vehicle: EntityHandle, weaponHash: Hash, p3: any): boolean
	/** Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GIVE_WEAPON_COMPONENT_TO_PED(ped: EntityHandle, weaponHash: Hash, componentHash: Hash): void
	/** Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function REMOVE_WEAPON_COMPONENT_FROM_PED(ped: EntityHandle, weaponHash: Hash, componentHash: Hash): void
	/** Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function HAS_PED_GOT_WEAPON_COMPONENT(ped: EntityHandle, weaponHash: Hash, componentHash: Hash): boolean
	/** Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function IS_PED_WEAPON_COMPONENT_ACTIVE(ped: EntityHandle, weaponHash: Hash, componentHash: Hash): boolean
	/**  **/
	function REFILL_AMMO_INSTANTLY(ped: EntityHandle): boolean
	/** Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload. **/
	function MAKE_PED_RELOAD(ped: EntityHandle): boolean
	/** Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
	
	REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26); **/
	function REQUEST_WEAPON_ASSET(weaponHash: Hash, p1: int, p2: int): void
	/**  **/
	function HAS_WEAPON_ASSET_LOADED(weaponHash: Hash): boolean
	/**  **/
	function REMOVE_WEAPON_ASSET(weaponHash: Hash): void
	/** Now has 8 params. **/
	function CREATE_WEAPON_OBJECT(weaponHash: Hash, ammoCount: int, x: float, y: float, z: float, showWorldModel: boolean, scale: float, p7: any, p8: any, p9: any): EntityHandle
	/** addonHash:
	(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
	${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02} **/
	function GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(weaponObject: EntityHandle, addonHash: Hash): void
	/**  **/
	function REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(p0: any, p1: any): void
	/**  **/
	function HAS_WEAPON_GOT_WEAPON_COMPONENT(weapon: EntityHandle, addonHash: Hash): boolean
	/**  **/
	function GIVE_WEAPON_OBJECT_TO_PED(weaponObject: EntityHandle, ped: EntityHandle): void
	/** Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function DOES_WEAPON_TAKE_WEAPON_COMPONENT(weaponHash: Hash, componentHash: Hash): boolean
	/** Drops the current weapon and returns the object
	
	Unknown behavior when unarmed. **/
	function GET_WEAPON_OBJECT_FROM_PED(ped: EntityHandle, p1: boolean): EntityHandle
	/** Gives the specified loadout to the specified ped. 
	Loadouts are defined in common.rpf\data\ai\loadouts.meta **/
	function GIVE_LOADOUT_TO_PED(ped: EntityHandle, loadoutHash: Hash): void
	/** tintIndex can be the following:
	
	0 - Normal
	1 - Green
	2 - Gold
	3 - Pink
	4 - Army
	5 - LSPD
	6 - Orange
	7 - Platinum
	Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_PED_WEAPON_TINT_INDEX(ped: EntityHandle, weaponHash: Hash, tintIndex: int): void
	/** Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_PED_WEAPON_TINT_INDEX(ped: EntityHandle, weaponHash: Hash): int
	/** Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_WEAPON_OBJECT_TINT_INDEX(weapon: EntityHandle, tintIndex: int): void
	/**  **/
	function GET_WEAPON_OBJECT_TINT_INDEX(weapon: EntityHandle): int
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_WEAPON_TINT_COUNT(weaponHash: Hash): int
	/** Colors:
	0 = Gray
	1 = Dark Gray
	2 = Black
	3 = White
	4 = Blue
	5 = Cyan
	6 = Aqua
	7 = Cool Blue
	8 = Dark Blue
	9 = Royal Blue
	10 = Plum
	11 = Dark Purple
	12 = Purple
	13 = Red
	14 = Wine Red
	15 = Magenta
	16 = Pink
	17 = Salmon
	18 = Hot Pink
	19 = Rust Orange
	20 = Brown
	21 = Earth
	22 = Orange
	23 = Light Orange
	24 = Dark Yellow
	25 = Yellow
	26 = Light Brown
	27 = Lime Green
	28 = Olive
	29 = Moss
	30 = Turquoise
	31 = Dark Green
	Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_PED_WEAPON_COMPONENT_TINT_INDEX(ped: EntityHandle, weaponHash: Hash, camoComponentHash: Hash, colorIndex: int): void
	/** Returns -1 if camoComponentHash is invalid/not attached to the weapon.
	Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_PED_WEAPON_COMPONENT_TINT_INDEX(ped: EntityHandle, weaponHash: Hash, camoComponentHash: Hash): int
	/** Colors:
	0 = Gray
	1 = Dark Gray
	2 = Black
	3 = White
	4 = Blue
	5 = Cyan
	6 = Aqua
	7 = Cool Blue
	8 = Dark Blue
	9 = Royal Blue
	10 = Plum
	11 = Dark Purple
	12 = Purple
	13 = Red
	14 = Wine Red
	15 = Magenta
	16 = Pink
	17 = Salmon
	18 = Hot Pink
	19 = Rust Orange
	20 = Brown
	21 = Earth
	22 = Orange
	23 = Light Orange
	24 = Dark Yellow
	25 = Yellow
	26 = Light Brown
	27 = Lime Green
	28 = Olive
	29 = Moss
	30 = Turquoise
	31 = Dark Green
	Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject: EntityHandle, camoComponentHash: Hash, colorIndex: int): void
	/** Returns -1 if camoComponentHash is invalid/not attached to the weapon object.
	Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject: EntityHandle, camoComponentHash: Hash): int
	/**  **/
	function GET_PED_WEAPON_CAMO_INDEX(ped: EntityHandle, weaponHash: Hash): int
	/**  **/
	function SET_WEAPON_OBJECT_CAMO_INDEX(weaponObject: EntityHandle, p1: int): void
	/** struct WeaponHudStatsData
	{
	    BYTE hudDamage; // 0x0000
	    char _0x0001[0x7]; // 0x0001
	    BYTE hudSpeed; // 0x0008
	    char _0x0009[0x7]; // 0x0009
	    BYTE hudCapacity; // 0x0010
	    char _0x0011[0x7]; // 0x0011
	    BYTE hudAccuracy; // 0x0018
	    char _0x0019[0x7]; // 0x0019
	    BYTE hudRange; // 0x0020
	};
	
	Usage:
	
	WeaponHudStatsData data;
	if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&data))
	{
	    // BYTE damagePercentage = data.hudDamage and so on
	}
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_WEAPON_HUD_STATS(weaponHash: Hash, outData: Address): boolean
	/**  **/
	function GET_WEAPON_COMPONENT_HUD_STATS(componentHash: Hash, outData: Address): boolean
	/** This native does not return damages of weapons from the melee and explosive group.
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_WEAPON_DAMAGE(weaponHash: Hash, componentHash: Hash): float
	/** // Returns the size of the default weapon component clip.
	
	Use it like this:
	
	char cClipSize[32];
	Hash cur;
	if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))
	{
	    if (WEAPON::IS_WEAPON_VALID(cur))
	    {
	        int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
	        sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
	        vDrawString(cClipSize, 0.5f, 0.5f);
	    }
	}
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_WEAPON_CLIP_SIZE(weaponHash: Hash): int
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_WEAPON_TIME_BETWEEN_SHOTS(weaponHash: Hash): float
	/**  **/
	function SET_PED_CHANCE_OF_FIRING_BLANKS(ped: EntityHandle, xBias: float, yBias: float): void
	/** Returns handle of the projectile. **/
	function SET_PED_SHOOT_ORDNANCE_WEAPON(ped: EntityHandle, p1: float): EntityHandle
	/**  **/
	function REQUEST_WEAPON_HIGH_DETAIL_MODEL(weaponObject: EntityHandle): void
	/** Changes the weapon damage output by the given multiplier value. Must be run every frame.
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_WEAPON_DAMAGE_MODIFIER(weaponHash: Hash, damageMultiplier: float): void
	/**  **/
	function SET_WEAPON_AOE_MODIFIER(weaponHash: Hash, multiplier: float): void
	/**  **/
	function SET_WEAPON_EFFECT_DURATION_MODIFIER(p0: any, p1: any): void
	/** This native returns a true or false value.
	
	Ped ped = The ped whose weapon you want to check. **/
	function IS_PED_CURRENT_WEAPON_SILENCED(ped: EntityHandle): boolean
	/**  **/
	function IS_FLASH_LIGHT_ON(ped: EntityHandle): boolean
	/**  **/
	function SET_FLASH_LIGHT_FADE_DISTANCE(distance: float): boolean
	/** Enables/disables flashlight on ped's weapon. **/
	function SET_FLASH_LIGHT_ACTIVE_HISTORY(ped: EntityHandle, toggle: boolean): void
	/** Changes the selected ped aiming animation style. 
	Note : You must use GET_HASH_KEY!
	
	Strings to use with GET_HASH_KEY :
	
	    "Ballistic",
	    "Default",
	  "Fat",
	  "Female",
	   "FirstPerson",
	  "FirstPersonAiming",
	    "FirstPersonFranklin",
	  "FirstPersonFranklinAiming",
	    "FirstPersonFranklinRNG",
	   "FirstPersonFranklinScope",
	 "FirstPersonMPFemale",
	  "FirstPersonMichael",
	   "FirstPersonMichaelAiming",
	 "FirstPersonMichaelRNG",
	    "FirstPersonMichaelScope",
	  "FirstPersonRNG",
	   "FirstPersonScope",
	 "FirstPersonTrevor",
	    "FirstPersonTrevorAiming",
	  "FirstPersonTrevorRNG",
	 "FirstPersonTrevorScope",
	   "Franklin",
	 "Gang",
	 "Gang1H",
	   "GangFemale",
	   "Hillbilly",
	    "MP_F_Freemode",
	    "Michael",
	  "SuperFat",
	 "Trevor" **/
	function SET_WEAPON_ANIMATION_OVERRIDE(ped: EntityHandle, animStyle: Hash): void
	/** enum class eDamageType
	{
		UNKNOWN = 0,
		NONE = 1,
		MELEE = 2,
		BULLET = 3,
		BULLET_RUBBER = 4,
		EXPLOSIVE = 5,
		FIRE = 6,
		COLLISION = 7,
		FALL = 8,
		DROWN = 9,
		ELECTRIC = 10,
		BARBED_WIRE = 11,
		FIRE_EXTINGUISHER = 12,
		SMOKE = 13,
		WATER_CANNON = 14,
		TRANQUILIZER = 15,
	};
	
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function GET_WEAPON_DAMAGE_TYPE(weaponHash: Hash): int
	/**  **/
	function SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(ped: EntityHandle): void
	/** this returns if you can use the weapon while using a parachute
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function CAN_USE_WEAPON_ON_PARACHUTE(weaponHash: Hash): boolean
	/** Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts. **/
	function CREATE_AIR_DEFENCE_SPHERE(x: float, y: float, z: float, radius: float, p4: float, p5: float, p6: float, weaponHash: Hash): int
	/** Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function CREATE_AIR_DEFENCE_ANGLED_AREA(p0: float, p1: float, p2: float, p3: float, p4: float, p5: float, p6: float, p7: float, p8: float, p9: float, weaponHash: Hash): int
	/**  **/
	function REMOVE_AIR_DEFENCE_SPHERE(zoneId: int): boolean
	/**  **/
	function REMOVE_ALL_AIR_DEFENCE_SPHERES(): void
	/**  **/
	function SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(player: Player, zoneId: int, enable: boolean): void
	/**  **/
	function IS_AIR_DEFENCE_SPHERE_IN_AREA(x: float, y: float, z: float, radius: float, outZoneId: IntPointer): boolean
	/**  **/
	function FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(zoneId: int, x: float, y: float, z: float): void
	/**  **/
	function DOES_AIR_DEFENCE_SPHERE_EXIST(zoneId: int): boolean
	/** Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
	Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json **/
	function SET_CAN_PED_SELECT_INVENTORY_WEAPON(ped: EntityHandle, weaponHash: Hash, toggle: boolean): void
	/** Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons. **/
	function SET_CAN_PED_SELECT_ALL_WEAPONS(ped: EntityHandle, toggle: boolean): void
}

/** @noSelf **/
declare namespace ZONE {
	/**  **/
	function GET_ZONE_AT_COORDS(x: float, y: float, z: float): int
	/** 'zoneName' corresponds to an entry in 'popzone.ipl'.
	
	AIRP = Los Santos International Airport
	ALAMO = Alamo Sea
	ALTA = Alta
	ARMYB = Fort Zancudo
	BANHAMC = Banham Canyon Dr
	BANNING = Banning
	BEACH = Vespucci Beach
	BHAMCA = Banham Canyon
	BRADP = Braddock Pass
	BRADT = Braddock Tunnel
	BURTON = Burton
	CALAFB = Calafia Bridge
	CANNY = Raton Canyon
	CCREAK = Cassidy Creek
	CHAMH = Chamberlain Hills
	CHIL = Vinewood Hills
	CHU = Chumash
	CMSW = Chiliad Mountain State Wilderness
	CYPRE = Cypress Flats
	DAVIS = Davis
	DELBE = Del Perro Beach
	DELPE = Del Perro
	DELSOL = La Puerta
	DESRT = Grand Senora Desert
	DOWNT = Downtown
	DTVINE = Downtown Vinewood
	EAST_V = East Vinewood
	EBURO = El Burro Heights
	ELGORL = El Gordo Lighthouse
	ELYSIAN = Elysian Island
	GALFISH = Galilee
	GOLF = GWC and Golfing Society
	GRAPES = Grapeseed
	GREATC = Great Chaparral
	HARMO = Harmony
	HAWICK = Hawick
	HORS = Vinewood Racetrack
	HUMLAB = Humane Labs and Research
	JAIL = Bolingbroke Penitentiary
	KOREAT = Little Seoul
	LACT = Land Act Reservoir
	LAGO = Lago Zancudo
	LDAM = Land Act Dam
	LEGSQU = Legion Square
	LMESA = La Mesa
	LOSPUER = La Puerta
	MIRR = Mirror Park
	MORN = Morningwood
	MOVIE = Richards Majestic
	MTCHIL = Mount Chiliad
	MTGORDO = Mount Gordo
	MTJOSE = Mount Josiah
	MURRI = Murrieta Heights
	NCHU = North Chumash
	NOOSE = N.O.O.S.E
	OCEANA = Pacific Ocean
	PALCOV = Paleto Cove
	PALETO = Paleto Bay
	PALFOR = Paleto Forest
	PALHIGH = Palomino Highlands
	PALMPOW = Palmer-Taylor Power Station
	PBLUFF = Pacific Bluffs
	PBOX = Pillbox Hill
	PROCOB = Procopio Beach
	RANCHO = Rancho
	RGLEN = Richman Glen
	RICHM = Richman
	ROCKF = Rockford Hills
	RTRAK = Redwood Lights Track
	SANAND = San Andreas
	SANCHIA = San Chianski Mountain Range
	SANDY = Sandy Shores
	SKID = Mission Row
	SLAB = Stab City
	STAD = Maze Bank Arena
	STRAW = Strawberry
	TATAMO = Tataviam Mountains
	TERMINA = Terminal
	TEXTI = Textile City
	TONGVAH = Tongva Hills
	TONGVAV = Tongva Valley
	VCANA = Vespucci Canals
	VESP = Vespucci
	VINE = Vinewood
	WINDF = Ron Alternates Wind Farm
	WVINE = West Vinewood
	ZANCUDO = Zancudo River
	ZP_ORT = Port of South Los Santos
	ZQ_UAR = Davis Quartz
	
	Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json **/
	function GET_ZONE_FROM_NAME_ID(zoneName: string): int
	/**  **/
	function GET_ZONE_POPSCHEDULE(zoneId: int): int
	/** AIRP = Los Santos International Airport
	ALAMO = Alamo Sea
	ALTA = Alta
	ARMYB = Fort Zancudo
	BANHAMC = Banham Canyon Dr
	BANNING = Banning
	BEACH = Vespucci Beach
	BHAMCA = Banham Canyon
	BRADP = Braddock Pass
	BRADT = Braddock Tunnel
	BURTON = Burton
	CALAFB = Calafia Bridge
	CANNY = Raton Canyon
	CCREAK = Cassidy Creek
	CHAMH = Chamberlain Hills
	CHIL = Vinewood Hills
	CHU = Chumash
	CMSW = Chiliad Mountain State Wilderness
	CYPRE = Cypress Flats
	DAVIS = Davis
	DELBE = Del Perro Beach
	DELPE = Del Perro
	DELSOL = La Puerta
	DESRT = Grand Senora Desert
	DOWNT = Downtown
	DTVINE = Downtown Vinewood
	EAST_V = East Vinewood
	EBURO = El Burro Heights
	ELGORL = El Gordo Lighthouse
	ELYSIAN = Elysian Island
	GALFISH = Galilee
	GOLF = GWC and Golfing Society
	GRAPES = Grapeseed
	GREATC = Great Chaparral
	HARMO = Harmony
	HAWICK = Hawick
	HORS = Vinewood Racetrack
	HUMLAB = Humane Labs and Research
	JAIL = Bolingbroke Penitentiary
	KOREAT = Little Seoul
	LACT = Land Act Reservoir
	LAGO = Lago Zancudo
	LDAM = Land Act Dam
	LEGSQU = Legion Square
	LMESA = La Mesa
	LOSPUER = La Puerta
	MIRR = Mirror Park
	MORN = Morningwood
	MOVIE = Richards Majestic
	MTCHIL = Mount Chiliad
	MTGORDO = Mount Gordo
	MTJOSE = Mount Josiah
	MURRI = Murrieta Heights
	NCHU = North Chumash
	NOOSE = N.O.O.S.E
	OCEANA = Pacific Ocean
	PALCOV = Paleto Cove
	PALETO = Paleto Bay
	PALFOR = Paleto Forest
	PALHIGH = Palomino Highlands
	PALMPOW = Palmer-Taylor Power Station
	PBLUFF = Pacific Bluffs
	PBOX = Pillbox Hill
	PROCOB = Procopio Beach
	RANCHO = Rancho
	RGLEN = Richman Glen
	RICHM = Richman
	ROCKF = Rockford Hills
	RTRAK = Redwood Lights Track
	SANAND = San Andreas
	SANCHIA = San Chianski Mountain Range
	SANDY = Sandy Shores
	SKID = Mission Row
	SLAB = Stab City
	STAD = Maze Bank Arena
	STRAW = Strawberry
	TATAMO = Tataviam Mountains
	TERMINA = Terminal
	TEXTI = Textile City
	TONGVAH = Tongva Hills
	TONGVAV = Tongva Valley
	VCANA = Vespucci Canals
	VESP = Vespucci
	VINE = Vinewood
	WINDF = Ron Alternates Wind Farm
	WVINE = West Vinewood
	ZANCUDO = Zancudo River
	ZP_ORT = Port of South Los Santos
	ZQ_UAR = Davis Quartz
	
	Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json **/
	function GET_NAME_OF_ZONE(x: float, y: float, z: float): string
	/**  **/
	function SET_ZONE_ENABLED(zoneId: int, toggle: boolean): void
	/** cellphone range 1- 5 used for signal bar in iFruit phone **/
	function GET_ZONE_SCUMMINESS(zoneId: int): int
	/** Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
	
	Modified example from "am_imp_exp.c4", line 6406:
	/ * popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
	etc.
	* /
	ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
	STREAMING::REQUEST_MODEL(vehicleHash); **/
	function OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(scheduleId: int, vehicleHash: Hash): void
	/** Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
	
	Modified example from "am_imp_exp.c4", line 6418:
	/ * popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
	etc.
	* /
	STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
	ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]); **/
	function CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(scheduleId: int): void
	/** Returns a hash representing which part of the map the given coords are located.
	
	Possible return values:
	(Hash of) city -> -289320599
	(Hash of) countryside -> 2072609373
	
	C# Example :
	
	Ped player = Game.Player.Character;
	Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z); **/
	function GET_HASH_OF_MAP_AREA_AT_COORDS(x: float, y: float, z: float): Hash
}

